
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002980  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b18  08002b18  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b20  08002b20  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000000ec  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000065f3  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000149d  00000000  00000000  00026682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000650  00000000  00000000  00027b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004ae  00000000  00000000  00028170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fec7  00000000  00000000  0002861e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000078de  00000000  00000000  000484e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1c13  00000000  00000000  0004fdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001894  00000000  00000000  001119d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0011326c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002af0 	.word	0x08002af0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08002af0 	.word	0x08002af0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80004d8:	2200      	movs	r2, #0
 80004da:	2108      	movs	r1, #8
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <LIS3DSH_WriteIO+0x4c>)
 80004de:	f001 f8a1 	bl	8001624 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80004e2:	f107 010f 	add.w	r1, r7, #15
 80004e6:	230a      	movs	r3, #10
 80004e8:	2201      	movs	r2, #1
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <LIS3DSH_WriteIO+0x50>)
 80004ec:	f001 fd79 	bl	8001fe2 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	230a      	movs	r3, #10
 80004f6:	6839      	ldr	r1, [r7, #0]
 80004f8:	4806      	ldr	r0, [pc, #24]	; (8000514 <LIS3DSH_WriteIO+0x50>)
 80004fa:	f001 fd72 	bl	8001fe2 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80004fe:	2201      	movs	r2, #1
 8000500:	2108      	movs	r1, #8
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <LIS3DSH_WriteIO+0x4c>)
 8000504:	f001 f88e 	bl	8001624 <HAL_GPIO_WritePin>
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000
 8000514:	20000038 	.word	0x20000038

08000518 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800052e:	b2db      	uxtb	r3, r3
 8000530:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000532:	2200      	movs	r2, #0
 8000534:	2108      	movs	r1, #8
 8000536:	4818      	ldr	r0, [pc, #96]	; (8000598 <LIS3DSH_ReadIO+0x80>)
 8000538:	f001 f874 	bl	8001624 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 800053c:	f107 0108 	add.w	r1, r7, #8
 8000540:	230a      	movs	r3, #10
 8000542:	2201      	movs	r2, #1
 8000544:	4815      	ldr	r0, [pc, #84]	; (800059c <LIS3DSH_ReadIO+0x84>)
 8000546:	f001 fd4c 	bl	8001fe2 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f107 0108 	add.w	r1, r7, #8
 8000552:	230a      	movs	r3, #10
 8000554:	4811      	ldr	r0, [pc, #68]	; (800059c <LIS3DSH_ReadIO+0x84>)
 8000556:	f001 fe87 	bl	8002268 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 800055a:	2201      	movs	r2, #1
 800055c:	2108      	movs	r1, #8
 800055e:	480e      	ldr	r0, [pc, #56]	; (8000598 <LIS3DSH_ReadIO+0x80>)
 8000560:	f001 f860 	bl	8001624 <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e00b      	b.n	8000582 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 800056a:	7bfa      	ldrb	r2, [r7, #15]
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	6839      	ldr	r1, [r7, #0]
 8000570:	440b      	add	r3, r1
 8000572:	3210      	adds	r2, #16
 8000574:	443a      	add	r2, r7
 8000576:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800057a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	3301      	adds	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	7bfa      	ldrb	r2, [r7, #15]
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	429a      	cmp	r2, r3
 800058c:	dbed      	blt.n	800056a <LIS3DSH_ReadIO+0x52>
	}
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021000 	.word	0x40021000
 800059c:	20000038 	.word	0x20000038

080005a0 <LIS3DSH_Init>:

//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 80005ae:	2258      	movs	r2, #88	; 0x58
 80005b0:	6879      	ldr	r1, [r7, #4]
 80005b2:	485b      	ldr	r0, [pc, #364]	; (8000720 <LIS3DSH_Init+0x180>)
 80005b4:	f002 fa8e 	bl	8002ad4 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	78db      	ldrb	r3, [r3, #3]
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	f003 0307 	and.w	r3, r3, #7
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	b25b      	sxtb	r3, r3
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	f023 030f 	bic.w	r3, r3, #15
 80005da:	b25a      	sxtb	r2, r3
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80005e8:	f107 030f 	add.w	r3, r7, #15
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	2020      	movs	r0, #32
 80005f2:	f7ff ff67 	bl	80004c4 <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000604:	b25a      	sxtb	r2, r3
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b25b      	sxtb	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	b25b      	sxtb	r3, r3
 8000618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800061c:	b25a      	sxtb	r2, r3
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b25b      	sxtb	r3, r3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 800062a:	f107 030f 	add.w	r3, r7, #15
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	2024      	movs	r0, #36	; 0x24
 8000634:	f7ff ff46 	bl	80004c4 <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d008      	beq.n	8000652 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000640:	2388      	movs	r3, #136	; 0x88
 8000642:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8000644:	f107 030f 	add.w	r3, r7, #15
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	2023      	movs	r0, #35	; 0x23
 800064e:	f7ff ff39 	bl	80004c4 <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	2b20      	cmp	r3, #32
 8000658:	d858      	bhi.n	800070c <LIS3DSH_Init+0x16c>
 800065a:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <LIS3DSH_Init+0xc0>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	080006e5 	.word	0x080006e5
 8000664:	0800070d 	.word	0x0800070d
 8000668:	0800070d 	.word	0x0800070d
 800066c:	0800070d 	.word	0x0800070d
 8000670:	0800070d 	.word	0x0800070d
 8000674:	0800070d 	.word	0x0800070d
 8000678:	0800070d 	.word	0x0800070d
 800067c:	0800070d 	.word	0x0800070d
 8000680:	080006ed 	.word	0x080006ed
 8000684:	0800070d 	.word	0x0800070d
 8000688:	0800070d 	.word	0x0800070d
 800068c:	0800070d 	.word	0x0800070d
 8000690:	0800070d 	.word	0x0800070d
 8000694:	0800070d 	.word	0x0800070d
 8000698:	0800070d 	.word	0x0800070d
 800069c:	0800070d 	.word	0x0800070d
 80006a0:	080006f5 	.word	0x080006f5
 80006a4:	0800070d 	.word	0x0800070d
 80006a8:	0800070d 	.word	0x0800070d
 80006ac:	0800070d 	.word	0x0800070d
 80006b0:	0800070d 	.word	0x0800070d
 80006b4:	0800070d 	.word	0x0800070d
 80006b8:	0800070d 	.word	0x0800070d
 80006bc:	0800070d 	.word	0x0800070d
 80006c0:	080006fd 	.word	0x080006fd
 80006c4:	0800070d 	.word	0x0800070d
 80006c8:	0800070d 	.word	0x0800070d
 80006cc:	0800070d 	.word	0x0800070d
 80006d0:	0800070d 	.word	0x0800070d
 80006d4:	0800070d 	.word	0x0800070d
 80006d8:	0800070d 	.word	0x0800070d
 80006dc:	0800070d 	.word	0x0800070d
 80006e0:	08000705 	.word	0x08000705
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <LIS3DSH_Init+0x184>)
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <LIS3DSH_Init+0x188>)
 80006e8:	601a      	str	r2, [r3, #0]
			break;
 80006ea:	e00f      	b.n	800070c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <LIS3DSH_Init+0x184>)
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <LIS3DSH_Init+0x18c>)
 80006f0:	601a      	str	r2, [r3, #0]
			break;
 80006f2:	e00b      	b.n	800070c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <LIS3DSH_Init+0x184>)
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <LIS3DSH_Init+0x190>)
 80006f8:	601a      	str	r2, [r3, #0]
			break;
 80006fa:	e007      	b.n	800070c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <LIS3DSH_Init+0x184>)
 80006fe:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LIS3DSH_Init+0x194>)
 8000700:	601a      	str	r2, [r3, #0]
			break;
 8000702:	e003      	b.n	800070c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <LIS3DSH_Init+0x184>)
 8000706:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <LIS3DSH_Init+0x198>)
 8000708:	601a      	str	r2, [r3, #0]
			break;
 800070a:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 800070c:	2201      	movs	r2, #1
 800070e:	2108      	movs	r1, #8
 8000710:	480a      	ldr	r0, [pc, #40]	; (800073c <LIS3DSH_Init+0x19c>)
 8000712:	f000 ff87 	bl	8001624 <HAL_GPIO_WritePin>
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000038 	.word	0x20000038
 8000724:	20000000 	.word	0x20000000
 8000728:	3d75c28f 	.word	0x3d75c28f
 800072c:	3df5c28f 	.word	0x3df5c28f
 8000730:	3e3851ec 	.word	0x3e3851ec
 8000734:	3e75c28f 	.word	0x3e75c28f
 8000738:	3f3ae148 	.word	0x3f3ae148
 800073c:	40021000 	.word	0x40021000

08000740 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2202      	movs	r2, #2
 800074e:	4619      	mov	r1, r3
 8000750:	2028      	movs	r0, #40	; 0x28
 8000752:	f7ff fee1 	bl	8000518 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8000756:	7d7b      	ldrb	r3, [r7, #21]
 8000758:	b29b      	uxth	r3, r3
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b29a      	uxth	r2, r3
 800075e:	7d3b      	ldrb	r3, [r7, #20]
 8000760:	b29b      	uxth	r3, r3
 8000762:	4413      	add	r3, r2
 8000764:	b29b      	uxth	r3, r3
 8000766:	b21b      	sxth	r3, r3
 8000768:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2202      	movs	r2, #2
 8000770:	4619      	mov	r1, r3
 8000772:	202a      	movs	r0, #42	; 0x2a
 8000774:	f7ff fed0 	bl	8000518 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8000778:	7d7b      	ldrb	r3, [r7, #21]
 800077a:	b29b      	uxth	r3, r3
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	b29a      	uxth	r2, r3
 8000780:	7d3b      	ldrb	r3, [r7, #20]
 8000782:	b29b      	uxth	r3, r3
 8000784:	4413      	add	r3, r2
 8000786:	b29b      	uxth	r3, r3
 8000788:	b21b      	sxth	r3, r3
 800078a:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2202      	movs	r2, #2
 8000792:	4619      	mov	r1, r3
 8000794:	202c      	movs	r0, #44	; 0x2c
 8000796:	f7ff febf 	bl	8000518 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800079a:	7d7b      	ldrb	r3, [r7, #21]
 800079c:	b29b      	uxth	r3, r3
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	7d3b      	ldrb	r3, [r7, #20]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	461a      	mov	r2, r3
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	6010      	str	r0, [r2, #0]
 80007ba:	889b      	ldrh	r3, [r3, #4]
 80007bc:	8093      	strh	r3, [r2, #4]
	
}
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ffb4 	bl	8000740 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80007d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80007dc:	ee07 3a90 	vmov	s15, r3
 80007e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <LIS3DSH_GetDataScaled+0xe4>)
 80007e6:	edd3 7a00 	vldr	s15, [r3]
 80007ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <LIS3DSH_GetDataScaled+0xe8>)
 80007f0:	edd3 7a00 	vldr	s15, [r3]
 80007f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007f8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80008b4 <LIS3DSH_GetDataScaled+0xec>
 80007fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000800:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <LIS3DSH_GetDataScaled+0xf0>)
 8000802:	edd3 7a00 	vldr	s15, [r3]
 8000806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800080a:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 800080e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <LIS3DSH_GetDataScaled+0xe4>)
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <LIS3DSH_GetDataScaled+0xf4>)
 8000826:	edd3 7a00 	vldr	s15, [r3]
 800082a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80008b4 <LIS3DSH_GetDataScaled+0xec>
 8000832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <LIS3DSH_GetDataScaled+0xf8>)
 8000838:	edd3 7a00 	vldr	s15, [r3]
 800083c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000840:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 8000844:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000848:	ee07 3a90 	vmov	s15, r3
 800084c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <LIS3DSH_GetDataScaled+0xe4>)
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <LIS3DSH_GetDataScaled+0xfc>)
 800085c:	edd3 7a00 	vldr	s15, [r3]
 8000860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000864:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80008b4 <LIS3DSH_GetDataScaled+0xec>
 8000868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <LIS3DSH_GetDataScaled+0x100>)
 800086e:	edd3 7a00 	vldr	s15, [r3]
 8000872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000876:	edc7 7a06 	vstr	s15, [r7, #24]
	
	return tempScaledData;
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	f107 0210 	add.w	r2, r7, #16
 8000882:	ca07      	ldmia	r2, {r0, r1, r2}
 8000884:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800088a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	ee06 1a90 	vmov	s13, r1
 8000892:	ee07 2a10 	vmov	s14, r2
 8000896:	ee07 3a90 	vmov	s15, r3
}
 800089a:	eeb0 0a66 	vmov.f32	s0, s13
 800089e:	eef0 0a47 	vmov.f32	s1, s14
 80008a2:	eeb0 1a67 	vmov.f32	s2, s15
 80008a6:	3730      	adds	r7, #48	; 0x30
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000004 	.word	0x20000004
 80008b4:	00000000 	.word	0x00000000
 80008b8:	20000090 	.word	0x20000090
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000094 	.word	0x20000094
 80008c4:	2000000c 	.word	0x2000000c
 80008c8:	20000098 	.word	0x20000098

080008cc <LIS3DSH_X_calibrate>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80008d6:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80008da:	ed97 7a00 	vldr	s14, [r7]
 80008de:	edd7 7a01 	vldr	s15, [r7, #4]
 80008e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80008ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <LIS3DSH_X_calibrate+0x50>)
 80008f0:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80008f4:	ed97 7a00 	vldr	s14, [r7]
 80008f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80008fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000900:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000920 <LIS3DSH_X_calibrate+0x54>
 8000904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <LIS3DSH_X_calibrate+0x58>)
 800090a:	edc3 7a00 	vstr	s15, [r3]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000090 	.word	0x20000090
 8000920:	44fa0000 	.word	0x44fa0000
 8000924:	20000004 	.word	0x20000004

08000928 <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000932:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 8000936:	ed97 7a00 	vldr	s14, [r7]
 800093a:	edd7 7a01 	vldr	s15, [r7, #4]
 800093e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000942:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <LIS3DSH_Y_calibrate+0x50>)
 800094c:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8000950:	ed97 7a00 	vldr	s14, [r7]
 8000954:	edd7 7a01 	vldr	s15, [r7, #4]
 8000958:	ee37 7a67 	vsub.f32	s14, s14, s15
 800095c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800097c <LIS3DSH_Y_calibrate+0x54>
 8000960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <LIS3DSH_Y_calibrate+0x58>)
 8000966:	edc3 7a00 	vstr	s15, [r3]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000094 	.word	0x20000094
 800097c:	44fa0000 	.word	0x44fa0000
 8000980:	20000008 	.word	0x20000008

08000984 <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	ed87 0a01 	vstr	s0, [r7, #4]
 800098e:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 8000992:	ed97 7a00 	vldr	s14, [r7]
 8000996:	edd7 7a01 	vldr	s15, [r7, #4]
 800099a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800099e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80009a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <LIS3DSH_Z_calibrate+0x50>)
 80009a8:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 80009ac:	ed97 7a00 	vldr	s14, [r7]
 80009b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80009b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009b8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80009d8 <LIS3DSH_Z_calibrate+0x54>
 80009bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <LIS3DSH_Z_calibrate+0x58>)
 80009c2:	edc3 7a00 	vstr	s15, [r3]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000098 	.word	0x20000098
 80009d8:	44fa0000 	.word	0x44fa0000
 80009dc:	2000000c 	.word	0x2000000c

080009e0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  drdyFlag = 1;
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_GPIO_EXTI_Callback+0x1c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20000100 	.word	0x20000100

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 faed 	bl	8000fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f8f7 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 f989 	bl	8000d24 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a12:	f000 f951 	bl	8000cb8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LIS3DSH_InitTypeDef myAccConfigDef;

      myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 8000a16:	2340      	movs	r3, #64	; 0x40
 8000a18:	703b      	strb	r3, [r7, #0]
      myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	707b      	strb	r3, [r7, #1]
      myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8000a1e:	23c0      	movs	r3, #192	; 0xc0
 8000a20:	70bb      	strb	r3, [r7, #2]
      myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8000a22:	2307      	movs	r3, #7
 8000a24:	70fb      	strb	r3, [r7, #3]
      myAccConfigDef.interruptEnable = true;
 8000a26:	2301      	movs	r3, #1
 8000a28:	713b      	strb	r3, [r7, #4]
      LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4868      	ldr	r0, [pc, #416]	; (8000bd0 <main+0x1d0>)
 8000a30:	f7ff fdb6 	bl	80005a0 <LIS3DSH_Init>

      LIS3DSH_X_calibrate(-1000.0, 980.0);
 8000a34:	eddf 0a67 	vldr	s1, [pc, #412]	; 8000bd4 <main+0x1d4>
 8000a38:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8000bd8 <main+0x1d8>
 8000a3c:	f7ff ff46 	bl	80008cc <LIS3DSH_X_calibrate>
      LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 8000a40:	eddf 0a66 	vldr	s1, [pc, #408]	; 8000bdc <main+0x1dc>
 8000a44:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8000be0 <main+0x1e0>
 8000a48:	f7ff ff6e 	bl	8000928 <LIS3DSH_Y_calibrate>
      LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8000a4c:	eddf 0a63 	vldr	s1, [pc, #396]	; 8000bdc <main+0x1dc>
 8000a50:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8000be4 <main+0x1e4>
 8000a54:	f7ff ff96 	bl	8000984 <LIS3DSH_Z_calibrate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(drdyFlag == 1)
 8000a58:	4b63      	ldr	r3, [pc, #396]	; (8000be8 <main+0x1e8>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d111      	bne.n	8000a84 <main+0x84>
	  	  	  {
	  	  		  myData = LIS3DSH_GetDataScaled();
 8000a60:	f7ff feb2 	bl	80007c8 <LIS3DSH_GetDataScaled>
 8000a64:	eef0 6a40 	vmov.f32	s13, s0
 8000a68:	eeb0 7a60 	vmov.f32	s14, s1
 8000a6c:	eef0 7a41 	vmov.f32	s15, s2
 8000a70:	4b5e      	ldr	r3, [pc, #376]	; (8000bec <main+0x1ec>)
 8000a72:	edc3 6a00 	vstr	s13, [r3]
 8000a76:	ed83 7a01 	vstr	s14, [r3, #4]
 8000a7a:	edc3 7a02 	vstr	s15, [r3, #8]
	  	  		  drdyFlag = 0;
 8000a7e:	4b5a      	ldr	r3, [pc, #360]	; (8000be8 <main+0x1e8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
	  	  	  }
	  // Check the inclination and set LEDs accordingly
	  if (myData.x > 256)
 8000a84:	4b59      	ldr	r3, [pc, #356]	; (8000bec <main+0x1ec>)
 8000a86:	edd3 7a00 	vldr	s15, [r3]
 8000a8a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8000bf0 <main+0x1f0>
 8000a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a96:	dd18      	ble.n	8000aca <main+0xca>
	          {
	              HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9e:	4855      	ldr	r0, [pc, #340]	; (8000bf4 <main+0x1f4>)
 8000aa0:	f000 fdc0 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	4852      	ldr	r0, [pc, #328]	; (8000bf4 <main+0x1f4>)
 8000aac:	f000 fdba 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab6:	484f      	ldr	r0, [pc, #316]	; (8000bf4 <main+0x1f4>)
 8000ab8:	f000 fdb4 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac2:	484c      	ldr	r0, [pc, #304]	; (8000bf4 <main+0x1f4>)
 8000ac4:	f000 fdae 	bl	8001624 <HAL_GPIO_WritePin>
 8000ac8:	e7c6      	b.n	8000a58 <main+0x58>
	          }
	          else if (myData.x < -256)
 8000aca:	4b48      	ldr	r3, [pc, #288]	; (8000bec <main+0x1ec>)
 8000acc:	edd3 7a00 	vldr	s15, [r3]
 8000ad0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000bf8 <main+0x1f8>
 8000ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000adc:	d518      	bpl.n	8000b10 <main+0x110>
	          {
	              HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae4:	4843      	ldr	r0, [pc, #268]	; (8000bf4 <main+0x1f4>)
 8000ae6:	f000 fd9d 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af0:	4840      	ldr	r0, [pc, #256]	; (8000bf4 <main+0x1f4>)
 8000af2:	f000 fd97 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afc:	483d      	ldr	r0, [pc, #244]	; (8000bf4 <main+0x1f4>)
 8000afe:	f000 fd91 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b08:	483a      	ldr	r0, [pc, #232]	; (8000bf4 <main+0x1f4>)
 8000b0a:	f000 fd8b 	bl	8001624 <HAL_GPIO_WritePin>
 8000b0e:	e7a3      	b.n	8000a58 <main+0x58>
	          }
	          else if (myData.y > 256)
 8000b10:	4b36      	ldr	r3, [pc, #216]	; (8000bec <main+0x1ec>)
 8000b12:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b16:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000bf0 <main+0x1f0>
 8000b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b22:	dd18      	ble.n	8000b56 <main+0x156>
	          {
	              HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2a:	4832      	ldr	r0, [pc, #200]	; (8000bf4 <main+0x1f4>)
 8000b2c:	f000 fd7a 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b36:	482f      	ldr	r0, [pc, #188]	; (8000bf4 <main+0x1f4>)
 8000b38:	f000 fd74 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b42:	482c      	ldr	r0, [pc, #176]	; (8000bf4 <main+0x1f4>)
 8000b44:	f000 fd6e 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <main+0x1f4>)
 8000b50:	f000 fd68 	bl	8001624 <HAL_GPIO_WritePin>
 8000b54:	e780      	b.n	8000a58 <main+0x58>
	          }
	          else if (myData.y < -256)
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <main+0x1ec>)
 8000b58:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b5c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000bf8 <main+0x1f8>
 8000b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b68:	d518      	bpl.n	8000b9c <main+0x19c>
	          {
	              HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b70:	4820      	ldr	r0, [pc, #128]	; (8000bf4 <main+0x1f4>)
 8000b72:	f000 fd57 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7c:	481d      	ldr	r0, [pc, #116]	; (8000bf4 <main+0x1f4>)
 8000b7e:	f000 fd51 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b88:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <main+0x1f4>)
 8000b8a:	f000 fd4b 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b94:	4817      	ldr	r0, [pc, #92]	; (8000bf4 <main+0x1f4>)
 8000b96:	f000 fd45 	bl	8001624 <HAL_GPIO_WritePin>
 8000b9a:	e75d      	b.n	8000a58 <main+0x58>
	          }
	          else
	          {
	              // No inclination, turn off all LEDs
	              HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <main+0x1f4>)
 8000ba4:	f000 fd3e 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bae:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <main+0x1f4>)
 8000bb0:	f000 fd38 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <main+0x1f4>)
 8000bbc:	f000 fd32 	bl	8001624 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc6:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <main+0x1f4>)
 8000bc8:	f000 fd2c 	bl	8001624 <HAL_GPIO_WritePin>
	  if(drdyFlag == 1)
 8000bcc:	e744      	b.n	8000a58 <main+0x58>
 8000bce:	bf00      	nop
 8000bd0:	2000009c 	.word	0x2000009c
 8000bd4:	44750000 	.word	0x44750000
 8000bd8:	c47a0000 	.word	0xc47a0000
 8000bdc:	44820000 	.word	0x44820000
 8000be0:	c47f0000 	.word	0xc47f0000
 8000be4:	c4660000 	.word	0xc4660000
 8000be8:	20000100 	.word	0x20000100
 8000bec:	200000f4 	.word	0x200000f4
 8000bf0:	43800000 	.word	0x43800000
 8000bf4:	40020c00 	.word	0x40020c00
 8000bf8:	c3800000 	.word	0xc3800000

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	; 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	; 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 ff36 	bl	8002a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <SystemClock_Config+0xb4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemClock_Config+0xb4>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <SystemClock_Config+0xb4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <SystemClock_Config+0xb8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemClock_Config+0xb8>)
 8000c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <SystemClock_Config+0xb8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	2310      	movs	r3, #16
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fd0b 	bl	8001688 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c78:	f000 f8d0 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 ff6e 	bl	8001b78 <HAL_RCC_ClockConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ca2:	f000 f8bb 	bl	8000e1c <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000cbe:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <MX_SPI1_Init+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000cc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000cec:	2220      	movs	r2, #32
 8000cee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000d04:	220a      	movs	r2, #10
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_SPI1_Init+0x64>)
 8000d0a:	f001 f8e1 	bl	8001ed0 <HAL_SPI_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d14:	f000 f882 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000009c 	.word	0x2000009c
 8000d20:	40013000 	.word	0x40013000

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <MX_GPIO_Init+0xec>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <MX_GPIO_Init+0xec>)
 8000d44:	f043 0310 	orr.w	r3, r3, #16
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <MX_GPIO_Init+0xec>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <MX_GPIO_Init+0xec>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a2c      	ldr	r2, [pc, #176]	; (8000e10 <MX_GPIO_Init+0xec>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <MX_GPIO_Init+0xec>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <MX_GPIO_Init+0xec>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <MX_GPIO_Init+0xec>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <MX_GPIO_Init+0xec>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2108      	movs	r1, #8
 8000d92:	4820      	ldr	r0, [pc, #128]	; (8000e14 <MX_GPIO_Init+0xf0>)
 8000d94:	f000 fc46 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d9e:	481e      	ldr	r0, [pc, #120]	; (8000e18 <MX_GPIO_Init+0xf4>)
 8000da0:	f000 fc40 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000da4:	2308      	movs	r3, #8
 8000da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	4816      	ldr	r0, [pc, #88]	; (8000e14 <MX_GPIO_Init+0xf0>)
 8000dbc:	f000 fa96 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8000dc0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480f      	ldr	r0, [pc, #60]	; (8000e18 <MX_GPIO_Init+0xf4>)
 8000dda:	f000 fa87 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dde:	2301      	movs	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4619      	mov	r1, r3
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <MX_GPIO_Init+0xf0>)
 8000df4:	f000 fa7a 	bl	80012ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	f000 fa3e 	bl	800127e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e02:	2006      	movs	r0, #6
 8000e04:	f000 fa57 	bl	80012b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40020c00 	.word	0x40020c00

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_SPI_MspInit+0x84>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d12b      	bne.n	8000ef2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_SPI_MspInit+0x88>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ed2:	23e0      	movs	r3, #224	; 0xe0
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_SPI_MspInit+0x8c>)
 8000eee:	f000 f9fd 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40013000 	.word	0x40013000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 f898 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 fb79 	bl	8001658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	; (8000fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f001 fd65 	bl	8002a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fd1d 	bl	8000a00 <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000fd4:	08002b28 	.word	0x08002b28
  ldr r2, =_sbss
 8000fd8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000fdc:	20000108 	.word	0x20000108

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>
	...

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <HAL_Init+0x40>)
 8000fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_Init+0x40>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_Init+0x40>)
 8001006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f92b 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff ff06 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023c00 	.word	0x40023c00

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f943 	bl	80012d2 <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f90b 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000010 	.word	0x20000010
 8001080:	20000018 	.word	0x20000018
 8001084:	20000014 	.word	0x20000014

08001088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000018 	.word	0x20000018
 80010ac:	20000104 	.word	0x20000104

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000104 	.word	0x20000104

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff3e 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff31 	bl	800112c <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e16b      	b.n	80015e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 815a 	bne.w	80015da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d005      	beq.n	800133e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133a:	2b02      	cmp	r3, #2
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d017      	beq.n	80013dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d123      	bne.n	8001430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	69b9      	ldr	r1, [r7, #24]
 800142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80b4 	beq.w	80015da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <HAL_GPIO_Init+0x30c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <HAL_GPIO_Init+0x30c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <HAL_GPIO_Init+0x30c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148e:	4a5b      	ldr	r2, [pc, #364]	; (80015fc <HAL_GPIO_Init+0x310>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_GPIO_Init+0x314>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d02b      	beq.n	8001512 <HAL_GPIO_Init+0x226>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a51      	ldr	r2, [pc, #324]	; (8001604 <HAL_GPIO_Init+0x318>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d025      	beq.n	800150e <HAL_GPIO_Init+0x222>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a50      	ldr	r2, [pc, #320]	; (8001608 <HAL_GPIO_Init+0x31c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01f      	beq.n	800150a <HAL_GPIO_Init+0x21e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4f      	ldr	r2, [pc, #316]	; (800160c <HAL_GPIO_Init+0x320>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d019      	beq.n	8001506 <HAL_GPIO_Init+0x21a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4e      	ldr	r2, [pc, #312]	; (8001610 <HAL_GPIO_Init+0x324>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x216>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4d      	ldr	r2, [pc, #308]	; (8001614 <HAL_GPIO_Init+0x328>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x212>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4c      	ldr	r2, [pc, #304]	; (8001618 <HAL_GPIO_Init+0x32c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x20e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4b      	ldr	r2, [pc, #300]	; (800161c <HAL_GPIO_Init+0x330>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x20a>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e00e      	b.n	8001514 <HAL_GPIO_Init+0x228>
 80014f6:	2308      	movs	r3, #8
 80014f8:	e00c      	b.n	8001514 <HAL_GPIO_Init+0x228>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00a      	b.n	8001514 <HAL_GPIO_Init+0x228>
 80014fe:	2305      	movs	r3, #5
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x228>
 8001502:	2304      	movs	r3, #4
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x228>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x228>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x228>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x228>
 8001512:	2300      	movs	r3, #0
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001524:	4935      	ldr	r1, [pc, #212]	; (80015fc <HAL_GPIO_Init+0x310>)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001556:	4a32      	ldr	r2, [pc, #200]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_GPIO_Init+0x334>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015aa:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_GPIO_Init+0x334>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_GPIO_Init+0x334>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_GPIO_Init+0x334>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3301      	adds	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	f67f ae90 	bls.w	8001308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40013800 	.word	0x40013800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40021000 	.word	0x40021000
 8001614:	40021400 	.word	0x40021400
 8001618:	40021800 	.word	0x40021800
 800161c:	40021c00 	.word	0x40021c00
 8001620:	40013c00 	.word	0x40013c00

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f9b2 	bl	80009e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40013c00 	.word	0x40013c00

08001688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e267      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d075      	beq.n	8001792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a6:	4b88      	ldr	r3, [pc, #544]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d00c      	beq.n	80016cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b2:	4b85      	ldr	r3, [pc, #532]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d112      	bne.n	80016e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016be:	4b82      	ldr	r3, [pc, #520]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ca:	d10b      	bne.n	80016e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	4b7e      	ldr	r3, [pc, #504]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d05b      	beq.n	8001790 <HAL_RCC_OscConfig+0x108>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d157      	bne.n	8001790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e242      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d106      	bne.n	80016fc <HAL_RCC_OscConfig+0x74>
 80016ee:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a75      	ldr	r2, [pc, #468]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e01d      	b.n	8001738 <HAL_RCC_OscConfig+0xb0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x98>
 8001706:	4b70      	ldr	r3, [pc, #448]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6f      	ldr	r2, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 800170c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a6c      	ldr	r2, [pc, #432]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e00b      	b.n	8001738 <HAL_RCC_OscConfig+0xb0>
 8001720:	4b69      	ldr	r3, [pc, #420]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a68      	ldr	r2, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 8001726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a65      	ldr	r2, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 8001732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fcb6 	bl	80010b0 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fcb2 	bl	80010b0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e207      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0xc0>
 8001766:	e014      	b.n	8001792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fca2 	bl	80010b0 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fc9e 	bl	80010b0 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1f3      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001782:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0xe8>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d063      	beq.n	8001866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017aa:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d11c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b6:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d116      	bne.n	80017f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_RCC_OscConfig+0x152>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e1c7      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017da:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4937      	ldr	r1, [pc, #220]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	e03a      	b.n	8001866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f8:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_RCC_OscConfig+0x244>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7ff fc57 	bl	80010b0 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001806:	f7ff fc53 	bl	80010b0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1a8      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4925      	ldr	r1, [pc, #148]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_RCC_OscConfig+0x244>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fc36 	bl	80010b0 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001848:	f7ff fc32 	bl	80010b0 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e187      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d036      	beq.n	80018e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d016      	beq.n	80018a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_RCC_OscConfig+0x248>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001880:	f7ff fc16 	bl	80010b0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001888:	f7ff fc12 	bl	80010b0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e167      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_OscConfig+0x240>)
 800189c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x200>
 80018a6:	e01b      	b.n	80018e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_OscConfig+0x248>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fbff 	bl	80010b0 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b4:	e00e      	b.n	80018d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b6:	f7ff fbfb 	bl	80010b0 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d907      	bls.n	80018d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e150      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
 80018c8:	40023800 	.word	0x40023800
 80018cc:	42470000 	.word	0x42470000
 80018d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d4:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 80018d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1ea      	bne.n	80018b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 8097 	beq.w	8001a1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f2:	4b81      	ldr	r3, [pc, #516]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10f      	bne.n	800191e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	4b7d      	ldr	r3, [pc, #500]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a7c      	ldr	r2, [pc, #496]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b7a      	ldr	r3, [pc, #488]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191a:	2301      	movs	r3, #1
 800191c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191e:	4b77      	ldr	r3, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x474>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d118      	bne.n	800195c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192a:	4b74      	ldr	r3, [pc, #464]	; (8001afc <HAL_RCC_OscConfig+0x474>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a73      	ldr	r2, [pc, #460]	; (8001afc <HAL_RCC_OscConfig+0x474>)
 8001930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001936:	f7ff fbbb 	bl	80010b0 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193e:	f7ff fbb7 	bl	80010b0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e10c      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x474>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x2ea>
 8001964:	4b64      	ldr	r3, [pc, #400]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	4a63      	ldr	r2, [pc, #396]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6713      	str	r3, [r2, #112]	; 0x70
 8001970:	e01c      	b.n	80019ac <HAL_RCC_OscConfig+0x324>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x30c>
 800197a:	4b5f      	ldr	r3, [pc, #380]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197e:	4a5e      	ldr	r2, [pc, #376]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6713      	str	r3, [r2, #112]	; 0x70
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198a:	4a5b      	ldr	r2, [pc, #364]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6713      	str	r3, [r2, #112]	; 0x70
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0x324>
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	6713      	str	r3, [r2, #112]	; 0x70
 80019a0:	4b55      	ldr	r3, [pc, #340]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	4a54      	ldr	r2, [pc, #336]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 80019a6:	f023 0304 	bic.w	r3, r3, #4
 80019aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d015      	beq.n	80019e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b4:	f7ff fb7c 	bl	80010b0 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019bc:	f7ff fb78 	bl	80010b0 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e0cb      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0ee      	beq.n	80019bc <HAL_RCC_OscConfig+0x334>
 80019de:	e014      	b.n	8001a0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7ff fb66 	bl	80010b0 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e8:	f7ff fb62 	bl	80010b0 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e0b5      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fe:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ee      	bne.n	80019e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a10:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4a38      	ldr	r2, [pc, #224]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80a1 	beq.w	8001b68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d05c      	beq.n	8001aec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d141      	bne.n	8001abe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_RCC_OscConfig+0x478>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fb36 	bl	80010b0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff fb32 	bl	80010b0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e087      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	085b      	lsrs	r3, r3, #1
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	041b      	lsls	r3, r3, #16
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	491b      	ldr	r1, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x478>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fb0b 	bl	80010b0 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff fb07 	bl	80010b0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e05c      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x416>
 8001abc:	e054      	b.n	8001b68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_RCC_OscConfig+0x478>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff faf4 	bl	80010b0 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff faf0 	bl	80010b0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e045      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x444>
 8001aea:	e03d      	b.n	8001b68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e038      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000
 8001b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x4ec>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d028      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d121      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d11a      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b34:	4013      	ands	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d111      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0cc      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d90c      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b65      	ldr	r3, [pc, #404]	; (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0b8      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bcc:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a58      	ldr	r2, [pc, #352]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be4:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	494d      	ldr	r1, [pc, #308]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d044      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d119      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e07f      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c36:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06f      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e067      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b37      	ldr	r3, [pc, #220]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4934      	ldr	r1, [pc, #208]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c68:	f7ff fa22 	bl	80010b0 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7ff fa1e 	bl	80010b0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e04f      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 020c 	and.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1eb      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d20c      	bcs.n	8001cc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e032      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4916      	ldr	r1, [pc, #88]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	490e      	ldr	r1, [pc, #56]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cfe:	f000 f821 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	490a      	ldr	r1, [pc, #40]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	5ccb      	ldrb	r3, [r1, r3]
 8001d12:	fa22 f303 	lsr.w	r3, r2, r3
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f982 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023c00 	.word	0x40023c00
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08002b08 	.word	0x08002b08
 8001d3c:	20000010 	.word	0x20000010
 8001d40:	20000014 	.word	0x20000014

08001d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d48:	b090      	sub	sp, #64	; 0x40
 8001d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d50:	2300      	movs	r3, #0
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d54:	2300      	movs	r3, #0
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d00d      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x40>
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	f200 80a1 	bhi.w	8001eb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x34>
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d003      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d76:	e09b      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d78:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d7c:	e09b      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d7e:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x188>)
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d82:	e098      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d84:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8e:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d028      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	099b      	lsrs	r3, r3, #6
 8001da0:	2200      	movs	r2, #0
 8001da2:	623b      	str	r3, [r7, #32]
 8001da4:	627a      	str	r2, [r7, #36]	; 0x24
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dac:	2100      	movs	r1, #0
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x188>)
 8001db0:	fb03 f201 	mul.w	r2, r3, r1
 8001db4:	2300      	movs	r3, #0
 8001db6:	fb00 f303 	mul.w	r3, r0, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a43      	ldr	r2, [pc, #268]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x188>)
 8001dbe:	fba0 1202 	umull	r1, r2, r0, r2
 8001dc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dca:	4413      	add	r3, r2
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	61fa      	str	r2, [r7, #28]
 8001dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dde:	f7fe f9f3 	bl	80001c8 <__aeabi_uldivmod>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4613      	mov	r3, r2
 8001de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dea:	e053      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dec:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	099b      	lsrs	r3, r3, #6
 8001df2:	2200      	movs	r2, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	617a      	str	r2, [r7, #20]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dfe:	f04f 0b00 	mov.w	fp, #0
 8001e02:	4652      	mov	r2, sl
 8001e04:	465b      	mov	r3, fp
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	0159      	lsls	r1, r3, #5
 8001e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e14:	0150      	lsls	r0, r2, #5
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	ebb2 080a 	subs.w	r8, r2, sl
 8001e1e:	eb63 090b 	sbc.w	r9, r3, fp
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e36:	ebb2 0408 	subs.w	r4, r2, r8
 8001e3a:	eb63 0509 	sbc.w	r5, r3, r9
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	00eb      	lsls	r3, r5, #3
 8001e48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e4c:	00e2      	lsls	r2, r4, #3
 8001e4e:	4614      	mov	r4, r2
 8001e50:	461d      	mov	r5, r3
 8001e52:	eb14 030a 	adds.w	r3, r4, sl
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	eb45 030b 	adc.w	r3, r5, fp
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	028b      	lsls	r3, r1, #10
 8001e6e:	4621      	mov	r1, r4
 8001e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e74:	4621      	mov	r1, r4
 8001e76:	028a      	lsls	r2, r1, #10
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	60fa      	str	r2, [r7, #12]
 8001e84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e88:	f7fe f99e 	bl	80001c8 <__aeabi_uldivmod>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4613      	mov	r3, r2
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	0c1b      	lsrs	r3, r3, #16
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eae:	e002      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3740      	adds	r7, #64	; 0x40
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	00f42400 	.word	0x00f42400
 8001ecc:	017d7840 	.word	0x017d7840

08001ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07b      	b.n	8001fda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ef2:	d009      	beq.n	8001f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
 8001efa:	e005      	b.n	8001f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe ffa8 	bl	8000e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	ea42 0103 	orr.w	r1, r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	f003 0104 	and.w	r1, r3, #4
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	f003 0210 	and.w	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	69da      	ldr	r2, [r3, #28]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b088      	sub	sp, #32
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_SPI_Transmit+0x22>
 8002000:	2302      	movs	r3, #2
 8002002:	e12d      	b.n	8002260 <HAL_SPI_Transmit+0x27e>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800200c:	f7ff f850 	bl	80010b0 <HAL_GetTick>
 8002010:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d002      	beq.n	8002028 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002022:	2302      	movs	r3, #2
 8002024:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002026:	e116      	b.n	8002256 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_SPI_Transmit+0x52>
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002038:	e10d      	b.n	8002256 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2203      	movs	r2, #3
 800203e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	88fa      	ldrh	r2, [r7, #6]
 8002052:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	88fa      	ldrh	r2, [r7, #6]
 8002058:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002080:	d10f      	bne.n	80020a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002090:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d007      	beq.n	80020c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c8:	d14f      	bne.n	800216a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_SPI_Transmit+0xf6>
 80020d2:	8afb      	ldrh	r3, [r7, #22]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d142      	bne.n	800215e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	881a      	ldrh	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	1c9a      	adds	r2, r3, #2
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020fc:	e02f      	b.n	800215e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d112      	bne.n	8002132 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	881a      	ldrh	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	1c9a      	adds	r2, r3, #2
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002130:	e015      	b.n	800215e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002132:	f7fe ffbd 	bl	80010b0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d803      	bhi.n	800214a <HAL_SPI_Transmit+0x168>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d102      	bne.n	8002150 <HAL_SPI_Transmit+0x16e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d106      	bne.n	800215e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800215c:	e07b      	b.n	8002256 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ca      	bne.n	80020fe <HAL_SPI_Transmit+0x11c>
 8002168:	e050      	b.n	800220c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_SPI_Transmit+0x196>
 8002172:	8afb      	ldrh	r3, [r7, #22]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d144      	bne.n	8002202 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800219e:	e030      	b.n	8002202 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d113      	bne.n	80021d6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	330c      	adds	r3, #12
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80021d4:	e015      	b.n	8002202 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021d6:	f7fe ff6b 	bl	80010b0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d803      	bhi.n	80021ee <HAL_SPI_Transmit+0x20c>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d102      	bne.n	80021f4 <HAL_SPI_Transmit+0x212>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002200:	e029      	b.n	8002256 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1c9      	bne.n	80021a0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fbdf 	bl	80029d4 <SPI_EndRxTxTransaction>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	77fb      	strb	r3, [r7, #31]
 800224c:	e003      	b.n	8002256 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800225e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d002      	beq.n	800228e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002288:	2302      	movs	r3, #2
 800228a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800228c:	e0fb      	b.n	8002486 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002296:	d112      	bne.n	80022be <HAL_SPI_Receive+0x56>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10e      	bne.n	80022be <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2204      	movs	r2, #4
 80022a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f8ef 	bl	8002498 <HAL_SPI_TransmitReceive>
 80022ba:	4603      	mov	r3, r0
 80022bc:	e0e8      	b.n	8002490 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_SPI_Receive+0x64>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e0e1      	b.n	8002490 <HAL_SPI_Receive+0x228>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022d4:	f7fe feec 	bl	80010b0 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_SPI_Receive+0x7e>
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022ea:	e0cc      	b.n	8002486 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2204      	movs	r2, #4
 80022f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002332:	d10f      	bne.n	8002354 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002342:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b40      	cmp	r3, #64	; 0x40
 8002360:	d007      	beq.n	8002372 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d16a      	bne.n	8002450 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800237a:	e032      	b.n	80023e2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d115      	bne.n	80023b6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f103 020c 	add.w	r2, r3, #12
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	7812      	ldrb	r2, [r2, #0]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023b4:	e015      	b.n	80023e2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b6:	f7fe fe7b 	bl	80010b0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d803      	bhi.n	80023ce <HAL_SPI_Receive+0x166>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d102      	bne.n	80023d4 <HAL_SPI_Receive+0x16c>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d106      	bne.n	80023e2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80023e0:	e051      	b.n	8002486 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1c7      	bne.n	800237c <HAL_SPI_Receive+0x114>
 80023ec:	e035      	b.n	800245a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d113      	bne.n	8002424 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	b292      	uxth	r2, r2
 8002408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	1c9a      	adds	r2, r3, #2
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002422:	e015      	b.n	8002450 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002424:	f7fe fe44 	bl	80010b0 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d803      	bhi.n	800243c <HAL_SPI_Receive+0x1d4>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d102      	bne.n	8002442 <HAL_SPI_Receive+0x1da>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800244e:	e01a      	b.n	8002486 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1c9      	bne.n	80023ee <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	6839      	ldr	r1, [r7, #0]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fa52 	bl	8002908 <SPI_EndRxTransaction>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	75fb      	strb	r3, [r7, #23]
 800247c:	e003      	b.n	8002486 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	; 0x30
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024a6:	2301      	movs	r3, #1
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_SPI_TransmitReceive+0x26>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e198      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x358>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024c6:	f7fe fdf3 	bl	80010b0 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024dc:	887b      	ldrh	r3, [r7, #2]
 80024de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d00f      	beq.n	8002508 <HAL_SPI_TransmitReceive+0x70>
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ee:	d107      	bne.n	8002500 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d103      	bne.n	8002500 <HAL_SPI_TransmitReceive+0x68>
 80024f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d003      	beq.n	8002508 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002500:	2302      	movs	r3, #2
 8002502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002506:	e16d      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_SPI_TransmitReceive+0x82>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_SPI_TransmitReceive+0x82>
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002520:	e160      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b04      	cmp	r3, #4
 800252c:	d003      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2205      	movs	r2, #5
 8002532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	887a      	ldrh	r2, [r7, #2]
 8002546:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	887a      	ldrh	r2, [r7, #2]
 800255e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d007      	beq.n	800258a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002592:	d17c      	bne.n	800268e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0x10a>
 800259c:	8b7b      	ldrh	r3, [r7, #26]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d16a      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	881a      	ldrh	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	1c9a      	adds	r2, r3, #2
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c6:	e057      	b.n	8002678 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d11b      	bne.n	800260e <HAL_SPI_TransmitReceive+0x176>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d016      	beq.n	800260e <HAL_SPI_TransmitReceive+0x176>
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d113      	bne.n	800260e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	881a      	ldrh	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	1c9a      	adds	r2, r3, #2
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d119      	bne.n	8002650 <HAL_SPI_TransmitReceive+0x1b8>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d014      	beq.n	8002650 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	b292      	uxth	r2, r2
 8002632:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800264c:	2301      	movs	r3, #1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002650:	f7fe fd2e 	bl	80010b0 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800265c:	429a      	cmp	r2, r3
 800265e:	d80b      	bhi.n	8002678 <HAL_SPI_TransmitReceive+0x1e0>
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	d007      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002676:	e0b5      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1a2      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x130>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d19d      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x130>
 800268c:	e080      	b.n	8002790 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_SPI_TransmitReceive+0x204>
 8002696:	8b7b      	ldrh	r3, [r7, #26]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d16f      	bne.n	800277c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026c2:	e05b      	b.n	800277c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d11c      	bne.n	800270c <HAL_SPI_TransmitReceive+0x274>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d017      	beq.n	800270c <HAL_SPI_TransmitReceive+0x274>
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d114      	bne.n	800270c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	330c      	adds	r3, #12
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d119      	bne.n	800274e <HAL_SPI_TransmitReceive+0x2b6>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d014      	beq.n	800274e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800274a:	2301      	movs	r3, #1
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800274e:	f7fe fcaf 	bl	80010b0 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800275a:	429a      	cmp	r2, r3
 800275c:	d803      	bhi.n	8002766 <HAL_SPI_TransmitReceive+0x2ce>
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d102      	bne.n	800276c <HAL_SPI_TransmitReceive+0x2d4>
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800277a:	e033      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d19e      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x22c>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d199      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f91d 	bl	80029d4 <SPI_EndRxTxTransaction>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027ac:	e01a      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027da:	e003      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3730      	adds	r7, #48	; 0x30
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002808:	f7fe fc52 	bl	80010b0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	4413      	add	r3, r2
 8002816:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002818:	f7fe fc4a 	bl	80010b0 <HAL_GetTick>
 800281c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800281e:	4b39      	ldr	r3, [pc, #228]	; (8002904 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	015b      	lsls	r3, r3, #5
 8002824:	0d1b      	lsrs	r3, r3, #20
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800282e:	e054      	b.n	80028da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d050      	beq.n	80028da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002838:	f7fe fc3a 	bl	80010b0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	429a      	cmp	r2, r3
 8002846:	d902      	bls.n	800284e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d13d      	bne.n	80028ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800285c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002866:	d111      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002870:	d004      	beq.n	800287c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287a:	d107      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002894:	d10f      	bne.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e017      	b.n	80028fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4013      	ands	r3, r2
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d19b      	bne.n	8002830 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000010 	.word	0x20000010

08002908 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291c:	d111      	bne.n	8002942 <SPI_EndRxTransaction+0x3a>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002926:	d004      	beq.n	8002932 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002930:	d107      	bne.n	8002942 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294a:	d12a      	bne.n	80029a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002954:	d012      	beq.n	800297c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2200      	movs	r2, #0
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff ff49 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d02d      	beq.n	80029c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e026      	b.n	80029ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	2101      	movs	r1, #1
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff ff36 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01a      	beq.n	80029c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e013      	b.n	80029ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2101      	movs	r1, #1
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff ff23 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e000      	b.n	80029ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2201      	movs	r2, #1
 80029e8:	2102      	movs	r1, #2
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff04 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	f043 0220 	orr.w	r2, r3, #32
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e032      	b.n	8002a6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a06:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <SPI_EndRxTxTransaction+0xa0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <SPI_EndRxTxTransaction+0xa4>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	0d5b      	lsrs	r3, r3, #21
 8002a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a24:	d112      	bne.n	8002a4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff fee1 	bl	80027f8 <SPI_WaitFlagStateUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d016      	beq.n	8002a6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e00f      	b.n	8002a6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b80      	cmp	r3, #128	; 0x80
 8002a64:	d0f2      	beq.n	8002a4c <SPI_EndRxTxTransaction+0x78>
 8002a66:	e000      	b.n	8002a6a <SPI_EndRxTxTransaction+0x96>
        break;
 8002a68:	bf00      	nop
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000010 	.word	0x20000010
 8002a78:	165e9f81 	.word	0x165e9f81

08002a7c <memset>:
 8002a7c:	4402      	add	r2, r0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d100      	bne.n	8002a86 <memset+0xa>
 8002a84:	4770      	bx	lr
 8002a86:	f803 1b01 	strb.w	r1, [r3], #1
 8002a8a:	e7f9      	b.n	8002a80 <memset+0x4>

08002a8c <__libc_init_array>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	4d0d      	ldr	r5, [pc, #52]	; (8002ac4 <__libc_init_array+0x38>)
 8002a90:	4c0d      	ldr	r4, [pc, #52]	; (8002ac8 <__libc_init_array+0x3c>)
 8002a92:	1b64      	subs	r4, r4, r5
 8002a94:	10a4      	asrs	r4, r4, #2
 8002a96:	2600      	movs	r6, #0
 8002a98:	42a6      	cmp	r6, r4
 8002a9a:	d109      	bne.n	8002ab0 <__libc_init_array+0x24>
 8002a9c:	4d0b      	ldr	r5, [pc, #44]	; (8002acc <__libc_init_array+0x40>)
 8002a9e:	4c0c      	ldr	r4, [pc, #48]	; (8002ad0 <__libc_init_array+0x44>)
 8002aa0:	f000 f826 	bl	8002af0 <_init>
 8002aa4:	1b64      	subs	r4, r4, r5
 8002aa6:	10a4      	asrs	r4, r4, #2
 8002aa8:	2600      	movs	r6, #0
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d105      	bne.n	8002aba <__libc_init_array+0x2e>
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab4:	4798      	blx	r3
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	e7ee      	b.n	8002a98 <__libc_init_array+0xc>
 8002aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abe:	4798      	blx	r3
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	e7f2      	b.n	8002aaa <__libc_init_array+0x1e>
 8002ac4:	08002b20 	.word	0x08002b20
 8002ac8:	08002b20 	.word	0x08002b20
 8002acc:	08002b20 	.word	0x08002b20
 8002ad0:	08002b24 	.word	0x08002b24

08002ad4 <memcpy>:
 8002ad4:	440a      	add	r2, r1
 8002ad6:	4291      	cmp	r1, r2
 8002ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002adc:	d100      	bne.n	8002ae0 <memcpy+0xc>
 8002ade:	4770      	bx	lr
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002aea:	4291      	cmp	r1, r2
 8002aec:	d1f9      	bne.n	8002ae2 <memcpy+0xe>
 8002aee:	bd10      	pop	{r4, pc}

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr
