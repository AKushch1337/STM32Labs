
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800a030  0800a030  0001a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a150  0800a150  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a150  0800a150  0001a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a158  0800a158  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a158  0800a158  0001a158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a15c  0800a15c  0001a15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000b44  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bc4  20000bc4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015c06  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfd  00000000  00000000  00035cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011f8  00000000  00000000  000398f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000db0  00000000  00000000  0003aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000235c8  00000000  00000000  0003b8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001934e  00000000  00000000  0005ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbaf2  00000000  00000000  000781b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004df4  00000000  00000000  00143ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00148a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a018 	.word	0x0800a018

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800a018 	.word	0x0800a018

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CS43L22_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CS43L22_Init(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af02      	add	r7, sp, #8

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2110      	movs	r1, #16
 80004ce:	4863      	ldr	r0, [pc, #396]	; (800065c <CS43L22_Init+0x198>)
 80004d0:	f001 fd56 	bl	8001f80 <HAL_GPIO_WritePin>

	  uint8_t TxBuffer[2];

	  TxBuffer[0] = 0x0D;
 80004d4:	230d      	movs	r3, #13
 80004d6:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x01;
 80004d8:	2301      	movs	r3, #1
 80004da:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80004dc:	1d3a      	adds	r2, r7, #4
 80004de:	230a      	movs	r3, #10
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2302      	movs	r3, #2
 80004e4:	2194      	movs	r1, #148	; 0x94
 80004e6:	485e      	ldr	r0, [pc, #376]	; (8000660 <CS43L22_Init+0x19c>)
 80004e8:	f003 ffe6 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x00;
 80004ec:	2300      	movs	r3, #0
 80004ee:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x99;
 80004f0:	2399      	movs	r3, #153	; 0x99
 80004f2:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	230a      	movs	r3, #10
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2302      	movs	r3, #2
 80004fc:	2194      	movs	r1, #148	; 0x94
 80004fe:	4858      	ldr	r0, [pc, #352]	; (8000660 <CS43L22_Init+0x19c>)
 8000500:	f003 ffda 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x47;
 8000504:	2347      	movs	r3, #71	; 0x47
 8000506:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x80;
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800050c:	1d3a      	adds	r2, r7, #4
 800050e:	230a      	movs	r3, #10
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2302      	movs	r3, #2
 8000514:	2194      	movs	r1, #148	; 0x94
 8000516:	4852      	ldr	r0, [pc, #328]	; (8000660 <CS43L22_Init+0x19c>)
 8000518:	f003 ffce 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x32;
 800051c:	2332      	movs	r3, #50	; 0x32
 800051e:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0xFF;
 8000520:	23ff      	movs	r3, #255	; 0xff
 8000522:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	230a      	movs	r3, #10
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2302      	movs	r3, #2
 800052c:	2194      	movs	r1, #148	; 0x94
 800052e:	484c      	ldr	r0, [pc, #304]	; (8000660 <CS43L22_Init+0x19c>)
 8000530:	f003 ffc2 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x32;
 8000534:	2332      	movs	r3, #50	; 0x32
 8000536:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x7F;
 8000538:	237f      	movs	r3, #127	; 0x7f
 800053a:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800053c:	1d3a      	adds	r2, r7, #4
 800053e:	230a      	movs	r3, #10
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2194      	movs	r1, #148	; 0x94
 8000546:	4846      	ldr	r0, [pc, #280]	; (8000660 <CS43L22_Init+0x19c>)
 8000548:	f003 ffb6 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000554:	1d3a      	adds	r2, r7, #4
 8000556:	230a      	movs	r3, #10
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2302      	movs	r3, #2
 800055c:	2194      	movs	r1, #148	; 0x94
 800055e:	4840      	ldr	r0, [pc, #256]	; (8000660 <CS43L22_Init+0x19c>)
 8000560:	f003 ffaa 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x04;
 8000564:	2304      	movs	r3, #4
 8000566:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0xAF;
 8000568:	23af      	movs	r3, #175	; 0xaf
 800056a:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800056c:	1d3a      	adds	r2, r7, #4
 800056e:	230a      	movs	r3, #10
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2302      	movs	r3, #2
 8000574:	2194      	movs	r1, #148	; 0x94
 8000576:	483a      	ldr	r0, [pc, #232]	; (8000660 <CS43L22_Init+0x19c>)
 8000578:	f003 ff9e 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  //
	  TxBuffer[0] = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x70;
 8000580:	2370      	movs	r3, #112	; 0x70
 8000582:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000584:	1d3a      	adds	r2, r7, #4
 8000586:	230a      	movs	r3, #10
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2302      	movs	r3, #2
 800058c:	2194      	movs	r1, #148	; 0x94
 800058e:	4834      	ldr	r0, [pc, #208]	; (8000660 <CS43L22_Init+0x19c>)
 8000590:	f003 ff92 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x05;
 8000594:	2305      	movs	r3, #5
 8000596:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x81;
 8000598:	2381      	movs	r3, #129	; 0x81
 800059a:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800059c:	1d3a      	adds	r2, r7, #4
 800059e:	230a      	movs	r3, #10
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2302      	movs	r3, #2
 80005a4:	2194      	movs	r1, #148	; 0x94
 80005a6:	482e      	ldr	r0, [pc, #184]	; (8000660 <CS43L22_Init+0x19c>)
 80005a8:	f003 ff86 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x06;
 80005ac:	2306      	movs	r3, #6
 80005ae:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x07;
 80005b0:	2307      	movs	r3, #7
 80005b2:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	230a      	movs	r3, #10
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2302      	movs	r3, #2
 80005bc:	2194      	movs	r1, #148	; 0x94
 80005be:	4828      	ldr	r0, [pc, #160]	; (8000660 <CS43L22_Init+0x19c>)
 80005c0:	f003 ff7a 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x0A;
 80005c4:	230a      	movs	r3, #10
 80005c6:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x00;
 80005c8:	2300      	movs	r3, #0
 80005ca:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005cc:	1d3a      	adds	r2, r7, #4
 80005ce:	230a      	movs	r3, #10
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2302      	movs	r3, #2
 80005d4:	2194      	movs	r1, #148	; 0x94
 80005d6:	4822      	ldr	r0, [pc, #136]	; (8000660 <CS43L22_Init+0x19c>)
 80005d8:	f003 ff6e 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x27;
 80005dc:	2327      	movs	r3, #39	; 0x27
 80005de:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005e4:	1d3a      	adds	r2, r7, #4
 80005e6:	230a      	movs	r3, #10
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	2194      	movs	r1, #148	; 0x94
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <CS43L22_Init+0x19c>)
 80005f0:	f003 ff62 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x1A;
 80005f4:	231a      	movs	r3, #26
 80005f6:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x0A;
 80005f8:	230a      	movs	r3, #10
 80005fa:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	230a      	movs	r3, #10
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2302      	movs	r3, #2
 8000604:	2194      	movs	r1, #148	; 0x94
 8000606:	4816      	ldr	r0, [pc, #88]	; (8000660 <CS43L22_Init+0x19c>)
 8000608:	f003 ff56 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x1B;
 800060c:	231b      	movs	r3, #27
 800060e:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x0A;
 8000610:	230a      	movs	r3, #10
 8000612:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	230a      	movs	r3, #10
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2302      	movs	r3, #2
 800061c:	2194      	movs	r1, #148	; 0x94
 800061e:	4810      	ldr	r0, [pc, #64]	; (8000660 <CS43L22_Init+0x19c>)
 8000620:	f003 ff4a 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x1F;
 8000624:	231f      	movs	r3, #31
 8000626:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x0F;
 8000628:	230f      	movs	r3, #15
 800062a:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800062c:	1d3a      	adds	r2, r7, #4
 800062e:	230a      	movs	r3, #10
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	2194      	movs	r1, #148	; 0x94
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <CS43L22_Init+0x19c>)
 8000638:	f003 ff3e 	bl	80044b8 <HAL_I2C_Master_Transmit>

	  TxBuffer[0] = 0x02;
 800063c:	2302      	movs	r3, #2
 800063e:	713b      	strb	r3, [r7, #4]
	  TxBuffer[1] = 0x9E;
 8000640:	239e      	movs	r3, #158	; 0x9e
 8000642:	717b      	strb	r3, [r7, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000644:	1d3a      	adds	r2, r7, #4
 8000646:	230a      	movs	r3, #10
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2302      	movs	r3, #2
 800064c:	2194      	movs	r1, #148	; 0x94
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <CS43L22_Init+0x19c>)
 8000650:	f003 ff32 	bl	80044b8 <HAL_I2C_Master_Transmit>

}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020c00 	.word	0x40020c00
 8000660:	2000009c 	.word	0x2000009c

08000664 <CS43L22_Beep>:

void CS43L22_Beep(Notes note, uint32_t duration_ms) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuffer[2];

	TxBuffer[0] = 0x1D;
 8000670:	231d      	movs	r3, #29
 8000672:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;
 8000674:	2300      	movs	r3, #0
 8000676:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000678:	f107 020c 	add.w	r2, r7, #12
 800067c:	230a      	movs	r3, #10
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2302      	movs	r3, #2
 8000682:	2194      	movs	r1, #148	; 0x94
 8000684:	4859      	ldr	r0, [pc, #356]	; (80007ec <CS43L22_Beep+0x188>)
 8000686:	f003 ff17 	bl	80044b8 <HAL_I2C_Master_Transmit>


	TxBuffer[0] = 0x1C;
 800068a:	231c      	movs	r3, #28
 800068c:	733b      	strb	r3, [r7, #12]
	switch(note) {
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	3b0c      	subs	r3, #12
 8000692:	2b24      	cmp	r3, #36	; 0x24
 8000694:	d87c      	bhi.n	8000790 <CS43L22_Beep+0x12c>
 8000696:	a201      	add	r2, pc, #4	; (adr r2, 800069c <CS43L22_Beep+0x38>)
 8000698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069c:	08000731 	.word	0x08000731
 80006a0:	08000791 	.word	0x08000791
 80006a4:	08000791 	.word	0x08000791
 80006a8:	08000791 	.word	0x08000791
 80006ac:	08000791 	.word	0x08000791
 80006b0:	08000791 	.word	0x08000791
 80006b4:	08000791 	.word	0x08000791
 80006b8:	08000791 	.word	0x08000791
 80006bc:	08000791 	.word	0x08000791
 80006c0:	08000791 	.word	0x08000791
 80006c4:	08000791 	.word	0x08000791
 80006c8:	08000791 	.word	0x08000791
 80006cc:	08000737 	.word	0x08000737
 80006d0:	08000791 	.word	0x08000791
 80006d4:	0800073d 	.word	0x0800073d
 80006d8:	08000791 	.word	0x08000791
 80006dc:	08000743 	.word	0x08000743
 80006e0:	08000749 	.word	0x08000749
 80006e4:	08000791 	.word	0x08000791
 80006e8:	0800074f 	.word	0x0800074f
 80006ec:	08000791 	.word	0x08000791
 80006f0:	08000755 	.word	0x08000755
 80006f4:	08000791 	.word	0x08000791
 80006f8:	0800075b 	.word	0x0800075b
 80006fc:	08000761 	.word	0x08000761
 8000700:	08000791 	.word	0x08000791
 8000704:	08000767 	.word	0x08000767
 8000708:	08000791 	.word	0x08000791
 800070c:	0800076d 	.word	0x0800076d
 8000710:	08000773 	.word	0x08000773
 8000714:	08000791 	.word	0x08000791
 8000718:	08000779 	.word	0x08000779
 800071c:	08000791 	.word	0x08000791
 8000720:	0800077f 	.word	0x0800077f
 8000724:	08000791 	.word	0x08000791
 8000728:	08000785 	.word	0x08000785
 800072c:	0800078b 	.word	0x0800078b
		case C4:
			TxBuffer[1] = 0x00;
 8000730:	2300      	movs	r3, #0
 8000732:	737b      	strb	r3, [r7, #13]
			break;
 8000734:	e02f      	b.n	8000796 <CS43L22_Beep+0x132>
		case C5:
			TxBuffer[1] = 0x10;
 8000736:	2310      	movs	r3, #16
 8000738:	737b      	strb	r3, [r7, #13]
			break;
 800073a:	e02c      	b.n	8000796 <CS43L22_Beep+0x132>
		case D5:
			TxBuffer[1] = 0x20;
 800073c:	2320      	movs	r3, #32
 800073e:	737b      	strb	r3, [r7, #13]
			break;
 8000740:	e029      	b.n	8000796 <CS43L22_Beep+0x132>
		case E5:
			TxBuffer[1] = 0x30;
 8000742:	2330      	movs	r3, #48	; 0x30
 8000744:	737b      	strb	r3, [r7, #13]
			break;
 8000746:	e026      	b.n	8000796 <CS43L22_Beep+0x132>
		case F5:
			TxBuffer[1] = 0x40;
 8000748:	2340      	movs	r3, #64	; 0x40
 800074a:	737b      	strb	r3, [r7, #13]
			break;
 800074c:	e023      	b.n	8000796 <CS43L22_Beep+0x132>
		case G5:
			TxBuffer[1] = 0x50;
 800074e:	2350      	movs	r3, #80	; 0x50
 8000750:	737b      	strb	r3, [r7, #13]
			break;
 8000752:	e020      	b.n	8000796 <CS43L22_Beep+0x132>
		case A5:
			TxBuffer[1] = 0x60;
 8000754:	2360      	movs	r3, #96	; 0x60
 8000756:	737b      	strb	r3, [r7, #13]
			break;
 8000758:	e01d      	b.n	8000796 <CS43L22_Beep+0x132>
		case B5:
			TxBuffer[1] = 0x70;
 800075a:	2370      	movs	r3, #112	; 0x70
 800075c:	737b      	strb	r3, [r7, #13]
			break;
 800075e:	e01a      	b.n	8000796 <CS43L22_Beep+0x132>
		case C6:
			TxBuffer[1] = 0x80;
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	737b      	strb	r3, [r7, #13]
			break;
 8000764:	e017      	b.n	8000796 <CS43L22_Beep+0x132>
		case D6:
			TxBuffer[1] = 0x90;
 8000766:	2390      	movs	r3, #144	; 0x90
 8000768:	737b      	strb	r3, [r7, #13]
			break;
 800076a:	e014      	b.n	8000796 <CS43L22_Beep+0x132>
		case E6:
			TxBuffer[1] = 0xA0;
 800076c:	23a0      	movs	r3, #160	; 0xa0
 800076e:	737b      	strb	r3, [r7, #13]
			break;
 8000770:	e011      	b.n	8000796 <CS43L22_Beep+0x132>
		case F6:
			TxBuffer[1] = 0xB0;
 8000772:	23b0      	movs	r3, #176	; 0xb0
 8000774:	737b      	strb	r3, [r7, #13]
			break;
 8000776:	e00e      	b.n	8000796 <CS43L22_Beep+0x132>
		case G6:
			TxBuffer[1] = 0xC0;
 8000778:	23c0      	movs	r3, #192	; 0xc0
 800077a:	737b      	strb	r3, [r7, #13]
			break;
 800077c:	e00b      	b.n	8000796 <CS43L22_Beep+0x132>
		case A6:
			TxBuffer[1] = 0xD0;
 800077e:	23d0      	movs	r3, #208	; 0xd0
 8000780:	737b      	strb	r3, [r7, #13]
			break;
 8000782:	e008      	b.n	8000796 <CS43L22_Beep+0x132>
		case B6:
			TxBuffer[1] = 0xE0;
 8000784:	23e0      	movs	r3, #224	; 0xe0
 8000786:	737b      	strb	r3, [r7, #13]
			break;
 8000788:	e005      	b.n	8000796 <CS43L22_Beep+0x132>
		case C7:
			TxBuffer[1] = 0xF0;
 800078a:	23f0      	movs	r3, #240	; 0xf0
 800078c:	737b      	strb	r3, [r7, #13]
			break;
 800078e:	e002      	b.n	8000796 <CS43L22_Beep+0x132>
		default:
			TxBuffer[1] = 0x00;
 8000790:	2300      	movs	r3, #0
 8000792:	737b      	strb	r3, [r7, #13]
			break;
 8000794:	bf00      	nop
	}
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000796:	f107 020c 	add.w	r2, r7, #12
 800079a:	230a      	movs	r3, #10
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2302      	movs	r3, #2
 80007a0:	2194      	movs	r1, #148	; 0x94
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <CS43L22_Beep+0x188>)
 80007a4:	f003 fe88 	bl	80044b8 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1E;
 80007a8:	231e      	movs	r3, #30
 80007aa:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0xC0;
 80007ac:	23c0      	movs	r3, #192	; 0xc0
 80007ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80007b0:	f107 020c 	add.w	r2, r7, #12
 80007b4:	230a      	movs	r3, #10
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2302      	movs	r3, #2
 80007ba:	2194      	movs	r1, #148	; 0x94
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <CS43L22_Beep+0x188>)
 80007be:	f003 fe7b 	bl	80044b8 <HAL_I2C_Master_Transmit>

	HAL_Delay(duration_ms);
 80007c2:	6838      	ldr	r0, [r7, #0]
 80007c4:	f000 fd9a 	bl	80012fc <HAL_Delay>

	TxBuffer[0] = 0x1E;
 80007c8:	231e      	movs	r3, #30
 80007ca:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80007d0:	f107 020c 	add.w	r2, r7, #12
 80007d4:	230a      	movs	r3, #10
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2302      	movs	r3, #2
 80007da:	2194      	movs	r1, #148	; 0x94
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <CS43L22_Beep+0x188>)
 80007de:	f003 fe6b 	bl	80044b8 <HAL_I2C_Master_Transmit>
}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000009c 	.word	0x2000009c

080007f0 <allNotes.1>:
  MX_USB_HOST_Init();
  /* USER CODE BEGIN 2 */
  CS43L22_Init();
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 100);

    void allNotes(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	f8c7 c004 	str.w	ip, [r7, #4]
  	  Notes note;

  	  for (note = C4; note <= C7; note++) {
 80007fa:	230c      	movs	r3, #12
 80007fc:	73fb      	strb	r3, [r7, #15]
 80007fe:	e00a      	b.n	8000816 <allNotes.1+0x26>
  		  CS43L22_Beep(note, 200);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	21c8      	movs	r1, #200	; 0xc8
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff2d 	bl	8000664 <CS43L22_Beep>
  		  HAL_Delay(200);
 800080a:	20c8      	movs	r0, #200	; 0xc8
 800080c:	f000 fd76 	bl	80012fc <HAL_Delay>
  	  for (note = C4; note <= C7; note++) {
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	3301      	adds	r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	2b30      	cmp	r3, #48	; 0x30
 800081a:	d9f1      	bls.n	8000800 <allNotes.1+0x10>
  	  }
    }
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <main>:
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
int main(void)
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000834:	f000 fcf0 	bl	8001218 <HAL_Init>
  SystemClock_Config();
 8000838:	f000 f876 	bl	8000928 <SystemClock_Config>
  MX_GPIO_Init();
 800083c:	f000 f990 	bl	8000b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000840:	f000 f96e 	bl	8000b20 <MX_DMA_Init>
  MX_I2C1_Init();
 8000844:	f000 f8da 	bl	80009fc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000848:	f000 f906 	bl	8000a58 <MX_I2S3_Init>
  MX_SPI1_Init();
 800084c:	f000 f932 	bl	8000ab4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000850:	f008 ff7e 	bl	8009750 <MX_USB_HOST_Init>
  CS43L22_Init();
 8000854:	f7ff fe36 	bl	80004c4 <CS43L22_Init>
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 100);
 8000858:	2264      	movs	r2, #100	; 0x64
 800085a:	490a      	ldr	r1, [pc, #40]	; (8000884 <main+0x5c>)
 800085c:	480a      	ldr	r0, [pc, #40]	; (8000888 <main+0x60>)
 800085e:	f004 fac5 	bl	8004dec <HAL_I2S_Transmit_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000862:	f008 ff9b 	bl	800979c <MX_USB_HOST_Process>
    if (isMyMelody == 1) {
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <main+0x64>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d104      	bne.n	8000878 <main+0x50>
    	metalCrusherMelody();
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	469c      	mov	ip, r3
 8000872:	f000 f80d 	bl	8000890 <metalCrusherMelody.0>
 8000876:	e7f4      	b.n	8000862 <main+0x3a>
    	  } else {
    		  allNotes();
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	469c      	mov	ip, r3
 800087c:	f7ff ffb8 	bl	80007f0 <allNotes.1>
    MX_USB_HOST_Process();
 8000880:	e7ef      	b.n	8000862 <main+0x3a>
 8000882:	bf00      	nop
 8000884:	200001f0 	.word	0x200001f0
 8000888:	200000f0 	.word	0x200000f0
 800088c:	20000000 	.word	0x20000000

08000890 <metalCrusherMelody.0>:
    void metalCrusherMelody() {
 8000890:	b5b0      	push	{r4, r5, r7, lr}
 8000892:	b0c2      	sub	sp, #264	; 0x108
 8000894:	af00      	add	r7, sp, #0
 8000896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800089a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800089e:	f8c3 c000 	str.w	ip, [r3]
        Notes melody[] = {D6, F6, G6, A6, F6, E6, C6, E6, G6, A6, G6, F6,
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <metalCrusherMelody.0+0x90>)
 80008a4:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80008a8:	461d      	mov	r5, r3
 80008aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	682b      	ldr	r3, [r5, #0]
 80008b8:	7023      	strb	r3, [r4, #0]
        int durations[] = {300, 150, 150, 300, 150, 150, 150, 150, 150, 300, 150, 150,
 80008ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80008be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <metalCrusherMelody.0+0x94>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	4611      	mov	r1, r2
 80008c8:	23c8      	movs	r3, #200	; 0xc8
 80008ca:	461a      	mov	r2, r3
 80008cc:	f009 fb4a 	bl	8009f64 <memcpy>
        for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80008d6:	e018      	b.n	800090a <metalCrusherMelody.0+0x7a>
            CS43L22_Beep(melody[i], durations[i]);
 80008d8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80008dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008e0:	4413      	add	r3, r2
 80008e2:	7818      	ldrb	r0, [r3, #0]
 80008e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80008e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008ec:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80008f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f7ff feb5 	bl	8000664 <CS43L22_Beep>
            HAL_Delay(20);  // Add a short pause between notes
 80008fa:	2014      	movs	r0, #20
 80008fc:	f000 fcfe 	bl	80012fc <HAL_Delay>
        for (int i = 0; i < sizeof(melody) / sizeof(melody[0]); i++) {
 8000900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000904:	3301      	adds	r3, #1
 8000906:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800090a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800090e:	2b30      	cmp	r3, #48	; 0x30
 8000910:	d9e2      	bls.n	80008d8 <metalCrusherMelody.0+0x48>
    }
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800091a:	46bd      	mov	sp, r7
 800091c:	bdb0      	pop	{r4, r5, r7, pc}
 800091e:	bf00      	nop
 8000920:	0800a030 	.word	0x0800a030
 8000924:	0800a064 	.word	0x0800a064

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f009 fad0 	bl	8009edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a27      	ldr	r2, [pc, #156]	; (80009f4 <SystemClock_Config+0xcc>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <SystemClock_Config+0xd0>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000998:	2308      	movs	r3, #8
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800099c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a6:	2307      	movs	r3, #7
 80009a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 fe82 	bl	80056b8 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ba:	f000 f9cf 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2105      	movs	r1, #5
 80009dc:	4618      	mov	r0, r3
 80009de:	f005 f8e3 	bl	8005ba8 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009e8:	f000 f9b8 	bl	8000d5c <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	; 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <MX_I2C1_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x58>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a3a:	f003 fbf9 	bl	8004230 <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 f98a 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000009c 	.word	0x2000009c
 8000a50:	40005400 	.word	0x40005400
 8000a54:	000186a0 	.word	0x000186a0

08000a58 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <MX_I2S3_Init+0x58>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a80:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000a84:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a9a:	f004 f867 	bl	8004b6c <HAL_I2S_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000aa4:	f000 f95a 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000f0 	.word	0x200000f0
 8000ab0:	40003c00 	.word	0x40003c00

08000ab4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000b00:	220a      	movs	r2, #10
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000b06:	f005 fb9d 	bl	8006244 <HAL_SPI_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b10:	f000 f924 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000198 	.word	0x20000198
 8000b1c:	40013000 	.word	0x40013000

08000b20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_DMA_Init+0x3c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <MX_DMA_Init+0x3c>)
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_DMA_Init+0x3c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2010      	movs	r0, #16
 8000b48:	f000 fcd7 	bl	80014fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b4c:	2010      	movs	r0, #16
 8000b4e:	f000 fcf0 	bl	8001532 <HAL_NVIC_EnableIRQ>

}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	4b72      	ldr	r3, [pc, #456]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a71      	ldr	r2, [pc, #452]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b6f      	ldr	r3, [pc, #444]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	4b6b      	ldr	r3, [pc, #428]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a6a      	ldr	r2, [pc, #424]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b68      	ldr	r3, [pc, #416]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a63      	ldr	r2, [pc, #396]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b61      	ldr	r3, [pc, #388]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b5d      	ldr	r3, [pc, #372]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a5c      	ldr	r2, [pc, #368]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b5a      	ldr	r3, [pc, #360]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a55      	ldr	r2, [pc, #340]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a4e      	ldr	r2, [pc, #312]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b4c      	ldr	r3, [pc, #304]	; (8000d44 <MX_GPIO_Init+0x1e4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2108      	movs	r1, #8
 8000c22:	4849      	ldr	r0, [pc, #292]	; (8000d48 <MX_GPIO_Init+0x1e8>)
 8000c24:	f001 f9ac 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4847      	ldr	r0, [pc, #284]	; (8000d4c <MX_GPIO_Init+0x1ec>)
 8000c2e:	f001 f9a7 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c32:	2200      	movs	r2, #0
 8000c34:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c38:	4845      	ldr	r0, [pc, #276]	; (8000d50 <MX_GPIO_Init+0x1f0>)
 8000c3a:	f001 f9a1 	bl	8001f80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	483c      	ldr	r0, [pc, #240]	; (8000d48 <MX_GPIO_Init+0x1e8>)
 8000c56:	f000 fff7 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4836      	ldr	r0, [pc, #216]	; (8000d4c <MX_GPIO_Init+0x1ec>)
 8000c72:	f000 ffe9 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c76:	2308      	movs	r3, #8
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c86:	2305      	movs	r3, #5
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	482e      	ldr	r0, [pc, #184]	; (8000d4c <MX_GPIO_Init+0x1ec>)
 8000c92:	f000 ffd9 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c9a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	482a      	ldr	r0, [pc, #168]	; (8000d54 <MX_GPIO_Init+0x1f4>)
 8000cac:	f000 ffcc 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4825      	ldr	r0, [pc, #148]	; (8000d58 <MX_GPIO_Init+0x1f8>)
 8000cc4:	f000 ffc0 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481c      	ldr	r0, [pc, #112]	; (8000d58 <MX_GPIO_Init+0x1f8>)
 8000ce6:	f000 ffaf 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD4 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cea:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4813      	ldr	r0, [pc, #76]	; (8000d50 <MX_GPIO_Init+0x1f0>)
 8000d04:	f000 ffa0 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d08:	2320      	movs	r3, #32
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_GPIO_Init+0x1f0>)
 8000d1c:	f000 ff94 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d24:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_GPIO_Init+0x1e8>)
 8000d36:	f000 ff87 	bl	8001c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	; 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020400 	.word	0x40020400

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000da6:	2007      	movs	r0, #7
 8000da8:	f000 fb9c 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <HAL_I2C_MspInit+0xa4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d13c      	bne.n	8000e54 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_I2C_MspInit+0xa8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <HAL_I2C_MspInit+0xa8>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_I2C_MspInit+0xa8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin;
 8000df6:	2340      	movs	r3, #64	; 0x40
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e06:	2304      	movs	r3, #4
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4814      	ldr	r0, [pc, #80]	; (8000e64 <HAL_I2C_MspInit+0xac>)
 8000e12:	f000 ff19 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <HAL_I2C_MspInit+0xac>)
 8000e34:	f000 ff08 	bl	8001c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_I2C_MspInit+0xa8>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_I2C_MspInit+0xa8>)
 8000e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_I2C_MspInit+0xa8>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_I2S_MspInit+0x164>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	f040 8094 	bne.w	8000fc2 <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e9e:	23c0      	movs	r3, #192	; 0xc0
 8000ea0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f005 f888 	bl	8005fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000eb6:	f7ff ff51 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b44      	ldr	r3, [pc, #272]	; (8000fd0 <HAL_I2S_MspInit+0x168>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a43      	ldr	r2, [pc, #268]	; (8000fd0 <HAL_I2S_MspInit+0x168>)
 8000ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <HAL_I2S_MspInit+0x168>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <HAL_I2S_MspInit+0x168>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a3c      	ldr	r2, [pc, #240]	; (8000fd0 <HAL_I2S_MspInit+0x168>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b3a      	ldr	r3, [pc, #232]	; (8000fd0 <HAL_I2S_MspInit+0x168>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <HAL_I2S_MspInit+0x168>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a35      	ldr	r2, [pc, #212]	; (8000fd0 <HAL_I2S_MspInit+0x168>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <HAL_I2S_MspInit+0x168>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f0e:	2310      	movs	r3, #16
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	482a      	ldr	r0, [pc, #168]	; (8000fd4 <HAL_I2S_MspInit+0x16c>)
 8000f2a:	f000 fe8d 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f2e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f40:	2306      	movs	r3, #6
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4823      	ldr	r0, [pc, #140]	; (8000fd8 <HAL_I2S_MspInit+0x170>)
 8000f4c:	f000 fe7c 	bl	8001c48 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f52:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <HAL_I2S_MspInit+0x178>)
 8000f54:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f5e:	2240      	movs	r2, #64	; 0x40
 8000f60:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f76:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f86:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000fa8:	f000 fade 	bl	8001568 <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8000fb2:	f7ff fed3 	bl	8000d5c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_I2S_MspInit+0x174>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3738      	adds	r7, #56	; 0x38
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40003c00 	.word	0x40003c00
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	20000138 	.word	0x20000138
 8000fe0:	40026088 	.word	0x40026088

08000fe4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_SPI_MspInit+0x84>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12b      	bne.n	800105e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_SPI_MspInit+0x88>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_SPI_MspInit+0x88>)
 8001010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_SPI_MspInit+0x88>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_SPI_MspInit+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_SPI_MspInit+0x88>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_SPI_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800103e:	23e0      	movs	r3, #224	; 0xe0
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104e:	2305      	movs	r3, #5
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_SPI_MspInit+0x8c>)
 800105a:	f000 fdf5 	bl	8001c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40013000 	.word	0x40013000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 f8fc 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <EXTI0_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/
void EXTI0_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	if (isMyMelody) {
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <EXTI0_IRQHandler+0x3c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <EXTI0_IRQHandler+0x16>
		isMyMelody = 0;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <EXTI0_IRQHandler+0x3c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e002      	b.n	80010e4 <EXTI0_IRQHandler+0x1c>
	} else {
		isMyMelody = 1;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <EXTI0_IRQHandler+0x3c>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
	}

	unsigned int cnt;
	cnt = 500000;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <EXTI0_IRQHandler+0x40>)
 80010e6:	607b      	str	r3, [r7, #4]

	while(cnt--) {
 80010e8:	e000      	b.n	80010ec <EXTI0_IRQHandler+0x24>
		asm("nop");
 80010ea:	bf00      	nop
	while(cnt--) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	1e5a      	subs	r2, r3, #1
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <EXTI0_IRQHandler+0x22>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 ff5c 	bl	8001fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	0007a120 	.word	0x0007a120

0800110c <DMA1_Stream5_IRQHandler>:
/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <DMA1_Stream5_IRQHandler+0x10>)
 8001112:	f000 fb2f 	bl	8001774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000138 	.word	0x20000138

08001120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <OTG_FS_IRQHandler+0x10>)
 8001126:	f001 fa49 	bl	80025bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000069c 	.word	0x2000069c

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f008 fed2 	bl	8009f0c <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20020000 	.word	0x20020000
 8001194:	00000400 	.word	0x00000400
 8001198:	200002b8 	.word	0x200002b8
 800119c:	20000bc8 	.word	0x20000bc8

080011a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011c8:	f7ff ffea 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	; (8001210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f008 fe91 	bl	8009f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff fb17 	bl	8000828 <main>
  bx  lr    
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001208:	0800a160 	.word	0x0800a160
  ldr r2, =_sbss
 800120c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001210:	20000bc4 	.word	0x20000bc4

08001214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_Init+0x40>)
 8001222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_Init+0x40>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_Init+0x40>)
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f94f 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f808 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fd8c 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023c00 	.word	0x40023c00

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x54>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x58>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f967 	bl	800154e <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f000 f92f 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <HAL_InitTick+0x5c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000004 	.word	0x20000004
 80012b4:	2000000c 	.word	0x2000000c
 80012b8:	20000008 	.word	0x20000008

080012bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2000000c 	.word	0x2000000c
 80012e0:	200002bc 	.word	0x200002bc

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200002bc 	.word	0x200002bc

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000000c 	.word	0x2000000c

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff29 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff3e 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff31 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff feb6 	bl	80012e4 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e099      	b.n	80016b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2202      	movs	r2, #2
 8001588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a4:	e00f      	b.n	80015c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015a6:	f7ff fe9d 	bl	80012e4 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d908      	bls.n	80015c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2220      	movs	r2, #32
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e078      	b.n	80016b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e8      	bne.n	80015a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <HAL_DMA_Init+0x158>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4313      	orrs	r3, r2
 8001616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	2b04      	cmp	r3, #4
 800161e:	d107      	bne.n	8001630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	4313      	orrs	r3, r2
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4313      	orrs	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f023 0307 	bic.w	r3, r3, #7
 8001646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	4313      	orrs	r3, r2
 8001650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	2b04      	cmp	r3, #4
 8001658:	d117      	bne.n	800168a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4313      	orrs	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00e      	beq.n	800168a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 fa6f 	bl	8001b50 <DMA_CheckFifoParam>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2240      	movs	r2, #64	; 0x40
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001686:	2301      	movs	r3, #1
 8001688:	e016      	b.n	80016b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fa26 	bl	8001ae4 <DMA_CalcBaseAndBitshift>
 8001698:	4603      	mov	r3, r0
 800169a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	223f      	movs	r2, #63	; 0x3f
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	f010803f 	.word	0xf010803f

080016c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_DMA_Start_IT+0x26>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e040      	b.n	800176c <HAL_DMA_Start_IT+0xa8>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d12f      	bne.n	800175e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f9b8 	bl	8001a88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	223f      	movs	r2, #63	; 0x3f
 800171e:	409a      	lsls	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0216 	orr.w	r2, r2, #22
 8001732:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0208 	orr.w	r2, r2, #8
 800174a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e005      	b.n	800176a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001766:	2302      	movs	r3, #2
 8001768:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800176a:	7dfb      	ldrb	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001780:	4b8e      	ldr	r3, [pc, #568]	; (80019bc <HAL_DMA_IRQHandler+0x248>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a8e      	ldr	r2, [pc, #568]	; (80019c0 <HAL_DMA_IRQHandler+0x24c>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0a9b      	lsrs	r3, r3, #10
 800178c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179e:	2208      	movs	r2, #8
 80017a0:	409a      	lsls	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01a      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0204 	bic.w	r2, r2, #4
 80017c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	2208      	movs	r2, #8
 80017ce:	409a      	lsls	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e4:	2201      	movs	r2, #1
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d012      	beq.n	8001816 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001802:	2201      	movs	r2, #1
 8001804:	409a      	lsls	r2, r3
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f043 0202 	orr.w	r2, r3, #2
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	2204      	movs	r2, #4
 800181c:	409a      	lsls	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d012      	beq.n	800184c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00b      	beq.n	800184c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	2204      	movs	r2, #4
 800183a:	409a      	lsls	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001844:	f043 0204 	orr.w	r2, r3, #4
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001850:	2210      	movs	r2, #16
 8001852:	409a      	lsls	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d043      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d03c      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	2210      	movs	r2, #16
 8001870:	409a      	lsls	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d018      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d108      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	d024      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	4798      	blx	r3
 80018a2:	e01f      	b.n	80018e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01b      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	e016      	b.n	80018e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0208 	bic.w	r2, r2, #8
 80018d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2220      	movs	r2, #32
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 808f 	beq.w	8001a14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8087 	beq.w	8001a14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	2220      	movs	r2, #32
 800190c:	409a      	lsls	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b05      	cmp	r3, #5
 800191c:	d136      	bne.n	800198c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0216 	bic.w	r2, r2, #22
 800192c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <HAL_DMA_IRQHandler+0x1da>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0208 	bic.w	r2, r2, #8
 800195c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	223f      	movs	r2, #63	; 0x3f
 8001964:	409a      	lsls	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197e:	2b00      	cmp	r3, #0
 8001980:	d07e      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	4798      	blx	r3
        }
        return;
 800198a:	e079      	b.n	8001a80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01d      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10d      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d031      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
 80019b8:	e02c      	b.n	8001a14 <HAL_DMA_IRQHandler+0x2a0>
 80019ba:	bf00      	nop
 80019bc:	20000004 	.word	0x20000004
 80019c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d023      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
 80019d4:	e01e      	b.n	8001a14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10f      	bne.n	8001a04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0210 	bic.w	r2, r2, #16
 80019f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d032      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d022      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d307      	bcc.n	8001a5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f2      	bne.n	8001a40 <HAL_DMA_IRQHandler+0x2cc>
 8001a5a:	e000      	b.n	8001a5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	4798      	blx	r3
 8001a7e:	e000      	b.n	8001a82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a80:	bf00      	nop
    }
  }
}
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b40      	cmp	r3, #64	; 0x40
 8001ab4:	d108      	bne.n	8001ac8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ac6:	e007      	b.n	8001ad8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	60da      	str	r2, [r3, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	3b10      	subs	r3, #16
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <DMA_CalcBaseAndBitshift+0x64>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <DMA_CalcBaseAndBitshift+0x68>)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d909      	bls.n	8001b26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	1d1a      	adds	r2, r3, #4
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	659a      	str	r2, [r3, #88]	; 0x58
 8001b24:	e007      	b.n	8001b36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b2e:	f023 0303 	bic.w	r3, r3, #3
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	aaaaaaab 	.word	0xaaaaaaab
 8001b4c:	0800a148 	.word	0x0800a148

08001b50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d11f      	bne.n	8001baa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d856      	bhi.n	8001c1e <DMA_CheckFifoParam+0xce>
 8001b70:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <DMA_CheckFifoParam+0x28>)
 8001b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b76:	bf00      	nop
 8001b78:	08001b89 	.word	0x08001b89
 8001b7c:	08001b9b 	.word	0x08001b9b
 8001b80:	08001b89 	.word	0x08001b89
 8001b84:	08001c1f 	.word	0x08001c1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d046      	beq.n	8001c22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b98:	e043      	b.n	8001c22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ba2:	d140      	bne.n	8001c26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba8:	e03d      	b.n	8001c26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb2:	d121      	bne.n	8001bf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d837      	bhi.n	8001c2a <DMA_CheckFifoParam+0xda>
 8001bba:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <DMA_CheckFifoParam+0x70>)
 8001bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc0:	08001bd1 	.word	0x08001bd1
 8001bc4:	08001bd7 	.word	0x08001bd7
 8001bc8:	08001bd1 	.word	0x08001bd1
 8001bcc:	08001be9 	.word	0x08001be9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd4:	e030      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d025      	beq.n	8001c2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be6:	e022      	b.n	8001c2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bf0:	d11f      	bne.n	8001c32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bf6:	e01c      	b.n	8001c32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d903      	bls.n	8001c06 <DMA_CheckFifoParam+0xb6>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d003      	beq.n	8001c0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c04:	e018      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0a:	e015      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c1c:	e00b      	b.n	8001c36 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1e:	bf00      	nop
 8001c20:	e00a      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c22:	bf00      	nop
 8001c24:	e008      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e006      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e004      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2e:	bf00      	nop
 8001c30:	e002      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c32:	bf00      	nop
 8001c34:	e000      	b.n	8001c38 <DMA_CheckFifoParam+0xe8>
      break;
 8001c36:	bf00      	nop
    }
  } 
  
  return status; 
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e16b      	b.n	8001f3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 815a 	bne.w	8001f36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d005      	beq.n	8001c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d130      	bne.n	8001cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 0201 	and.w	r2, r3, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d017      	beq.n	8001d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d123      	bne.n	8001d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3208      	adds	r2, #8
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0203 	and.w	r2, r3, #3
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80b4 	beq.w	8001f36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b60      	ldr	r3, [pc, #384]	; (8001f54 <HAL_GPIO_Init+0x30c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a5f      	ldr	r2, [pc, #380]	; (8001f54 <HAL_GPIO_Init+0x30c>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_GPIO_Init+0x30c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dea:	4a5b      	ldr	r2, [pc, #364]	; (8001f58 <HAL_GPIO_Init+0x310>)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_GPIO_Init+0x314>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d02b      	beq.n	8001e6e <HAL_GPIO_Init+0x226>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a51      	ldr	r2, [pc, #324]	; (8001f60 <HAL_GPIO_Init+0x318>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d025      	beq.n	8001e6a <HAL_GPIO_Init+0x222>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <HAL_GPIO_Init+0x31c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01f      	beq.n	8001e66 <HAL_GPIO_Init+0x21e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4f      	ldr	r2, [pc, #316]	; (8001f68 <HAL_GPIO_Init+0x320>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0x21a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4e      	ldr	r2, [pc, #312]	; (8001f6c <HAL_GPIO_Init+0x324>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x216>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4d      	ldr	r2, [pc, #308]	; (8001f70 <HAL_GPIO_Init+0x328>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x212>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4c      	ldr	r2, [pc, #304]	; (8001f74 <HAL_GPIO_Init+0x32c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x20e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4b      	ldr	r2, [pc, #300]	; (8001f78 <HAL_GPIO_Init+0x330>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x20a>
 8001e4e:	2307      	movs	r3, #7
 8001e50:	e00e      	b.n	8001e70 <HAL_GPIO_Init+0x228>
 8001e52:	2308      	movs	r3, #8
 8001e54:	e00c      	b.n	8001e70 <HAL_GPIO_Init+0x228>
 8001e56:	2306      	movs	r3, #6
 8001e58:	e00a      	b.n	8001e70 <HAL_GPIO_Init+0x228>
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	e008      	b.n	8001e70 <HAL_GPIO_Init+0x228>
 8001e5e:	2304      	movs	r3, #4
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x228>
 8001e62:	2303      	movs	r3, #3
 8001e64:	e004      	b.n	8001e70 <HAL_GPIO_Init+0x228>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e002      	b.n	8001e70 <HAL_GPIO_Init+0x228>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_GPIO_Init+0x228>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	f002 0203 	and.w	r2, r2, #3
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	4093      	lsls	r3, r2
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e80:	4935      	ldr	r1, [pc, #212]	; (8001f58 <HAL_GPIO_Init+0x310>)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb2:	4a32      	ldr	r2, [pc, #200]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001edc:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f06:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f30:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <HAL_GPIO_Init+0x334>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b0f      	cmp	r3, #15
 8001f40:	f67f ae90 	bls.w	8001c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40013800 	.word	0x40013800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40021400 	.word	0x40021400
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40021c00 	.word	0x40021c00
 8001f7c:	40013c00 	.word	0x40013c00

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f9c:	e003      	b.n	8001fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	041a      	lsls	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	619a      	str	r2, [r3, #24]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f806 	bl	8001fe4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40013c00 	.word	0x40013c00

08001fe4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af02      	add	r7, sp, #8
 8002000:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e059      	b.n	80020c0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f007 fbf0 	bl	800980c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2203      	movs	r2, #3
 8002030:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800203a:	d102      	bne.n	8002042 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f004 f9fa 	bl	8006440 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7c1a      	ldrb	r2, [r3, #16]
 8002054:	f88d 2000 	strb.w	r2, [sp]
 8002058:	3304      	adds	r3, #4
 800205a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205c:	f004 f97b 	bl	8006356 <USB_CoreInit>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e026      	b.n	80020c0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2101      	movs	r1, #1
 8002078:	4618      	mov	r0, r3
 800207a:	f004 f9f2 	bl	8006462 <USB_SetCurrentMode>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e017      	b.n	80020c0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7c1a      	ldrb	r2, [r3, #16]
 8002098:	f88d 2000 	strb.w	r2, [sp]
 800209c:	3304      	adds	r3, #4
 800209e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a0:	f004 fb94 	bl	80067cc <USB_HostInit>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e004      	b.n	80020c0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b08b      	sub	sp, #44	; 0x2c
 80020cc:	af04      	add	r7, sp, #16
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	70fb      	strb	r3, [r7, #3]
 80020da:	460b      	mov	r3, r1
 80020dc:	70bb      	strb	r3, [r7, #2]
 80020de:	4613      	mov	r3, r2
 80020e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80020e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80020e4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_HCD_HC_Init+0x2c>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e09d      	b.n	8002230 <HAL_HCD_HC_Init+0x168>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3319      	adds	r3, #25
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	3314      	adds	r3, #20
 8002120:	787a      	ldrb	r2, [r7, #1]
 8002122:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3315      	adds	r3, #21
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3326      	adds	r3, #38	; 0x26
 8002148:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800214c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	78bb      	ldrb	r3, [r7, #2]
 8002152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002156:	b2d8      	uxtb	r0, r3
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3316      	adds	r3, #22
 8002166:	4602      	mov	r2, r0
 8002168:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fbc8 	bl	8002904 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002174:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da0a      	bge.n	8002192 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3317      	adds	r3, #23
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e009      	b.n	80021a6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3317      	adds	r3, #23
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 fc72 	bl	8006a94 <USB_GetHostSpeed>
 80021b0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80021b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10b      	bne.n	80021d2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80021ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <HAL_HCD_HC_Init+0x10a>
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2bbc      	cmp	r3, #188	; 0xbc
 80021cc:	d901      	bls.n	80021d2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80021ce:	23bc      	movs	r3, #188	; 0xbc
 80021d0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3318      	adds	r3, #24
 80021e2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80021e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	b298      	uxth	r0, r3
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	3328      	adds	r3, #40	; 0x28
 80021fc:	4602      	mov	r2, r0
 80021fe:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	b29b      	uxth	r3, r3
 8002208:	787c      	ldrb	r4, [r7, #1]
 800220a:	78ba      	ldrb	r2, [r7, #2]
 800220c:	78f9      	ldrb	r1, [r7, #3]
 800220e:	9302      	str	r3, [sp, #8]
 8002210:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	4623      	mov	r3, r4
 800221e:	f004 fc61 	bl	8006ae4 <USB_HC_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}

08002238 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_HCD_HC_Halt+0x1e>
 8002252:	2302      	movs	r3, #2
 8002254:	e00f      	b.n	8002276 <HAL_HCD_HC_Halt+0x3e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f004 fff3 	bl	8007252 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4603      	mov	r3, r0
 8002290:	70fb      	strb	r3, [r7, #3]
 8002292:	460b      	mov	r3, r1
 8002294:	70bb      	strb	r3, [r7, #2]
 8002296:	4613      	mov	r3, r2
 8002298:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	3317      	adds	r3, #23
 80022aa:	78ba      	ldrb	r2, [r7, #2]
 80022ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	3326      	adds	r3, #38	; 0x26
 80022be:	787a      	ldrb	r2, [r7, #1]
 80022c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022c2:	7c3b      	ldrb	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d114      	bne.n	80022f2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	332a      	adds	r3, #42	; 0x2a
 80022d8:	2203      	movs	r2, #3
 80022da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3319      	adds	r3, #25
 80022ec:	7f3a      	ldrb	r2, [r7, #28]
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e009      	b.n	8002306 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	332a      	adds	r3, #42	; 0x2a
 8002302:	2202      	movs	r2, #2
 8002304:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002306:	787b      	ldrb	r3, [r7, #1]
 8002308:	2b03      	cmp	r3, #3
 800230a:	f200 8102 	bhi.w	8002512 <HAL_HCD_HC_SubmitRequest+0x292>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	080024fd 	.word	0x080024fd
 800231c:	080023e9 	.word	0x080023e9
 8002320:	08002473 	.word	0x08002473
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002324:	7c3b      	ldrb	r3, [r7, #16]
 8002326:	2b01      	cmp	r3, #1
 8002328:	f040 80f5 	bne.w	8002516 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800232c:	78bb      	ldrb	r3, [r7, #2]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d12d      	bne.n	800238e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002332:	8b3b      	ldrh	r3, [r7, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	333d      	adds	r3, #61	; 0x3d
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	333d      	adds	r3, #61	; 0x3d
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	332a      	adds	r3, #42	; 0x2a
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002376:	e0ce      	b.n	8002516 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	332a      	adds	r3, #42	; 0x2a
 8002388:	2202      	movs	r2, #2
 800238a:	701a      	strb	r2, [r3, #0]
      break;
 800238c:	e0c3      	b.n	8002516 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	331a      	adds	r3, #26
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 80b8 	bne.w	8002516 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	333c      	adds	r3, #60	; 0x3c
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	332a      	adds	r3, #42	; 0x2a
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
      break;
 80023d0:	e0a1      	b.n	8002516 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	332a      	adds	r3, #42	; 0x2a
 80023e2:	2202      	movs	r2, #2
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e096      	b.n	8002516 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023e8:	78bb      	ldrb	r3, [r7, #2]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d120      	bne.n	8002430 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	333d      	adds	r3, #61	; 0x3d
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	332a      	adds	r3, #42	; 0x2a
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002418:	e07e      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	332a      	adds	r3, #42	; 0x2a
 800242a:	2202      	movs	r2, #2
 800242c:	701a      	strb	r2, [r3, #0]
      break;
 800242e:	e073      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	333c      	adds	r3, #60	; 0x3c
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	332a      	adds	r3, #42	; 0x2a
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
      break;
 800245a:	e05d      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	332a      	adds	r3, #42	; 0x2a
 800246c:	2202      	movs	r2, #2
 800246e:	701a      	strb	r2, [r3, #0]
      break;
 8002470:	e052      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002472:	78bb      	ldrb	r3, [r7, #2]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d120      	bne.n	80024ba <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	333d      	adds	r3, #61	; 0x3d
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	332a      	adds	r3, #42	; 0x2a
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024a2:	e039      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	332a      	adds	r3, #42	; 0x2a
 80024b4:	2202      	movs	r2, #2
 80024b6:	701a      	strb	r2, [r3, #0]
      break;
 80024b8:	e02e      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	333c      	adds	r3, #60	; 0x3c
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	332a      	adds	r3, #42	; 0x2a
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
      break;
 80024e4:	e018      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	332a      	adds	r3, #42	; 0x2a
 80024f6:	2202      	movs	r2, #2
 80024f8:	701a      	strb	r2, [r3, #0]
      break;
 80024fa:	e00d      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	332a      	adds	r3, #42	; 0x2a
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
      break;
 8002510:	e002      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002512:	bf00      	nop
 8002514:	e000      	b.n	8002518 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002516:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	332c      	adds	r3, #44	; 0x2c
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	8b39      	ldrh	r1, [r7, #24]
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4403      	add	r3, r0
 800253c:	3334      	adds	r3, #52	; 0x34
 800253e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	334c      	adds	r3, #76	; 0x4c
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3338      	adds	r3, #56	; 0x38
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3315      	adds	r3, #21
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	334d      	adds	r3, #77	; 0x4d
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	3310      	adds	r3, #16
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	1d19      	adds	r1, r3, #4
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	799b      	ldrb	r3, [r3, #6]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f004 fbc6 	bl	8006d3c <USB_HC_StartXfer>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop

080025bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 f8bb 	bl	800674e <USB_GetMode>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	f040 80fb 	bne.w	80027d6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f004 f87e 	bl	80066e6 <USB_ReadInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80f1 	beq.w	80027d4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f875 	bl	80066e6 <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002606:	d104      	bne.n	8002612 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002610:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f004 f865 	bl	80066e6 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002626:	d104      	bne.n	8002632 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002630:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f004 f855 	bl	80066e6 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002646:	d104      	bne.n	8002652 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f004 f845 	bl	80066e6 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d103      	bne.n	800266e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2202      	movs	r2, #2
 800266c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f004 f837 	bl	80066e6 <USB_ReadInterrupts>
 8002678:	4603      	mov	r3, r0
 800267a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002682:	d120      	bne.n	80026c6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800268c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d113      	bne.n	80026c6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800269e:	2110      	movs	r1, #16
 80026a0:	6938      	ldr	r0, [r7, #16]
 80026a2:	f003 ff2a 	bl	80064fa <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80026a6:	6938      	ldr	r0, [r7, #16]
 80026a8:	f003 ff59 	bl	800655e <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7a5b      	ldrb	r3, [r3, #9]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d105      	bne.n	80026c0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 f94a 	bl	8006954 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f007 f921 	bl	8009908 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 f80b 	bl	80066e6 <USB_ReadInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026da:	d102      	bne.n	80026e2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f001 fd33 	bl	8004148 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fffd 	bl	80066e6 <USB_ReadInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d106      	bne.n	8002704 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f007 f8ea 	bl	80098d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2208      	movs	r2, #8
 8002702:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f003 ffec 	bl	80066e6 <USB_ReadInterrupts>
 800270e:	4603      	mov	r3, r0
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002718:	d139      	bne.n	800278e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f004 fd86 	bl	8007230 <USB_HC_ReadInterrupt>
 8002724:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e025      	b.n	8002778 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d018      	beq.n	8002772 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002756:	d106      	bne.n	8002766 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f905 	bl	800296e <HCD_HC_IN_IRQHandler>
 8002764:	e005      	b.n	8002772 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 ff67 	bl	8003640 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	3301      	adds	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	795b      	ldrb	r3, [r3, #5]
 800277c:	461a      	mov	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4293      	cmp	r3, r2
 8002782:	d3d3      	bcc.n	800272c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f003 ffa7 	bl	80066e6 <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d101      	bne.n	80027a6 <HAL_HCD_IRQHandler+0x1ea>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_HCD_IRQHandler+0x1ec>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d014      	beq.n	80027d6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0210 	bic.w	r2, r2, #16
 80027ba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f001 fbe4 	bl	8003f8a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0210 	orr.w	r2, r2, #16
 80027d0:	619a      	str	r2, [r3, #24]
 80027d2:	e000      	b.n	80027d6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80027d4:	bf00      	nop
    }
  }
}
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_HCD_Start+0x16>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e013      	b.n	800281a <HAL_HCD_Start+0x3e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f004 f90e 	bl	8006a22 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fe07 	bl	800641e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_HCD_Stop+0x16>
 8002834:	2302      	movs	r3, #2
 8002836:	e00d      	b.n	8002854 <HAL_HCD_Stop+0x32>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f004 fe61 	bl	800750c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f004 f8b0 	bl	80069ce <USB_ResetPort>
 800286e:	4603      	mov	r3, r0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	334c      	adds	r3, #76	; 0x4c
 8002894:	781b      	ldrb	r3, [r3, #0]
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3338      	adds	r3, #56	; 0x38
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 f8f2 	bl	8006ac2 <USB_GetCurrentFrame>
 80028de:	4603      	mov	r3, r0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 f8cd 	bl	8006a94 <USB_GetHostSpeed>
 80028fa:	4603      	mov	r3, r0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	331a      	adds	r3, #26
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	331b      	adds	r3, #27
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	3325      	adds	r3, #37	; 0x25
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	3324      	adds	r3, #36	; 0x24
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f003 febd 	bl	800670c <USB_ReadChInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b04      	cmp	r3, #4
 800299a:	d11a      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	461a      	mov	r2, r3
 80029aa:	2304      	movs	r3, #4
 80029ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	334d      	adds	r3, #77	; 0x4d
 80029be:	2207      	movs	r2, #7
 80029c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 fc41 	bl	8007252 <USB_HC_Halt>
 80029d0:	e09e      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fe96 	bl	800670c <USB_ReadChInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ea:	d11b      	bne.n	8002a24 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	461a      	mov	r2, r3
 80029fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	334d      	adds	r3, #77	; 0x4d
 8002a10:	2208      	movs	r2, #8
 8002a12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fc18 	bl	8007252 <USB_HC_Halt>
 8002a22:	e075      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 fe6d 	bl	800670c <USB_ReadChInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d11a      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	334d      	adds	r3, #77	; 0x4d
 8002a5e:	2206      	movs	r2, #6
 8002a60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f004 fbf1 	bl	8007252 <USB_HC_Halt>
 8002a70:	e04e      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 fe46 	bl	800670c <USB_ReadChInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8a:	d11b      	bne.n	8002ac4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	334d      	adds	r3, #77	; 0x4d
 8002ab0:	2209      	movs	r2, #9
 8002ab2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 fbc8 	bl	8007252 <USB_HC_Halt>
 8002ac2:	e025      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 fe1d 	bl	800670c <USB_ReadChInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d119      	bne.n	8002b10 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	334d      	adds	r3, #77	; 0x4d
 8002afe:	2207      	movs	r2, #7
 8002b00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fba1 	bl	8007252 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fdf7 	bl	800670c <USB_ReadChInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b28:	d112      	bne.n	8002b50 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fb8d 	bl	8007252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	461a      	mov	r2, r3
 8002b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b4a:	6093      	str	r3, [r2, #8]
 8002b4c:	f000 bd75 	b.w	800363a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fdd7 	bl	800670c <USB_ReadChInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	f040 8128 	bne.w	8002dba <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	2320      	movs	r3, #32
 8002b7a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	331b      	adds	r3, #27
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d119      	bne.n	8002bc6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	331b      	adds	r3, #27
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	0151      	lsls	r1, r2, #5
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	440a      	add	r2, r1
 8002bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	799b      	ldrb	r3, [r3, #6]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01b      	beq.n	8002c06 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	3330      	adds	r3, #48	; 0x30
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	1ac9      	subs	r1, r1, r3
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4403      	add	r3, r0
 8002c02:	3338      	adds	r3, #56	; 0x38
 8002c04:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	334d      	adds	r3, #77	; 0x4d
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3344      	adds	r3, #68	; 0x44
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3326      	adds	r3, #38	; 0x26
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3326      	adds	r3, #38	; 0x26
 8002c66:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d110      	bne.n	8002c8e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f004 faec 	bl	8007252 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	461a      	mov	r2, r3
 8002c88:	2310      	movs	r3, #16
 8002c8a:	6093      	str	r3, [r2, #8]
 8002c8c:	e03d      	b.n	8002d0a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3326      	adds	r3, #38	; 0x26
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d00a      	beq.n	8002cba <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3326      	adds	r3, #38	; 0x26
 8002cb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d127      	bne.n	8002d0a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	0151      	lsls	r1, r2, #5
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	440a      	add	r2, r1
 8002cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cd8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	334c      	adds	r3, #76	; 0x4c
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	334c      	adds	r3, #76	; 0x4c
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f006 fe0d 	bl	8009924 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	799b      	ldrb	r3, [r3, #6]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d13b      	bne.n	8002d8a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3338      	adds	r3, #56	; 0x38
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4403      	add	r3, r0
 8002d32:	3328      	adds	r3, #40	; 0x28
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	440b      	add	r3, r1
 8002d38:	1e59      	subs	r1, r3, #1
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4403      	add	r3, r0
 8002d48:	3328      	adds	r3, #40	; 0x28
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8470 	beq.w	800363a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	333c      	adds	r3, #60	; 0x3c
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	f083 0301 	eor.w	r3, r3, #1
 8002d72:	b2d8      	uxtb	r0, r3
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	333c      	adds	r3, #60	; 0x3c
 8002d82:	4602      	mov	r2, r0
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	f000 bc58 	b.w	800363a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	333c      	adds	r3, #60	; 0x3c
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	f083 0301 	eor.w	r3, r3, #1
 8002da2:	b2d8      	uxtb	r0, r3
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	333c      	adds	r3, #60	; 0x3c
 8002db2:	4602      	mov	r2, r0
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	f000 bc40 	b.w	800363a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fca2 	bl	800670c <USB_ReadChInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d131      	bne.n	8002e36 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	461a      	mov	r2, r3
 8002de0:	2320      	movs	r3, #32
 8002de2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	331a      	adds	r3, #26
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	f040 841f 	bne.w	800363a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	331b      	adds	r3, #27
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	334d      	adds	r3, #77	; 0x4d
 8002e20:	2203      	movs	r2, #3
 8002e22:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f004 fa10 	bl	8007252 <USB_HC_Halt>
 8002e32:	f000 bc02 	b.w	800363a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fc64 	bl	800670c <USB_ReadChInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	f040 8305 	bne.w	800345a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2302      	movs	r3, #2
 8002e60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	334d      	adds	r3, #77	; 0x4d
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d114      	bne.n	8002ea2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	334d      	adds	r3, #77	; 0x4d
 8002e88:	2202      	movs	r2, #2
 8002e8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	334c      	adds	r3, #76	; 0x4c
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e2cc      	b.n	800343c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	334d      	adds	r3, #77	; 0x4d
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d114      	bne.n	8002ee2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334d      	adds	r3, #77	; 0x4d
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	334c      	adds	r3, #76	; 0x4c
 8002edc:	2205      	movs	r2, #5
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e2ac      	b.n	800343c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	334d      	adds	r3, #77	; 0x4d
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	d00b      	beq.n	8002f10 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334d      	adds	r3, #77	; 0x4d
 8002f08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f0a:	2b09      	cmp	r3, #9
 8002f0c:	f040 80a6 	bne.w	800305c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	334d      	adds	r3, #77	; 0x4d
 8002f20:	2202      	movs	r2, #2
 8002f22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3344      	adds	r3, #68	; 0x44
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	1c59      	adds	r1, r3, #1
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4403      	add	r3, r0
 8002f44:	3344      	adds	r3, #68	; 0x44
 8002f46:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3344      	adds	r3, #68	; 0x44
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d943      	bls.n	8002fe6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3344      	adds	r3, #68	; 0x44
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	331a      	adds	r3, #26
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d123      	bne.n	8002fd0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	331b      	adds	r3, #27
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	331c      	adds	r3, #28
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	0151      	lsls	r1, r2, #5
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	440a      	add	r2, r1
 8002fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	334c      	adds	r3, #76	; 0x4c
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fe4:	e229      	b.n	800343a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	334c      	adds	r3, #76	; 0x4c
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3326      	adds	r3, #38	; 0x26
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3326      	adds	r3, #38	; 0x26
 8003020:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003022:	2b02      	cmp	r3, #2
 8003024:	f040 8209 	bne.w	800343a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800303e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003046:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800305a:	e1ee      	b.n	800343a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	334d      	adds	r3, #77	; 0x4d
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b05      	cmp	r3, #5
 8003070:	f040 80c8 	bne.w	8003204 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	334d      	adds	r3, #77	; 0x4d
 8003084:	2202      	movs	r2, #2
 8003086:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	331b      	adds	r3, #27
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	f040 81ce 	bne.w	800343c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3326      	adds	r3, #38	; 0x26
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d16b      	bne.n	800318e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3348      	adds	r3, #72	; 0x48
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	1c59      	adds	r1, r3, #1
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4403      	add	r3, r0
 80030d6:	3348      	adds	r3, #72	; 0x48
 80030d8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3348      	adds	r3, #72	; 0x48
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d943      	bls.n	8003178 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3348      	adds	r3, #72	; 0x48
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	331b      	adds	r3, #27
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3344      	adds	r3, #68	; 0x44
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d809      	bhi.n	8003142 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	331c      	adds	r3, #28
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	0151      	lsls	r1, r2, #5
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	440a      	add	r2, r1
 8003158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334c      	adds	r3, #76	; 0x4c
 8003172:	2204      	movs	r2, #4
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e014      	b.n	80031a2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	334c      	adds	r3, #76	; 0x4c
 8003188:	2202      	movs	r2, #2
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	e009      	b.n	80031a2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	334c      	adds	r3, #76	; 0x4c
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3326      	adds	r3, #38	; 0x26
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3326      	adds	r3, #38	; 0x26
 80031c8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	f040 8136 	bne.w	800343c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031e6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031ee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	461a      	mov	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e11b      	b.n	800343c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	334d      	adds	r3, #77	; 0x4d
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b03      	cmp	r3, #3
 8003218:	f040 8081 	bne.w	800331e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	334d      	adds	r3, #77	; 0x4d
 800322c:	2202      	movs	r2, #2
 800322e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	331b      	adds	r3, #27
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 80fa 	bne.w	800343c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334c      	adds	r3, #76	; 0x4c
 8003258:	2202      	movs	r2, #2
 800325a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	0151      	lsls	r1, r2, #5
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	440a      	add	r2, r1
 8003272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	0151      	lsls	r1, r2, #5
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	440a      	add	r2, r1
 8003292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800329a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	0151      	lsls	r1, r2, #5
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	440a      	add	r2, r1
 80032b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b6:	f023 0320 	bic.w	r3, r3, #32
 80032ba:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3326      	adds	r3, #38	; 0x26
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3326      	adds	r3, #38	; 0x26
 80032e2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	f040 80a9 	bne.w	800343c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003300:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003308:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e08e      	b.n	800343c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	334d      	adds	r3, #77	; 0x4d
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d143      	bne.n	80033bc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	334d      	adds	r3, #77	; 0x4d
 8003344:	2202      	movs	r2, #2
 8003346:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	334c      	adds	r3, #76	; 0x4c
 8003358:	2202      	movs	r2, #2
 800335a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3326      	adds	r3, #38	; 0x26
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3326      	adds	r3, #38	; 0x26
 8003382:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003384:	2b02      	cmp	r3, #2
 8003386:	d159      	bne.n	800343c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800339e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033a6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b4:	461a      	mov	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e03f      	b.n	800343c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334d      	adds	r3, #77	; 0x4d
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d126      	bne.n	8003420 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	334d      	adds	r3, #77	; 0x4d
 80033e2:	2202      	movs	r2, #2
 80033e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3344      	adds	r3, #68	; 0x44
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4403      	add	r3, r0
 8003406:	3344      	adds	r3, #68	; 0x44
 8003408:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	334c      	adds	r3, #76	; 0x4c
 800341a:	2204      	movs	r2, #4
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e00d      	b.n	800343c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	334d      	adds	r3, #77	; 0x4d
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b02      	cmp	r3, #2
 8003434:	f000 8100 	beq.w	8003638 <HCD_HC_IN_IRQHandler+0xcca>
 8003438:	e000      	b.n	800343c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800343a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334c      	adds	r3, #76	; 0x4c
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f006 fa66 	bl	8009924 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003458:	e0ef      	b.n	800363a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f003 f952 	bl	800670c <USB_ReadChInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d12f      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347e:	461a      	mov	r2, r3
 8003480:	2340      	movs	r3, #64	; 0x40
 8003482:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	334d      	adds	r3, #77	; 0x4d
 8003494:	2205      	movs	r2, #5
 8003496:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003498:	78fa      	ldrb	r2, [r7, #3]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	331a      	adds	r3, #26
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3344      	adds	r3, #68	; 0x44
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f003 fec1 	bl	8007252 <USB_HC_Halt>
 80034d0:	e0b3      	b.n	800363a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 f916 	bl	800670c <USB_ReadChInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	f040 80a7 	bne.w	800363a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3326      	adds	r3, #38	; 0x26
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d11b      	bne.n	800353a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	3344      	adds	r3, #68	; 0x44
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	334d      	adds	r3, #77	; 0x4d
 8003526:	2204      	movs	r2, #4
 8003528:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f003 fe8d 	bl	8007252 <USB_HC_Halt>
 8003538:	e03f      	b.n	80035ba <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3326      	adds	r3, #38	; 0x26
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3326      	adds	r3, #38	; 0x26
 8003560:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003562:	2b02      	cmp	r3, #2
 8003564:	d129      	bne.n	80035ba <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3344      	adds	r3, #68	; 0x44
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	799b      	ldrb	r3, [r3, #6]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HCD_HC_IN_IRQHandler+0xc2a>
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	331b      	adds	r3, #27
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d110      	bne.n	80035ba <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	334d      	adds	r3, #77	; 0x4d
 80035a8:	2204      	movs	r2, #4
 80035aa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 fe4c 	bl	8007252 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	331b      	adds	r3, #27
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d129      	bne.n	8003624 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	331b      	adds	r3, #27
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003602:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	0151      	lsls	r1, r2, #5
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	440a      	add	r2, r1
 800361a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800361e:	f043 0320 	orr.w	r3, r3, #32
 8003622:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003630:	461a      	mov	r2, r3
 8003632:	2310      	movs	r3, #16
 8003634:	6093      	str	r3, [r2, #8]
 8003636:	e000      	b.n	800363a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003638:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f003 f854 	bl	800670c <USB_ReadChInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d11b      	bne.n	80036a6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	461a      	mov	r2, r3
 800367c:	2304      	movs	r3, #4
 800367e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334d      	adds	r3, #77	; 0x4d
 8003690:	2207      	movs	r2, #7
 8003692:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f003 fdd8 	bl	8007252 <USB_HC_Halt>
 80036a2:	f000 bc6f 	b.w	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 f82c 	bl	800670c <USB_ReadChInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	f040 8082 	bne.w	80037c4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	461a      	mov	r2, r3
 80036ce:	2320      	movs	r3, #32
 80036d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3319      	adds	r3, #25
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d124      	bne.n	8003732 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	3319      	adds	r3, #25
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	334c      	adds	r3, #76	; 0x4c
 800370c:	2202      	movs	r2, #2
 800370e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	334d      	adds	r3, #77	; 0x4d
 8003720:	2203      	movs	r2, #3
 8003722:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f003 fd90 	bl	8007252 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	331a      	adds	r3, #26
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	f040 841d 	bne.w	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	331b      	adds	r3, #27
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f040 8411 	bne.w	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3326      	adds	r3, #38	; 0x26
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d009      	beq.n	800378c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	331b      	adds	r3, #27
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	334d      	adds	r3, #77	; 0x4d
 800379c:	2203      	movs	r2, #3
 800379e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 fd52 	bl	8007252 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	3344      	adds	r3, #68	; 0x44
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e3df      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 ff9d 	bl	800670c <USB_ReadChInterrupts>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037dc:	d111      	bne.n	8003802 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ea:	461a      	mov	r2, r3
 80037ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 fd29 	bl	8007252 <USB_HC_Halt>
 8003800:	e3c0      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f002 ff7e 	bl	800670c <USB_ReadChInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d168      	bne.n	80038ec <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	3344      	adds	r3, #68	; 0x44
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f002 ff68 	bl	800670c <USB_ReadChInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d112      	bne.n	800386c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3319      	adds	r3, #25
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003866:	461a      	mov	r2, r3
 8003868:	2340      	movs	r3, #64	; 0x40
 800386a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	331b      	adds	r3, #27
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d019      	beq.n	80038b6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	331b      	adds	r3, #27
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	461a      	mov	r2, r3
 80038c4:	2301      	movs	r3, #1
 80038c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	334d      	adds	r3, #77	; 0x4d
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 fcb4 	bl	8007252 <USB_HC_Halt>
 80038ea:	e34b      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f002 ff09 	bl	800670c <USB_ReadChInterrupts>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d139      	bne.n	8003978 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	334d      	adds	r3, #77	; 0x4d
 8003914:	2205      	movs	r2, #5
 8003916:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	331a      	adds	r3, #26
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3319      	adds	r3, #25
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3344      	adds	r3, #68	; 0x44
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f003 fc77 	bl	8007252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	461a      	mov	r2, r3
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	6093      	str	r3, [r2, #8]
 8003976:	e305      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f002 fec3 	bl	800670c <USB_ReadChInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b08      	cmp	r3, #8
 800398e:	d11a      	bne.n	80039c6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399c:	461a      	mov	r2, r3
 800399e:	2308      	movs	r3, #8
 80039a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	334d      	adds	r3, #77	; 0x4d
 80039b2:	2206      	movs	r2, #6
 80039b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f003 fc47 	bl	8007252 <USB_HC_Halt>
 80039c4:	e2de      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 fe9c 	bl	800670c <USB_ReadChInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d144      	bne.n	8003a68 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3344      	adds	r3, #68	; 0x44
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	334d      	adds	r3, #77	; 0x4d
 8003a02:	2204      	movs	r2, #4
 8003a04:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3319      	adds	r3, #25
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d114      	bne.n	8003a46 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3319      	adds	r3, #25
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 fbff 	bl	8007252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	2310      	movs	r3, #16
 8003a64:	6093      	str	r3, [r2, #8]
 8003a66:	e28d      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f002 fe4b 	bl	800670c <USB_ReadChInterrupts>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	d169      	bne.n	8003b54 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	799b      	ldrb	r3, [r3, #6]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d111      	bne.n	8003aac <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	334d      	adds	r3, #77	; 0x4d
 8003a98:	2207      	movs	r2, #7
 8003a9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 fbd4 	bl	8007252 <USB_HC_Halt>
 8003aaa:	e049      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3344      	adds	r3, #68	; 0x44
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	1c59      	adds	r1, r3, #1
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4403      	add	r3, r0
 8003acc:	3344      	adds	r3, #68	; 0x44
 8003ace:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3344      	adds	r3, #68	; 0x44
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d922      	bls.n	8003b2c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	3344      	adds	r3, #68	; 0x44
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	334c      	adds	r3, #76	; 0x4c
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	334c      	adds	r3, #76	; 0x4c
 8003b1e:	781a      	ldrb	r2, [r3, #0]
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f005 fefd 	bl	8009924 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b2a:	e009      	b.n	8003b40 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334c      	adds	r3, #76	; 0x4c
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	6093      	str	r3, [r2, #8]
 8003b52:	e217      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f002 fdd5 	bl	800670c <USB_ReadChInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6c:	d11b      	bne.n	8003ba6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	334d      	adds	r3, #77	; 0x4d
 8003b7e:	2209      	movs	r2, #9
 8003b80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f003 fb61 	bl	8007252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba2:	6093      	str	r3, [r2, #8]
 8003ba4:	e1ee      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f002 fdac 	bl	800670c <USB_ReadChInterrupts>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	f040 81df 	bne.w	8003f7e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2302      	movs	r3, #2
 8003bd0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	334d      	adds	r3, #77	; 0x4d
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f040 8093 	bne.w	8003d10 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	; 0x4d
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	334c      	adds	r3, #76	; 0x4c
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	3326      	adds	r3, #38	; 0x26
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d00b      	beq.n	8003c40 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	3326      	adds	r3, #38	; 0x26
 8003c38:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	f040 8190 	bne.w	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	799b      	ldrb	r3, [r3, #6]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d115      	bne.n	8003c74 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	333d      	adds	r3, #61	; 0x3d
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	f083 0301 	eor.w	r3, r3, #1
 8003c60:	b2d8      	uxtb	r0, r3
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	333d      	adds	r3, #61	; 0x3d
 8003c70:	4602      	mov	r2, r0
 8003c72:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	799b      	ldrb	r3, [r3, #6]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	f040 8171 	bne.w	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3334      	adds	r3, #52	; 0x34
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8165 	beq.w	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3334      	adds	r3, #52	; 0x34
 8003ca6:	6819      	ldr	r1, [r3, #0]
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4403      	add	r3, r0
 8003cb6:	3328      	adds	r3, #40	; 0x28
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	440b      	add	r3, r1
 8003cbc:	1e59      	subs	r1, r3, #1
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4403      	add	r3, r0
 8003ccc:	3328      	adds	r3, #40	; 0x28
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 813f 	beq.w	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	333d      	adds	r3, #61	; 0x3d
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	f083 0301 	eor.w	r3, r3, #1
 8003cfa:	b2d8      	uxtb	r0, r3
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	333d      	adds	r3, #61	; 0x3d
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e127      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	334d      	adds	r3, #77	; 0x4d
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d120      	bne.n	8003d68 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	334d      	adds	r3, #77	; 0x4d
 8003d36:	2202      	movs	r2, #2
 8003d38:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	331b      	adds	r3, #27
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	f040 8107 	bne.w	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	334c      	adds	r3, #76	; 0x4c
 8003d62:	2202      	movs	r2, #2
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	e0fb      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	334d      	adds	r3, #77	; 0x4d
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d13a      	bne.n	8003df4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	334d      	adds	r3, #77	; 0x4d
 8003d8e:	2202      	movs	r2, #2
 8003d90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	334c      	adds	r3, #76	; 0x4c
 8003da2:	2202      	movs	r2, #2
 8003da4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	331b      	adds	r3, #27
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	f040 80d1 	bne.w	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	331b      	adds	r3, #27
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	0151      	lsls	r1, r2, #5
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	440a      	add	r2, r1
 8003de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df0:	6053      	str	r3, [r2, #4]
 8003df2:	e0b5      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	334d      	adds	r3, #77	; 0x4d
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d114      	bne.n	8003e34 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	334d      	adds	r3, #77	; 0x4d
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	334c      	adds	r3, #76	; 0x4c
 8003e2e:	2202      	movs	r2, #2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e095      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334d      	adds	r3, #77	; 0x4d
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d114      	bne.n	8003e74 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	334d      	adds	r3, #77	; 0x4d
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	334c      	adds	r3, #76	; 0x4c
 8003e6e:	2205      	movs	r2, #5
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	e075      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	334d      	adds	r3, #77	; 0x4d
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b07      	cmp	r3, #7
 8003e88:	d00a      	beq.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	334d      	adds	r3, #77	; 0x4d
 8003e9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e9c:	2b09      	cmp	r3, #9
 8003e9e:	d170      	bne.n	8003f82 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	334d      	adds	r3, #77	; 0x4d
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3344      	adds	r3, #68	; 0x44
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1c59      	adds	r1, r3, #1
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4403      	add	r3, r0
 8003ed4:	3344      	adds	r3, #68	; 0x44
 8003ed6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3344      	adds	r3, #68	; 0x44
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d914      	bls.n	8003f18 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3344      	adds	r3, #68	; 0x44
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	334c      	adds	r3, #76	; 0x4c
 8003f12:	2204      	movs	r2, #4
 8003f14:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f16:	e022      	b.n	8003f5e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	334c      	adds	r3, #76	; 0x4c
 8003f28:	2202      	movs	r2, #2
 8003f2a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f42:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f4a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f5e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	334c      	adds	r3, #76	; 0x4c
 8003f70:	781a      	ldrb	r2, [r3, #0]
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f005 fcd4 	bl	8009924 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f7c:	e002      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003f82:	bf00      	nop
  }
}
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b08a      	sub	sp, #40	; 0x28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	0c5b      	lsrs	r3, r3, #17
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fbe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d004      	beq.n	8003fd0 <HCD_RXQLVL_IRQHandler+0x46>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	f000 80b6 	beq.w	800413a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003fce:	e0b7      	b.n	8004140 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80b3 	beq.w	800413e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	332c      	adds	r3, #44	; 0x2c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80a7 	beq.w	800413e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3338      	adds	r3, #56	; 0x38
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	18d1      	adds	r1, r2, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4403      	add	r3, r0
 8004014:	3334      	adds	r3, #52	; 0x34
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4299      	cmp	r1, r3
 800401a:	f200 8083 	bhi.w	8004124 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	332c      	adds	r3, #44	; 0x2c
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	b292      	uxth	r2, r2
 8004038:	4619      	mov	r1, r3
 800403a:	f002 fafc 	bl	8006636 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	332c      	adds	r3, #44	; 0x2c
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	18d1      	adds	r1, r2, r3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4403      	add	r3, r0
 8004062:	332c      	adds	r3, #44	; 0x2c
 8004064:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3338      	adds	r3, #56	; 0x38
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	18d1      	adds	r1, r2, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4403      	add	r3, r0
 800408a:	3338      	adds	r3, #56	; 0x38
 800408c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	4413      	add	r3, r2
 8004096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	0cdb      	lsrs	r3, r3, #19
 800409e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	3328      	adds	r3, #40	; 0x28
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d13f      	bne.n	800413e <HCD_RXQLVL_IRQHandler+0x1b4>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d03c      	beq.n	800413e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040da:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040e2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	333c      	adds	r3, #60	; 0x3c
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	f083 0301 	eor.w	r3, r3, #1
 800410c:	b2d8      	uxtb	r0, r3
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	333c      	adds	r3, #60	; 0x3c
 800411e:	4602      	mov	r2, r0
 8004120:	701a      	strb	r2, [r3, #0]
      break;
 8004122:	e00c      	b.n	800413e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4613      	mov	r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	334c      	adds	r3, #76	; 0x4c
 8004134:	2204      	movs	r2, #4
 8004136:	701a      	strb	r2, [r3, #0]
      break;
 8004138:	e001      	b.n	800413e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800413e:	bf00      	nop
  }
}
 8004140:	bf00      	nop
 8004142:	3728      	adds	r7, #40	; 0x28
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004174:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d10b      	bne.n	8004198 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d102      	bne.n	8004190 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f005 fbae 	bl	80098ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d132      	bne.n	8004208 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f043 0308 	orr.w	r3, r3, #8
 80041a8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d126      	bne.n	8004202 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7a5b      	ldrb	r3, [r3, #9]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d113      	bne.n	80041e4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80041c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041c6:	d106      	bne.n	80041d6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f002 fbc0 	bl	8006954 <USB_InitFSLSPClkSel>
 80041d4:	e011      	b.n	80041fa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2101      	movs	r1, #1
 80041dc:	4618      	mov	r0, r3
 80041de:	f002 fbb9 	bl	8006954 <USB_InitFSLSPClkSel>
 80041e2:	e00a      	b.n	80041fa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	79db      	ldrb	r3, [r3, #7]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041f2:	461a      	mov	r2, r3
 80041f4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80041f8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f005 fba0 	bl	8009940 <HAL_HCD_PortEnabled_Callback>
 8004200:	e002      	b.n	8004208 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f005 fbaa 	bl	800995c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b20      	cmp	r3, #32
 8004210:	d103      	bne.n	800421a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f043 0320 	orr.w	r3, r3, #32
 8004218:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6013      	str	r3, [r2, #0]
}
 8004226:	bf00      	nop
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e12b      	b.n	800449a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fdae 	bl	8000db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	; 0x24
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004294:	f001 fe80 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 8004298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4a81      	ldr	r2, [pc, #516]	; (80044a4 <HAL_I2C_Init+0x274>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d807      	bhi.n	80042b4 <HAL_I2C_Init+0x84>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_I2C_Init+0x278>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	bf94      	ite	ls
 80042ac:	2301      	movls	r3, #1
 80042ae:	2300      	movhi	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e006      	b.n	80042c2 <HAL_I2C_Init+0x92>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a7d      	ldr	r2, [pc, #500]	; (80044ac <HAL_I2C_Init+0x27c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	bf94      	ite	ls
 80042bc:	2301      	movls	r3, #1
 80042be:	2300      	movhi	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0e7      	b.n	800449a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a78      	ldr	r2, [pc, #480]	; (80044b0 <HAL_I2C_Init+0x280>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0c9b      	lsrs	r3, r3, #18
 80042d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a6a      	ldr	r2, [pc, #424]	; (80044a4 <HAL_I2C_Init+0x274>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d802      	bhi.n	8004304 <HAL_I2C_Init+0xd4>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	3301      	adds	r3, #1
 8004302:	e009      	b.n	8004318 <HAL_I2C_Init+0xe8>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	4a69      	ldr	r2, [pc, #420]	; (80044b4 <HAL_I2C_Init+0x284>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	3301      	adds	r3, #1
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	430b      	orrs	r3, r1
 800431e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800432a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	495c      	ldr	r1, [pc, #368]	; (80044a4 <HAL_I2C_Init+0x274>)
 8004334:	428b      	cmp	r3, r1
 8004336:	d819      	bhi.n	800436c <HAL_I2C_Init+0x13c>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e59      	subs	r1, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	fbb1 f3f3 	udiv	r3, r1, r3
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800434c:	400b      	ands	r3, r1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_I2C_Init+0x138>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1e59      	subs	r1, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004360:	3301      	adds	r3, #1
 8004362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004366:	e051      	b.n	800440c <HAL_I2C_Init+0x1dc>
 8004368:	2304      	movs	r3, #4
 800436a:	e04f      	b.n	800440c <HAL_I2C_Init+0x1dc>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d111      	bne.n	8004398 <HAL_I2C_Init+0x168>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1e58      	subs	r0, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	440b      	add	r3, r1
 8004382:	fbb0 f3f3 	udiv	r3, r0, r3
 8004386:	3301      	adds	r3, #1
 8004388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e012      	b.n	80043be <HAL_I2C_Init+0x18e>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1e58      	subs	r0, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	0099      	lsls	r1, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Init+0x196>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e022      	b.n	800440c <HAL_I2C_Init+0x1dc>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10e      	bne.n	80043ec <HAL_I2C_Init+0x1bc>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1e58      	subs	r0, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	440b      	add	r3, r1
 80043dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e0:	3301      	adds	r3, #1
 80043e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ea:	e00f      	b.n	800440c <HAL_I2C_Init+0x1dc>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1e58      	subs	r0, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	0099      	lsls	r1, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004402:	3301      	adds	r3, #1
 8004404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	6809      	ldr	r1, [r1, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800443a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6911      	ldr	r1, [r2, #16]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68d2      	ldr	r2, [r2, #12]
 8004446:	4311      	orrs	r1, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	430b      	orrs	r3, r1
 800444e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	000186a0 	.word	0x000186a0
 80044a8:	001e847f 	.word	0x001e847f
 80044ac:	003d08ff 	.word	0x003d08ff
 80044b0:	431bde83 	.word	0x431bde83
 80044b4:	10624dd3 	.word	0x10624dd3

080044b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	461a      	mov	r2, r3
 80044c4:	460b      	mov	r3, r1
 80044c6:	817b      	strh	r3, [r7, #10]
 80044c8:	4613      	mov	r3, r2
 80044ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7fc ff0a 	bl	80012e4 <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b20      	cmp	r3, #32
 80044dc:	f040 80e0 	bne.w	80046a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2319      	movs	r3, #25
 80044e6:	2201      	movs	r2, #1
 80044e8:	4970      	ldr	r1, [pc, #448]	; (80046ac <HAL_I2C_Master_Transmit+0x1f4>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f964 	bl	80047b8 <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
 80044f8:	e0d3      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_I2C_Master_Transmit+0x50>
 8004504:	2302      	movs	r3, #2
 8004506:	e0cc      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d007      	beq.n	800452e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800453c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2221      	movs	r2, #33	; 0x21
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2210      	movs	r2, #16
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	893a      	ldrh	r2, [r7, #8]
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a50      	ldr	r2, [pc, #320]	; (80046b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004570:	8979      	ldrh	r1, [r7, #10]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f89c 	bl	80046b4 <I2C_MasterRequestWrite>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e08d      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800459c:	e066      	b.n	800466c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	6a39      	ldr	r1, [r7, #32]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fa22 	bl	80049ec <I2C_WaitOnTXEFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00d      	beq.n	80045ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d107      	bne.n	80045c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e06b      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d11b      	bne.n	8004640 <HAL_I2C_Master_Transmit+0x188>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	d017      	beq.n	8004640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	6a39      	ldr	r1, [r7, #32]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fa19 	bl	8004a7c <I2C_WaitOnBTFFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00d      	beq.n	800466c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b04      	cmp	r3, #4
 8004656:	d107      	bne.n	8004668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e01a      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d194      	bne.n	800459e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	00100002 	.word	0x00100002
 80046b0:	ffff0000 	.word	0xffff0000

080046b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	460b      	mov	r3, r1
 80046c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d006      	beq.n	80046de <I2C_MasterRequestWrite+0x2a>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d003      	beq.n	80046de <I2C_MasterRequestWrite+0x2a>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046dc:	d108      	bne.n	80046f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e00b      	b.n	8004708 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	2b12      	cmp	r3, #18
 80046f6:	d107      	bne.n	8004708 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f84f 	bl	80047b8 <I2C_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472e:	d103      	bne.n	8004738 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e035      	b.n	80047a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004744:	d108      	bne.n	8004758 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004746:	897b      	ldrh	r3, [r7, #10]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004754:	611a      	str	r2, [r3, #16]
 8004756:	e01b      	b.n	8004790 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004758:	897b      	ldrh	r3, [r7, #10]
 800475a:	11db      	asrs	r3, r3, #7
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0306 	and.w	r3, r3, #6
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f063 030f 	orn	r3, r3, #15
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	490e      	ldr	r1, [pc, #56]	; (80047b0 <I2C_MasterRequestWrite+0xfc>)
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f898 	bl	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e010      	b.n	80047a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004786:	897b      	ldrh	r3, [r7, #10]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4907      	ldr	r1, [pc, #28]	; (80047b4 <I2C_MasterRequestWrite+0x100>)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f888 	bl	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	00010008 	.word	0x00010008
 80047b4:	00010002 	.word	0x00010002

080047b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c8:	e048      	b.n	800485c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d044      	beq.n	800485c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d2:	f7fc fd87 	bl	80012e4 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d139      	bne.n	800485c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	0c1b      	lsrs	r3, r3, #16
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d10d      	bne.n	800480e <I2C_WaitOnFlagUntilTimeout+0x56>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	43da      	mvns	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4013      	ands	r3, r2
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	e00c      	b.n	8004828 <I2C_WaitOnFlagUntilTimeout+0x70>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	43da      	mvns	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4013      	ands	r3, r2
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	429a      	cmp	r2, r3
 800482c:	d116      	bne.n	800485c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e023      	b.n	80048a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10d      	bne.n	8004882 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	43da      	mvns	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	e00c      	b.n	800489c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	43da      	mvns	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d093      	beq.n	80047ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ba:	e071      	b.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ca:	d123      	bne.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	f043 0204 	orr.w	r2, r3, #4
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e067      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d041      	beq.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491c:	f7fc fce2 	bl	80012e4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d302      	bcc.n	8004932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d136      	bne.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10c      	bne.n	8004956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	43da      	mvns	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	e00b      	b.n	800496e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	43da      	mvns	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e021      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	0c1b      	lsrs	r3, r3, #16
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10c      	bne.n	80049c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	43da      	mvns	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4013      	ands	r3, r2
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bf14      	ite	ne
 80049bc:	2301      	movne	r3, #1
 80049be:	2300      	moveq	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e00b      	b.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	43da      	mvns	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bf14      	ite	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	2300      	moveq	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f af6d 	bne.w	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f8:	e034      	b.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f886 	bl	8004b0c <I2C_IsAcknowledgeFailed>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e034      	b.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d028      	beq.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fc fc67 	bl	80012e4 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11d      	bne.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d016      	beq.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e007      	b.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b80      	cmp	r3, #128	; 0x80
 8004a70:	d1c3      	bne.n	80049fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a88:	e034      	b.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f83e 	bl	8004b0c <I2C_IsAcknowledgeFailed>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e034      	b.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d028      	beq.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fc fc1f 	bl	80012e4 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11d      	bne.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d016      	beq.n	8004af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e007      	b.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d1c3      	bne.n	8004a8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b22:	d11b      	bne.n	8004b5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f043 0204 	orr.w	r2, r3, #4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e128      	b.n	8004dd0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a90      	ldr	r2, [pc, #576]	; (8004dd8 <HAL_I2S_Init+0x26c>)
 8004b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc f965 	bl	8000e68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bb4:	f023 030f 	bic.w	r3, r3, #15
 8004bb8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d060      	beq.n	8004c8c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e001      	b.n	8004bdc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004bd8:	2320      	movs	r3, #32
 8004bda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	d802      	bhi.n	8004bea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004bea:	2001      	movs	r0, #1
 8004bec:	f001 faca 	bl	8006184 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bf0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfa:	d125      	bne.n	8004c48 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	3305      	adds	r3, #5
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	e01f      	b.n	8004c66 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	461a      	mov	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	3305      	adds	r3, #5
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e00e      	b.n	8004c66 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	3305      	adds	r3, #5
 8004c64:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4a5c      	ldr	r2, [pc, #368]	; (8004ddc <HAL_I2S_Init+0x270>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	08db      	lsrs	r3, r3, #3
 8004c70:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	e003      	b.n	8004c94 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d902      	bls.n	8004ca0 <HAL_I2S_Init+0x134>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2bff      	cmp	r3, #255	; 0xff
 8004c9e:	d907      	bls.n	8004cb0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	f043 0210 	orr.w	r2, r3, #16
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e08f      	b.n	8004dd0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	ea42 0103 	orr.w	r1, r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cce:	f023 030f 	bic.w	r3, r3, #15
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6851      	ldr	r1, [r2, #4]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6892      	ldr	r2, [r2, #8]
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68d2      	ldr	r2, [r2, #12]
 8004ce0:	4311      	orrs	r1, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6992      	ldr	r2, [r2, #24]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d161      	bne.n	8004dc0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a38      	ldr	r2, [pc, #224]	; (8004de0 <HAL_I2S_Init+0x274>)
 8004d00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a37      	ldr	r2, [pc, #220]	; (8004de4 <HAL_I2S_Init+0x278>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2S_Init+0x1a4>
 8004d0c:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <HAL_I2S_Init+0x27c>)
 8004d0e:	e001      	b.n	8004d14 <HAL_I2S_Init+0x1a8>
 8004d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	4932      	ldr	r1, [pc, #200]	; (8004de4 <HAL_I2S_Init+0x278>)
 8004d1c:	428a      	cmp	r2, r1
 8004d1e:	d101      	bne.n	8004d24 <HAL_I2S_Init+0x1b8>
 8004d20:	4a31      	ldr	r2, [pc, #196]	; (8004de8 <HAL_I2S_Init+0x27c>)
 8004d22:	e001      	b.n	8004d28 <HAL_I2S_Init+0x1bc>
 8004d24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004d28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d2c:	f023 030f 	bic.w	r3, r3, #15
 8004d30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <HAL_I2S_Init+0x278>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d101      	bne.n	8004d40 <HAL_I2S_Init+0x1d4>
 8004d3c:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <HAL_I2S_Init+0x27c>)
 8004d3e:	e001      	b.n	8004d44 <HAL_I2S_Init+0x1d8>
 8004d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d44:	2202      	movs	r2, #2
 8004d46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a25      	ldr	r2, [pc, #148]	; (8004de4 <HAL_I2S_Init+0x278>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_I2S_Init+0x1ea>
 8004d52:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <HAL_I2S_Init+0x27c>)
 8004d54:	e001      	b.n	8004d5a <HAL_I2S_Init+0x1ee>
 8004d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d66:	d003      	beq.n	8004d70 <HAL_I2S_Init+0x204>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e001      	b.n	8004d7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d86:	4313      	orrs	r3, r2
 8004d88:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	897b      	ldrh	r3, [r7, #10]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004da8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a0d      	ldr	r2, [pc, #52]	; (8004de4 <HAL_I2S_Init+0x278>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d101      	bne.n	8004db8 <HAL_I2S_Init+0x24c>
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <HAL_I2S_Init+0x27c>)
 8004db6:	e001      	b.n	8004dbc <HAL_I2S_Init+0x250>
 8004db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dbc:	897a      	ldrh	r2, [r7, #10]
 8004dbe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	080050f1 	.word	0x080050f1
 8004ddc:	cccccccd 	.word	0xcccccccd
 8004de0:	08005205 	.word	0x08005205
 8004de4:	40003800 	.word	0x40003800
 8004de8:	40003400 	.word	0x40003400

08004dec <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_I2S_Transmit_DMA+0x1a>
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e08e      	b.n	8004f28 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_I2S_Transmit_DMA+0x2e>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e086      	b.n	8004f28 <HAL_I2S_Transmit_DMA+0x13c>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d005      	beq.n	8004e3a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
 8004e38:	e076      	b.n	8004f28 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d002      	beq.n	8004e66 <HAL_I2S_Transmit_DMA+0x7a>
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d10a      	bne.n	8004e7c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e7a:	e005      	b.n	8004e88 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <HAL_I2S_Transmit_DMA+0x144>)
 8004e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	4a27      	ldr	r2, [pc, #156]	; (8004f34 <HAL_I2S_Transmit_DMA+0x148>)
 8004e96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	4a26      	ldr	r2, [pc, #152]	; (8004f38 <HAL_I2S_Transmit_DMA+0x14c>)
 8004e9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004ea8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004eb0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004eb8:	f7fc fc04 	bl	80016c4 <HAL_DMA_Start_IT>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00f      	beq.n	8004ee2 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f043 0208 	orr.w	r2, r3, #8
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e022      	b.n	8004f28 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d107      	bne.n	8004f00 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69da      	ldr	r2, [r3, #28]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004efe:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d107      	bne.n	8004f1e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0202 	orr.w	r2, r2, #2
 8004f1c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	08004fcf 	.word	0x08004fcf
 8004f34:	08004f8d 	.word	0x08004f8d
 8004f38:	08004feb 	.word	0x08004feb

08004f3c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10e      	bne.n	8004fc0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0202 	bic.w	r2, r2, #2
 8004fb0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff ffc5 	bl	8004f50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff ffad 	bl	8004f3c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0203 	bic.w	r2, r2, #3
 8005006:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005020:	f043 0208 	orr.w	r2, r3, #8
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff ffa5 	bl	8004f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	881a      	ldrh	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	1c9a      	adds	r2, r3, #2
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10e      	bne.n	800508a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800507a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff63 	bl	8004f50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	b292      	uxth	r2, r2
 80050a6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	1c9a      	adds	r2, r3, #2
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10e      	bne.n	80050e8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff ff3e 	bl	8004f64 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b04      	cmp	r3, #4
 800510a:	d13a      	bne.n	8005182 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d109      	bne.n	800512a <I2S_IRQHandler+0x3a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d102      	bne.n	800512a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff ffb4 	bl	8005092 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d126      	bne.n	8005182 <I2S_IRQHandler+0x92>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b20      	cmp	r3, #32
 8005140:	d11f      	bne.n	8005182 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005150:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005174:	f043 0202 	orr.w	r2, r3, #2
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fefb 	bl	8004f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b03      	cmp	r3, #3
 800518c:	d136      	bne.n	80051fc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b02      	cmp	r3, #2
 8005196:	d109      	bne.n	80051ac <I2S_IRQHandler+0xbc>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d102      	bne.n	80051ac <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff ff45 	bl	8005036 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d122      	bne.n	80051fc <I2S_IRQHandler+0x10c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d11b      	bne.n	80051fc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051d2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	f043 0204 	orr.w	r2, r3, #4
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff febe 	bl	8004f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051fc:	bf00      	nop
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a92      	ldr	r2, [pc, #584]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800521e:	4b92      	ldr	r3, [pc, #584]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005220:	e001      	b.n	8005226 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005222:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a8b      	ldr	r2, [pc, #556]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d101      	bne.n	8005240 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800523c:	4b8a      	ldr	r3, [pc, #552]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800523e:	e001      	b.n	8005244 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005250:	d004      	beq.n	800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f040 8099 	bne.w	800538e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f925 	bl	80054c0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d107      	bne.n	8005290 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9c8 	bl	8005620 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005296:	2b40      	cmp	r3, #64	; 0x40
 8005298:	d13a      	bne.n	8005310 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d035      	beq.n	8005310 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a6e      	ldr	r2, [pc, #440]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d101      	bne.n	80052b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80052ae:	4b6e      	ldr	r3, [pc, #440]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052b0:	e001      	b.n	80052b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80052b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4969      	ldr	r1, [pc, #420]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052be:	428b      	cmp	r3, r1
 80052c0:	d101      	bne.n	80052c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80052c2:	4b69      	ldr	r3, [pc, #420]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052c4:	e001      	b.n	80052ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80052c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	f043 0202 	orr.w	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fe34 	bl	8004f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b08      	cmp	r3, #8
 8005318:	f040 80c3 	bne.w	80054a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80bd 	beq.w	80054a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005336:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a49      	ldr	r2, [pc, #292]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005342:	4b49      	ldr	r3, [pc, #292]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005344:	e001      	b.n	800534a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4944      	ldr	r1, [pc, #272]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005352:	428b      	cmp	r3, r1
 8005354:	d101      	bne.n	800535a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005356:	4b44      	ldr	r3, [pc, #272]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005358:	e001      	b.n	800535e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800535a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800535e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005362:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005364:	2300      	movs	r3, #0
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	f043 0204 	orr.w	r2, r3, #4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fdf6 	bl	8004f78 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800538c:	e089      	b.n	80054a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b02      	cmp	r3, #2
 8005396:	d107      	bne.n	80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8be 	bl	8005524 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d107      	bne.n	80053c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f8fd 	bl	80055bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d12f      	bne.n	800542c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d02a      	beq.n	800542c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053e4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80053f0:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053f2:	e001      	b.n	80053f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80053f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4919      	ldr	r1, [pc, #100]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005400:	428b      	cmp	r3, r1
 8005402:	d101      	bne.n	8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005404:	4b18      	ldr	r3, [pc, #96]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005406:	e001      	b.n	800540c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005408:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800540c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005410:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	f043 0202 	orr.w	r2, r3, #2
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fda6 	bl	8004f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b08      	cmp	r3, #8
 8005434:	d136      	bne.n	80054a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d031      	beq.n	80054a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a07      	ldr	r2, [pc, #28]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800544c:	e001      	b.n	8005452 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800544e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4902      	ldr	r1, [pc, #8]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800545a:	428b      	cmp	r3, r1
 800545c:	d106      	bne.n	800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800545e:	4b02      	ldr	r3, [pc, #8]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005460:	e006      	b.n	8005470 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005462:	bf00      	nop
 8005464:	40003800 	.word	0x40003800
 8005468:	40003400 	.word	0x40003400
 800546c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005470:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005474:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005484:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	f043 0204 	orr.w	r2, r3, #4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fd6c 	bl	8004f78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054a0:	e000      	b.n	80054a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80054a2:	bf00      	nop
}
 80054a4:	bf00      	nop
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	1c99      	adds	r1, r3, #2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6251      	str	r1, [r2, #36]	; 0x24
 80054d2:	881a      	ldrh	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d113      	bne.n	800551a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005500:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff ffc9 	bl	80054ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	1c99      	adds	r1, r3, #2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6251      	str	r1, [r2, #36]	; 0x24
 8005536:	8819      	ldrh	r1, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <I2SEx_TxISR_I2SExt+0x90>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d101      	bne.n	8005546 <I2SEx_TxISR_I2SExt+0x22>
 8005542:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <I2SEx_TxISR_I2SExt+0x94>)
 8005544:	e001      	b.n	800554a <I2SEx_TxISR_I2SExt+0x26>
 8005546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800554a:	460a      	mov	r2, r1
 800554c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d121      	bne.n	80055aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a12      	ldr	r2, [pc, #72]	; (80055b4 <I2SEx_TxISR_I2SExt+0x90>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d101      	bne.n	8005574 <I2SEx_TxISR_I2SExt+0x50>
 8005570:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <I2SEx_TxISR_I2SExt+0x94>)
 8005572:	e001      	b.n	8005578 <I2SEx_TxISR_I2SExt+0x54>
 8005574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	490d      	ldr	r1, [pc, #52]	; (80055b4 <I2SEx_TxISR_I2SExt+0x90>)
 8005580:	428b      	cmp	r3, r1
 8005582:	d101      	bne.n	8005588 <I2SEx_TxISR_I2SExt+0x64>
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <I2SEx_TxISR_I2SExt+0x94>)
 8005586:	e001      	b.n	800558c <I2SEx_TxISR_I2SExt+0x68>
 8005588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800558c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005590:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d106      	bne.n	80055aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ff81 	bl	80054ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40003800 	.word	0x40003800
 80055b8:	40003400 	.word	0x40003400

080055bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68d8      	ldr	r0, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	1c99      	adds	r1, r3, #2
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80055d4:	b282      	uxth	r2, r0
 80055d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d113      	bne.n	8005618 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff ff4a 	bl	80054ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <I2SEx_RxISR_I2SExt+0x90>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d101      	bne.n	8005636 <I2SEx_RxISR_I2SExt+0x16>
 8005632:	4b20      	ldr	r3, [pc, #128]	; (80056b4 <I2SEx_RxISR_I2SExt+0x94>)
 8005634:	e001      	b.n	800563a <I2SEx_RxISR_I2SExt+0x1a>
 8005636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800563a:	68d8      	ldr	r0, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	1c99      	adds	r1, r3, #2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005646:	b282      	uxth	r2, r0
 8005648:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d121      	bne.n	80056a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a12      	ldr	r2, [pc, #72]	; (80056b0 <I2SEx_RxISR_I2SExt+0x90>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d101      	bne.n	8005670 <I2SEx_RxISR_I2SExt+0x50>
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <I2SEx_RxISR_I2SExt+0x94>)
 800566e:	e001      	b.n	8005674 <I2SEx_RxISR_I2SExt+0x54>
 8005670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	490d      	ldr	r1, [pc, #52]	; (80056b0 <I2SEx_RxISR_I2SExt+0x90>)
 800567c:	428b      	cmp	r3, r1
 800567e:	d101      	bne.n	8005684 <I2SEx_RxISR_I2SExt+0x64>
 8005680:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <I2SEx_RxISR_I2SExt+0x94>)
 8005682:	e001      	b.n	8005688 <I2SEx_RxISR_I2SExt+0x68>
 8005684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005688:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800568c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ff03 	bl	80054ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40003800 	.word	0x40003800
 80056b4:	40003400 	.word	0x40003400

080056b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e267      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d075      	beq.n	80057c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056d6:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d00c      	beq.n	80056fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e2:	4b85      	ldr	r3, [pc, #532]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d112      	bne.n	8005714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ee:	4b82      	ldr	r3, [pc, #520]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fa:	d10b      	bne.n	8005714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fc:	4b7e      	ldr	r3, [pc, #504]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d05b      	beq.n	80057c0 <HAL_RCC_OscConfig+0x108>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d157      	bne.n	80057c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e242      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571c:	d106      	bne.n	800572c <HAL_RCC_OscConfig+0x74>
 800571e:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	e01d      	b.n	8005768 <HAL_RCC_OscConfig+0xb0>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005734:	d10c      	bne.n	8005750 <HAL_RCC_OscConfig+0x98>
 8005736:	4b70      	ldr	r3, [pc, #448]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a6f      	ldr	r2, [pc, #444]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800573c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	4b6d      	ldr	r3, [pc, #436]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a6c      	ldr	r2, [pc, #432]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	e00b      	b.n	8005768 <HAL_RCC_OscConfig+0xb0>
 8005750:	4b69      	ldr	r3, [pc, #420]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a68      	ldr	r2, [pc, #416]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	4b66      	ldr	r3, [pc, #408]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a65      	ldr	r2, [pc, #404]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d013      	beq.n	8005798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005770:	f7fb fdb8 	bl	80012e4 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005778:	f7fb fdb4 	bl	80012e4 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b64      	cmp	r3, #100	; 0x64
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e207      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578a:	4b5b      	ldr	r3, [pc, #364]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0xc0>
 8005796:	e014      	b.n	80057c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7fb fda4 	bl	80012e4 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057a0:	f7fb fda0 	bl	80012e4 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b64      	cmp	r3, #100	; 0x64
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e1f3      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b2:	4b51      	ldr	r3, [pc, #324]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0xe8>
 80057be:	e000      	b.n	80057c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d063      	beq.n	8005896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057ce:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d11c      	bne.n	8005820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e6:	4b44      	ldr	r3, [pc, #272]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d116      	bne.n	8005820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f2:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_RCC_OscConfig+0x152>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d001      	beq.n	800580a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e1c7      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580a:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4937      	ldr	r1, [pc, #220]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800581a:	4313      	orrs	r3, r2
 800581c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581e:	e03a      	b.n	8005896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d020      	beq.n	800586a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005828:	4b34      	ldr	r3, [pc, #208]	; (80058fc <HAL_RCC_OscConfig+0x244>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fb fd59 	bl	80012e4 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005836:	f7fb fd55 	bl	80012e4 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e1a8      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005848:	4b2b      	ldr	r3, [pc, #172]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005854:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4925      	ldr	r1, [pc, #148]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005864:	4313      	orrs	r3, r2
 8005866:	600b      	str	r3, [r1, #0]
 8005868:	e015      	b.n	8005896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800586a:	4b24      	ldr	r3, [pc, #144]	; (80058fc <HAL_RCC_OscConfig+0x244>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fb fd38 	bl	80012e4 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005878:	f7fb fd34 	bl	80012e4 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e187      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d036      	beq.n	8005910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058aa:	4b15      	ldr	r3, [pc, #84]	; (8005900 <HAL_RCC_OscConfig+0x248>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fb fd18 	bl	80012e4 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b8:	f7fb fd14 	bl	80012e4 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e167      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80058cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x200>
 80058d6:	e01b      	b.n	8005910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d8:	4b09      	ldr	r3, [pc, #36]	; (8005900 <HAL_RCC_OscConfig+0x248>)
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058de:	f7fb fd01 	bl	80012e4 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e4:	e00e      	b.n	8005904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e6:	f7fb fcfd 	bl	80012e4 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d907      	bls.n	8005904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e150      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
 80058f8:	40023800 	.word	0x40023800
 80058fc:	42470000 	.word	0x42470000
 8005900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005904:	4b88      	ldr	r3, [pc, #544]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1ea      	bne.n	80058e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8097 	beq.w	8005a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005922:	4b81      	ldr	r3, [pc, #516]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10f      	bne.n	800594e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	4b7d      	ldr	r3, [pc, #500]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	4a7c      	ldr	r2, [pc, #496]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593c:	6413      	str	r3, [r2, #64]	; 0x40
 800593e:	4b7a      	ldr	r3, [pc, #488]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594e:	4b77      	ldr	r3, [pc, #476]	; (8005b2c <HAL_RCC_OscConfig+0x474>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d118      	bne.n	800598c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800595a:	4b74      	ldr	r3, [pc, #464]	; (8005b2c <HAL_RCC_OscConfig+0x474>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a73      	ldr	r2, [pc, #460]	; (8005b2c <HAL_RCC_OscConfig+0x474>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005966:	f7fb fcbd 	bl	80012e4 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596e:	f7fb fcb9 	bl	80012e4 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e10c      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005980:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <HAL_RCC_OscConfig+0x474>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d106      	bne.n	80059a2 <HAL_RCC_OscConfig+0x2ea>
 8005994:	4b64      	ldr	r3, [pc, #400]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	4a63      	ldr	r2, [pc, #396]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
 80059a0:	e01c      	b.n	80059dc <HAL_RCC_OscConfig+0x324>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0x30c>
 80059aa:	4b5f      	ldr	r3, [pc, #380]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	4a5e      	ldr	r2, [pc, #376]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059b0:	f043 0304 	orr.w	r3, r3, #4
 80059b4:	6713      	str	r3, [r2, #112]	; 0x70
 80059b6:	4b5c      	ldr	r3, [pc, #368]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	4a5b      	ldr	r2, [pc, #364]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0x324>
 80059c4:	4b58      	ldr	r3, [pc, #352]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c8:	4a57      	ldr	r2, [pc, #348]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	6713      	str	r3, [r2, #112]	; 0x70
 80059d0:	4b55      	ldr	r3, [pc, #340]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d4:	4a54      	ldr	r2, [pc, #336]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059d6:	f023 0304 	bic.w	r3, r3, #4
 80059da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d015      	beq.n	8005a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fb fc7e 	bl	80012e4 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ec:	f7fb fc7a 	bl	80012e4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e0cb      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a02:	4b49      	ldr	r3, [pc, #292]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0ee      	beq.n	80059ec <HAL_RCC_OscConfig+0x334>
 8005a0e:	e014      	b.n	8005a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a10:	f7fb fc68 	bl	80012e4 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a16:	e00a      	b.n	8005a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a18:	f7fb fc64 	bl	80012e4 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e0b5      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2e:	4b3e      	ldr	r3, [pc, #248]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1ee      	bne.n	8005a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a40:	4b39      	ldr	r3, [pc, #228]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	4a38      	ldr	r2, [pc, #224]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80a1 	beq.w	8005b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a56:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d05c      	beq.n	8005b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d141      	bne.n	8005aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6a:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <HAL_RCC_OscConfig+0x478>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a70:	f7fb fc38 	bl	80012e4 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fb fc34 	bl	80012e4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e087      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8a:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	019b      	lsls	r3, r3, #6
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	061b      	lsls	r3, r3, #24
 8005aba:	491b      	ldr	r1, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac0:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <HAL_RCC_OscConfig+0x478>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac6:	f7fb fc0d 	bl	80012e4 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ace:	f7fb fc09 	bl	80012e4 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e05c      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae0:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0f0      	beq.n	8005ace <HAL_RCC_OscConfig+0x416>
 8005aec:	e054      	b.n	8005b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_RCC_OscConfig+0x478>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af4:	f7fb fbf6 	bl	80012e4 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fb fbf2 	bl	80012e4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e045      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f0      	bne.n	8005afc <HAL_RCC_OscConfig+0x444>
 8005b1a:	e03d      	b.n	8005b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e038      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	40007000 	.word	0x40007000
 8005b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <HAL_RCC_OscConfig+0x4ec>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d028      	beq.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d121      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d11a      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b64:	4013      	ands	r3, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d111      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d001      	beq.n	8005b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0cc      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bbc:	4b68      	ldr	r3, [pc, #416]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d90c      	bls.n	8005be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bca:	4b65      	ldr	r3, [pc, #404]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd2:	4b63      	ldr	r3, [pc, #396]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0b8      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d020      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bfc:	4b59      	ldr	r3, [pc, #356]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4a58      	ldr	r2, [pc, #352]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c14:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a52      	ldr	r2, [pc, #328]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c20:	4b50      	ldr	r3, [pc, #320]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	494d      	ldr	r1, [pc, #308]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d044      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d107      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c46:	4b47      	ldr	r3, [pc, #284]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d119      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e07f      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d003      	beq.n	8005c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d107      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c66:	4b3f      	ldr	r3, [pc, #252]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e06f      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c76:	4b3b      	ldr	r3, [pc, #236]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e067      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c86:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f023 0203 	bic.w	r2, r3, #3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	4934      	ldr	r1, [pc, #208]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c98:	f7fb fb24 	bl	80012e4 <HAL_GetTick>
 8005c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9e:	e00a      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca0:	f7fb fb20 	bl	80012e4 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e04f      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb6:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 020c 	and.w	r2, r3, #12
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d1eb      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d20c      	bcs.n	8005cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cde:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d001      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e032      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cfc:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4916      	ldr	r1, [pc, #88]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	490e      	ldr	r1, [pc, #56]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d2e:	f000 f821 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8005d32:	4602      	mov	r2, r0
 8005d34:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	091b      	lsrs	r3, r3, #4
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	490a      	ldr	r1, [pc, #40]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005d40:	5ccb      	ldrb	r3, [r1, r3]
 8005d42:	fa22 f303 	lsr.w	r3, r2, r3
 8005d46:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fb fa84 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40023c00 	.word	0x40023c00
 8005d64:	40023800 	.word	0x40023800
 8005d68:	0800a130 	.word	0x0800a130
 8005d6c:	20000004 	.word	0x20000004
 8005d70:	20000008 	.word	0x20000008

08005d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d78:	b094      	sub	sp, #80	; 0x50
 8005d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d80:	2300      	movs	r3, #0
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d84:	2300      	movs	r3, #0
 8005d86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d8c:	4b79      	ldr	r3, [pc, #484]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d00d      	beq.n	8005db4 <HAL_RCC_GetSysClockFreq+0x40>
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	f200 80e1 	bhi.w	8005f60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0x34>
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d003      	beq.n	8005dae <HAL_RCC_GetSysClockFreq+0x3a>
 8005da6:	e0db      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005da8:	4b73      	ldr	r3, [pc, #460]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8005daa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005dac:	e0db      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dae:	4b73      	ldr	r3, [pc, #460]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x208>)
 8005db0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005db2:	e0d8      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005db4:	4b6f      	ldr	r3, [pc, #444]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dbe:	4b6d      	ldr	r3, [pc, #436]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d063      	beq.n	8005e92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dca:	4b6a      	ldr	r3, [pc, #424]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	099b      	lsrs	r3, r3, #6
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dde:	2300      	movs	r3, #0
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
 8005de2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	f04f 0000 	mov.w	r0, #0
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	0159      	lsls	r1, r3, #5
 8005df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df8:	0150      	lsls	r0, r2, #5
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4621      	mov	r1, r4
 8005e00:	1a51      	subs	r1, r2, r1
 8005e02:	6139      	str	r1, [r7, #16]
 8005e04:	4629      	mov	r1, r5
 8005e06:	eb63 0301 	sbc.w	r3, r3, r1
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e18:	4659      	mov	r1, fp
 8005e1a:	018b      	lsls	r3, r1, #6
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e22:	4651      	mov	r1, sl
 8005e24:	018a      	lsls	r2, r1, #6
 8005e26:	4651      	mov	r1, sl
 8005e28:	ebb2 0801 	subs.w	r8, r2, r1
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	eb63 0901 	sbc.w	r9, r3, r1
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e46:	4690      	mov	r8, r2
 8005e48:	4699      	mov	r9, r3
 8005e4a:	4623      	mov	r3, r4
 8005e4c:	eb18 0303 	adds.w	r3, r8, r3
 8005e50:	60bb      	str	r3, [r7, #8]
 8005e52:	462b      	mov	r3, r5
 8005e54:	eb49 0303 	adc.w	r3, r9, r3
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e66:	4629      	mov	r1, r5
 8005e68:	024b      	lsls	r3, r1, #9
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e70:	4621      	mov	r1, r4
 8005e72:	024a      	lsls	r2, r1, #9
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e84:	f7fa f9a0 	bl	80001c8 <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e90:	e058      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e92:	4b38      	ldr	r3, [pc, #224]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	f04f 0000 	mov.w	r0, #0
 8005eb4:	f04f 0100 	mov.w	r1, #0
 8005eb8:	0159      	lsls	r1, r3, #5
 8005eba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ebe:	0150      	lsls	r0, r2, #5
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005eca:	4649      	mov	r1, r9
 8005ecc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005edc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ee0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ee4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ee8:	eb63 050b 	sbc.w	r5, r3, fp
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	00eb      	lsls	r3, r5, #3
 8005ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005efa:	00e2      	lsls	r2, r4, #3
 8005efc:	4614      	mov	r4, r2
 8005efe:	461d      	mov	r5, r3
 8005f00:	4643      	mov	r3, r8
 8005f02:	18e3      	adds	r3, r4, r3
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	464b      	mov	r3, r9
 8005f08:	eb45 0303 	adc.w	r3, r5, r3
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	028b      	lsls	r3, r1, #10
 8005f1e:	4621      	mov	r1, r4
 8005f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f24:	4621      	mov	r1, r4
 8005f26:	028a      	lsls	r2, r1, #10
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2e:	2200      	movs	r2, #0
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	61fa      	str	r2, [r7, #28]
 8005f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f38:	f7fa f946 	bl	80001c8 <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4613      	mov	r3, r2
 8005f42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	0c1b      	lsrs	r3, r3, #16
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	3301      	adds	r3, #1
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f5e:	e002      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3750      	adds	r7, #80	; 0x50
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f72:	bf00      	nop
 8005f74:	40023800 	.word	0x40023800
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	007a1200 	.word	0x007a1200

08005f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f86:	681b      	ldr	r3, [r3, #0]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000004 	.word	0x20000004

08005f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f9c:	f7ff fff0 	bl	8005f80 <HAL_RCC_GetHCLKFreq>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	0a9b      	lsrs	r3, r3, #10
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	4903      	ldr	r1, [pc, #12]	; (8005fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fae:	5ccb      	ldrb	r3, [r1, r3]
 8005fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	0800a140 	.word	0x0800a140

08005fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d105      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d035      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fe8:	4b62      	ldr	r3, [pc, #392]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fee:	f7fb f979 	bl	80012e4 <HAL_GetTick>
 8005ff2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ff4:	e008      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ff6:	f7fb f975 	bl	80012e4 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e0b0      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006008:	4b5b      	ldr	r3, [pc, #364]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1f0      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	019a      	lsls	r2, r3, #6
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	071b      	lsls	r3, r3, #28
 8006020:	4955      	ldr	r1, [pc, #340]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006028:	4b52      	ldr	r3, [pc, #328]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800602a:	2201      	movs	r2, #1
 800602c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800602e:	f7fb f959 	bl	80012e4 <HAL_GetTick>
 8006032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006036:	f7fb f955 	bl	80012e4 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e090      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006048:	4b4b      	ldr	r3, [pc, #300]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0f0      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8083 	beq.w	8006168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	4b44      	ldr	r3, [pc, #272]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	4a43      	ldr	r2, [pc, #268]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800606c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006070:	6413      	str	r3, [r2, #64]	; 0x40
 8006072:	4b41      	ldr	r3, [pc, #260]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800607e:	4b3f      	ldr	r3, [pc, #252]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a3e      	ldr	r2, [pc, #248]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006088:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800608a:	f7fb f92b 	bl	80012e4 <HAL_GetTick>
 800608e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006090:	e008      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006092:	f7fb f927 	bl	80012e4 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e062      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060a4:	4b35      	ldr	r3, [pc, #212]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060b0:	4b31      	ldr	r3, [pc, #196]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d02f      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d028      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060ce:	4b2a      	ldr	r3, [pc, #168]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060d8:	4b29      	ldr	r3, [pc, #164]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80060da:	2201      	movs	r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060de:	4b28      	ldr	r3, [pc, #160]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80060e4:	4a24      	ldr	r2, [pc, #144]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060ea:	4b23      	ldr	r3, [pc, #140]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d114      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80060f6:	f7fb f8f5 	bl	80012e4 <HAL_GetTick>
 80060fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060fc:	e00a      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fb f8f1 	bl	80012e4 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e02a      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006114:	4b18      	ldr	r3, [pc, #96]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0ee      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800612c:	d10d      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800612e:	4b12      	ldr	r3, [pc, #72]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800613e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006142:	490d      	ldr	r1, [pc, #52]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006144:	4313      	orrs	r3, r2
 8006146:	608b      	str	r3, [r1, #8]
 8006148:	e005      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800614a:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006150:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006154:	6093      	str	r3, [r2, #8]
 8006156:	4b08      	ldr	r3, [pc, #32]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006162:	4905      	ldr	r1, [pc, #20]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006164:	4313      	orrs	r3, r2
 8006166:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	42470068 	.word	0x42470068
 8006178:	40023800 	.word	0x40023800
 800617c:	40007000 	.word	0x40007000
 8006180:	42470e40 	.word	0x42470e40

08006184 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d13f      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80061a2:	4b24      	ldr	r3, [pc, #144]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d006      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061b8:	d12f      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80061ba:	4b1f      	ldr	r3, [pc, #124]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80061bc:	617b      	str	r3, [r7, #20]
          break;
 80061be:	e02f      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80061c0:	4b1c      	ldr	r3, [pc, #112]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061cc:	d108      	bne.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061ce:	4b19      	ldr	r3, [pc, #100]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d6:	4a19      	ldr	r2, [pc, #100]	; (800623c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80061d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e007      	b.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061e0:	4b14      	ldr	r3, [pc, #80]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061e8:	4a15      	ldr	r2, [pc, #84]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80061ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ee:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80061f0:	4b10      	ldr	r3, [pc, #64]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f6:	099b      	lsrs	r3, r3, #6
 80061f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006204:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620a:	0f1b      	lsrs	r3, r3, #28
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	fbb2 f3f3 	udiv	r3, r2, r3
 8006216:	617b      	str	r3, [r7, #20]
          break;
 8006218:	e002      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	617b      	str	r3, [r7, #20]
          break;
 800621e:	bf00      	nop
        }
      }
      break;
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8006222:	bf00      	nop
    }
  }
  return frequency;
 8006224:	697b      	ldr	r3, [r7, #20]
}
 8006226:	4618      	mov	r0, r3
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800
 8006238:	00bb8000 	.word	0x00bb8000
 800623c:	007a1200 	.word	0x007a1200
 8006240:	00f42400 	.word	0x00f42400

08006244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e07b      	b.n	800634e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d108      	bne.n	8006270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006266:	d009      	beq.n	800627c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	61da      	str	r2, [r3, #28]
 800626e:	e005      	b.n	800627c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fa fea4 	bl	8000fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	ea42 0103 	orr.w	r1, r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	f003 0104 	and.w	r1, r3, #4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	f003 0210 	and.w	r2, r3, #16
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800633c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006356:	b084      	sub	sp, #16
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	f107 001c 	add.w	r0, r7, #28
 8006364:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006368:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800636c:	2b01      	cmp	r3, #1
 800636e:	d123      	bne.n	80063b8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006398:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800639c:	2b01      	cmp	r3, #1
 800639e:	d105      	bne.n	80063ac <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f9dc 	bl	800676a <USB_CoreReset>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]
 80063b6:	e01b      	b.n	80063f0 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f9d0 	bl	800676a <USB_CoreReset>
 80063ca:	4603      	mov	r3, r0
 80063cc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38
 80063e2:	e005      	b.n	80063f0 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063f0:	7fbb      	ldrb	r3, [r7, #30]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d10b      	bne.n	800640e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f043 0206 	orr.w	r2, r3, #6
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f043 0220 	orr.w	r2, r3, #32
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800641a:	b004      	add	sp, #16
 800641c:	4770      	bx	lr

0800641e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f043 0201 	orr.w	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f023 0201 	bic.w	r2, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d115      	bne.n	80064b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006490:	200a      	movs	r0, #10
 8006492:	f7fa ff33 	bl	80012fc <HAL_Delay>
      ms += 10U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	330a      	adds	r3, #10
 800649a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f956 	bl	800674e <USB_GetMode>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d01e      	beq.n	80064e6 <USB_SetCurrentMode+0x84>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2bc7      	cmp	r3, #199	; 0xc7
 80064ac:	d9f0      	bls.n	8006490 <USB_SetCurrentMode+0x2e>
 80064ae:	e01a      	b.n	80064e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d115      	bne.n	80064e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064c2:	200a      	movs	r0, #10
 80064c4:	f7fa ff1a 	bl	80012fc <HAL_Delay>
      ms += 10U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	330a      	adds	r3, #10
 80064cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f93d 	bl	800674e <USB_GetMode>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <USB_SetCurrentMode+0x84>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2bc7      	cmp	r3, #199	; 0xc7
 80064de:	d9f0      	bls.n	80064c2 <USB_SetCurrentMode+0x60>
 80064e0:	e001      	b.n	80064e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e005      	b.n	80064f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2bc8      	cmp	r3, #200	; 0xc8
 80064ea:	d101      	bne.n	80064f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006514:	d901      	bls.n	800651a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e01b      	b.n	8006552 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	daf2      	bge.n	8006508 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	019b      	lsls	r3, r3, #6
 800652a:	f043 0220 	orr.w	r2, r3, #32
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800653e:	d901      	bls.n	8006544 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e006      	b.n	8006552 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b20      	cmp	r3, #32
 800654e:	d0f0      	beq.n	8006532 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006576:	d901      	bls.n	800657c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e018      	b.n	80065ae <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	daf2      	bge.n	800656a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2210      	movs	r2, #16
 800658c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800659a:	d901      	bls.n	80065a0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e006      	b.n	80065ae <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d0f0      	beq.n	800658e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b089      	sub	sp, #36	; 0x24
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	4611      	mov	r1, r2
 80065c6:	461a      	mov	r2, r3
 80065c8:	460b      	mov	r3, r1
 80065ca:	71fb      	strb	r3, [r7, #7]
 80065cc:	4613      	mov	r3, r2
 80065ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80065d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d123      	bne.n	8006628 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80065e0:	88bb      	ldrh	r3, [r7, #4]
 80065e2:	3303      	adds	r3, #3
 80065e4:	089b      	lsrs	r3, r3, #2
 80065e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	e018      	b.n	8006620 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	031a      	lsls	r2, r3, #12
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fa:	461a      	mov	r2, r3
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	3301      	adds	r3, #1
 8006606:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	3301      	adds	r3, #1
 800660c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	3301      	adds	r3, #1
 8006612:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	3301      	adds	r3, #1
 8006618:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	3301      	adds	r3, #1
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	429a      	cmp	r2, r3
 8006626:	d3e2      	bcc.n	80065ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3724      	adds	r7, #36	; 0x24
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006636:	b480      	push	{r7}
 8006638:	b08b      	sub	sp, #44	; 0x2c
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	4613      	mov	r3, r2
 8006642:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800664c:	88fb      	ldrh	r3, [r7, #6]
 800664e:	089b      	lsrs	r3, r3, #2
 8006650:	b29b      	uxth	r3, r3
 8006652:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800665c:	2300      	movs	r3, #0
 800665e:	623b      	str	r3, [r7, #32]
 8006660:	e014      	b.n	800668c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	601a      	str	r2, [r3, #0]
    pDest++;
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	3301      	adds	r3, #1
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	3301      	adds	r3, #1
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	3301      	adds	r3, #1
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	3301      	adds	r3, #1
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	3301      	adds	r3, #1
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	429a      	cmp	r2, r3
 8006692:	d3e6      	bcc.n	8006662 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006694:	8bfb      	ldrh	r3, [r7, #30]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01e      	beq.n	80066d8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a4:	461a      	mov	r2, r3
 80066a6:	f107 0310 	add.w	r3, r7, #16
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	701a      	strb	r2, [r3, #0]
      i++;
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	3301      	adds	r3, #1
 80066c4:	623b      	str	r3, [r7, #32]
      pDest++;
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	3301      	adds	r3, #1
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80066cc:	8bfb      	ldrh	r3, [r7, #30]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066d2:	8bfb      	ldrh	r3, [r7, #30]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1ea      	bne.n	80066ae <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066da:	4618      	mov	r0, r3
 80066dc:	372c      	adds	r7, #44	; 0x2c
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4013      	ands	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066fe:	68fb      	ldr	r3, [r7, #12]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006740:	68bb      	ldr	r3, [r7, #8]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	f003 0301 	and.w	r3, r3, #1
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006782:	d901      	bls.n	8006788 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e01b      	b.n	80067c0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	daf2      	bge.n	8006776 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f043 0201 	orr.w	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3301      	adds	r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80067ac:	d901      	bls.n	80067b2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e006      	b.n	80067c0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d0f0      	beq.n	80067a0 <USB_CoreReset+0x36>

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067cc:	b084      	sub	sp, #16
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067ec:	461a      	mov	r2, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006802:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d119      	bne.n	8006856 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006826:	2b01      	cmp	r3, #1
 8006828:	d10a      	bne.n	8006840 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006838:	f043 0304 	orr.w	r3, r3, #4
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e014      	b.n	800686a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800684e:	f023 0304 	bic.w	r3, r3, #4
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e009      	b.n	800686a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006864:	f023 0304 	bic.w	r3, r3, #4
 8006868:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800686a:	2110      	movs	r1, #16
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fe44 	bl	80064fa <USB_FlushTxFifo>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fe6e 	bl	800655e <USB_FlushRxFifo>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	e015      	b.n	80068be <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689e:	461a      	mov	r2, r3
 80068a0:	f04f 33ff 	mov.w	r3, #4294967295
 80068a4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b2:	461a      	mov	r2, r3
 80068b4:	2300      	movs	r3, #0
 80068b6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	3301      	adds	r3, #1
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80068c2:	461a      	mov	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d3e3      	bcc.n	8006892 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f04f 32ff 	mov.w	r2, #4294967295
 80068d6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a18      	ldr	r2, [pc, #96]	; (800693c <USB_HostInit+0x170>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10b      	bne.n	80068f8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <USB_HostInit+0x174>)
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a14      	ldr	r2, [pc, #80]	; (8006944 <USB_HostInit+0x178>)
 80068f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80068f6:	e009      	b.n	800690c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2280      	movs	r2, #128	; 0x80
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a11      	ldr	r2, [pc, #68]	; (8006948 <USB_HostInit+0x17c>)
 8006902:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a11      	ldr	r2, [pc, #68]	; (800694c <USB_HostInit+0x180>)
 8006908:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800690c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f043 0210 	orr.w	r2, r3, #16
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <USB_HostInit+0x184>)
 8006926:	4313      	orrs	r3, r2
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006938:	b004      	add	sp, #16
 800693a:	4770      	bx	lr
 800693c:	40040000 	.word	0x40040000
 8006940:	01000200 	.word	0x01000200
 8006944:	00e00300 	.word	0x00e00300
 8006948:	00600080 	.word	0x00600080
 800694c:	004000e0 	.word	0x004000e0
 8006950:	a3200008 	.word	0xa3200008

08006954 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800698c:	4313      	orrs	r3, r2
 800698e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d107      	bne.n	80069a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800699c:	461a      	mov	r2, r3
 800699e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80069a2:	6053      	str	r3, [r2, #4]
 80069a4:	e00c      	b.n	80069c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80069a6:	78fb      	ldrb	r3, [r7, #3]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d107      	bne.n	80069bc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b2:	461a      	mov	r2, r3
 80069b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80069b8:	6053      	str	r3, [r2, #4]
 80069ba:	e001      	b.n	80069c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80069ee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80069f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80069fe:	2064      	movs	r0, #100	; 0x64
 8006a00:	f7fa fc7c 	bl	80012fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a10:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006a12:	200a      	movs	r0, #10
 8006a14:	f7fa fc72 	bl	80012fc <HAL_Delay>

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a46:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <USB_DriveVbus+0x44>
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d106      	bne.n	8006a66 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a64:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a70:	d109      	bne.n	8006a86 <USB_DriveVbus+0x64>
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a84:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	0c5b      	lsrs	r3, r3, #17
 8006ab2:	f003 0303 	and.w	r3, r3, #3
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b085      	sub	sp, #20
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	b29b      	uxth	r3, r3
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	4608      	mov	r0, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	461a      	mov	r2, r3
 8006af2:	4603      	mov	r3, r0
 8006af4:	70fb      	strb	r3, [r7, #3]
 8006af6:	460b      	mov	r3, r1
 8006af8:	70bb      	strb	r3, [r7, #2]
 8006afa:	4613      	mov	r3, r2
 8006afc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006b06:	78fb      	ldrb	r3, [r7, #3]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b12:	461a      	mov	r2, r3
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295
 8006b18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d87c      	bhi.n	8006c1c <USB_HC_Init+0x138>
 8006b22:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <USB_HC_Init+0x44>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006b39 	.word	0x08006b39
 8006b2c:	08006bdf 	.word	0x08006bdf
 8006b30:	08006b39 	.word	0x08006b39
 8006b34:	08006ba1 	.word	0x08006ba1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b44:	461a      	mov	r2, r3
 8006b46:	f240 439d 	movw	r3, #1181	; 0x49d
 8006b4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006b4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da10      	bge.n	8006b76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	78fa      	ldrb	r2, [r7, #3]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b72:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006b74:	e055      	b.n	8006c22 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a6f      	ldr	r2, [pc, #444]	; (8006d38 <USB_HC_Init+0x254>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d151      	bne.n	8006c22 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006b9c:	60d3      	str	r3, [r2, #12]
      break;
 8006b9e:	e040      	b.n	8006c22 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bac:	461a      	mov	r2, r3
 8006bae:	f240 639d 	movw	r3, #1693	; 0x69d
 8006bb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006bb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da34      	bge.n	8006c26 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	78fa      	ldrb	r2, [r7, #3]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bda:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006bdc:	e023      	b.n	8006c26 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	461a      	mov	r2, r3
 8006bec:	f240 2325 	movw	r3, #549	; 0x225
 8006bf0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006bf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da17      	bge.n	8006c2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	78fa      	ldrb	r2, [r7, #3]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c14:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c18:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c1a:	e006      	b.n	8006c2a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	77fb      	strb	r3, [r7, #31]
      break;
 8006c20:	e004      	b.n	8006c2c <USB_HC_Init+0x148>
      break;
 8006c22:	bf00      	nop
 8006c24:	e002      	b.n	8006c2c <USB_HC_Init+0x148>
      break;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <USB_HC_Init+0x148>
      break;
 8006c2a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006c3e:	78fb      	ldrb	r3, [r7, #3]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c58:	f043 0302 	orr.w	r3, r3, #2
 8006c5c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c72:	6939      	ldr	r1, [r7, #16]
 8006c74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006c88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da03      	bge.n	8006c98 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	e001      	b.n	8006c9c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff fef9 	bl	8006a94 <USB_GetHostSpeed>
 8006ca2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ca4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d106      	bne.n	8006cba <USB_HC_Init+0x1d6>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d003      	beq.n	8006cba <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	e001      	b.n	8006cbe <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cbe:	787b      	ldrb	r3, [r7, #1]
 8006cc0:	059b      	lsls	r3, r3, #22
 8006cc2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cc6:	78bb      	ldrb	r3, [r7, #2]
 8006cc8:	02db      	lsls	r3, r3, #11
 8006cca:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cce:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006cd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cd4:	049b      	lsls	r3, r3, #18
 8006cd6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cda:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006cdc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006cde:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ce2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cec:	78fa      	ldrb	r2, [r7, #3]
 8006cee:	0151      	lsls	r1, r2, #5
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	440a      	add	r2, r1
 8006cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cfc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006cfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d003      	beq.n	8006d0e <USB_HC_Init+0x22a>
 8006d06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d10f      	bne.n	8006d2e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	78fa      	ldrb	r2, [r7, #3]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d2c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40040000 	.word	0x40040000

08006d3c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08c      	sub	sp, #48	; 0x30
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	785b      	ldrb	r3, [r3, #1]
 8006d52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d58:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a5d      	ldr	r2, [pc, #372]	; (8006ed4 <USB_HC_StartXfer+0x198>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d12f      	bne.n	8006dc2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d11c      	bne.n	8006da2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	7c9b      	ldrb	r3, [r3, #18]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <USB_HC_StartXfer+0x3c>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	7c9b      	ldrb	r3, [r3, #18]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d124      	bne.n	8006dc2 <USB_HC_StartXfer+0x86>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	799b      	ldrb	r3, [r3, #6]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d120      	bne.n	8006dc2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9e:	60d3      	str	r3, [r2, #12]
 8006da0:	e00f      	b.n	8006dc2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	791b      	ldrb	r3, [r3, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <USB_HC_StartXfer+0x86>
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	795b      	ldrb	r3, [r3, #5]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d107      	bne.n	8006dc2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	4619      	mov	r1, r3
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fb6b 	bl	8007494 <USB_DoPing>
        return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e232      	b.n	8007228 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	799b      	ldrb	r3, [r3, #6]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d158      	bne.n	8006e7c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	78db      	ldrb	r3, [r3, #3]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006dd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	8a92      	ldrh	r2, [r2, #20]
 8006ddc:	fb03 f202 	mul.w	r2, r3, r2
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	61da      	str	r2, [r3, #28]
 8006de4:	e07c      	b.n	8006ee0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	7c9b      	ldrb	r3, [r3, #18]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d130      	bne.n	8006e50 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	2bbc      	cmp	r3, #188	; 0xbc
 8006df4:	d918      	bls.n	8006e28 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	8a9b      	ldrh	r3, [r3, #20]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	69da      	ldr	r2, [r3, #28]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d003      	beq.n	8006e18 <USB_HC_StartXfer+0xdc>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d103      	bne.n	8006e20 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	e05f      	b.n	8006ee0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2201      	movs	r2, #1
 8006e24:	60da      	str	r2, [r3, #12]
 8006e26:	e05b      	b.n	8006ee0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6a1a      	ldr	r2, [r3, #32]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d007      	beq.n	8006e48 <USB_HC_StartXfer+0x10c>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d003      	beq.n	8006e48 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2204      	movs	r2, #4
 8006e44:	60da      	str	r2, [r3, #12]
 8006e46:	e04b      	b.n	8006ee0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	60da      	str	r2, [r3, #12]
 8006e4e:	e047      	b.n	8006ee0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d10d      	bne.n	8006e72 <USB_HC_StartXfer+0x136>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	8a92      	ldrh	r2, [r2, #20]
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d907      	bls.n	8006e72 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	8a92      	ldrh	r2, [r2, #20]
 8006e68:	fb03 f202 	mul.w	r2, r3, r2
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	61da      	str	r2, [r3, #28]
 8006e70:	e036      	b.n	8006ee0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6a1a      	ldr	r2, [r3, #32]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	61da      	str	r2, [r3, #28]
 8006e7a:	e031      	b.n	8006ee0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d018      	beq.n	8006eb6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	8a92      	ldrh	r2, [r2, #20]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	8a92      	ldrh	r2, [r2, #20]
 8006e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e98:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8006e9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e9c:	8b7b      	ldrh	r3, [r7, #26]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d90b      	bls.n	8006eba <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006ea2:	8b7b      	ldrh	r3, [r7, #26]
 8006ea4:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	8a92      	ldrh	r2, [r2, #20]
 8006eac:	fb03 f202 	mul.w	r2, r3, r2
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	61da      	str	r2, [r3, #28]
 8006eb4:	e001      	b.n	8006eba <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	78db      	ldrb	r3, [r3, #3]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ec2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	8a92      	ldrh	r2, [r2, #20]
 8006ec8:	fb03 f202 	mul.w	r2, r3, r2
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	61da      	str	r2, [r3, #28]
 8006ed0:	e006      	b.n	8006ee0 <USB_HC_StartXfer+0x1a4>
 8006ed2:	bf00      	nop
 8006ed4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6a1a      	ldr	r2, [r3, #32]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006eea:	04d9      	lsls	r1, r3, #19
 8006eec:	4ba3      	ldr	r3, [pc, #652]	; (800717c <USB_HC_StartXfer+0x440>)
 8006eee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ef0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	7d9b      	ldrb	r3, [r3, #22]
 8006ef6:	075b      	lsls	r3, r3, #29
 8006ef8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006efc:	69f9      	ldr	r1, [r7, #28]
 8006efe:	0148      	lsls	r0, r1, #5
 8006f00:	6a39      	ldr	r1, [r7, #32]
 8006f02:	4401      	add	r1, r0
 8006f04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f08:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f0a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d009      	beq.n	8006f26 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	6999      	ldr	r1, [r3, #24]
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f22:	460a      	mov	r2, r1
 8006f24:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bf0c      	ite	eq
 8006f36:	2301      	moveq	r3, #1
 8006f38:	2300      	movne	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	6a3a      	ldr	r2, [r7, #32]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f5c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	7e7b      	ldrb	r3, [r7, #25]
 8006f6e:	075b      	lsls	r3, r3, #29
 8006f70:	69f9      	ldr	r1, [r7, #28]
 8006f72:	0148      	lsls	r0, r1, #5
 8006f74:	6a39      	ldr	r1, [r7, #32]
 8006f76:	4401      	add	r1, r0
 8006f78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	799b      	ldrb	r3, [r3, #6]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	f040 80c3 	bne.w	8007110 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	7c5b      	ldrb	r3, [r3, #17]
 8006f8e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006f94:	4313      	orrs	r3, r2
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	0151      	lsls	r1, r2, #5
 8006f9a:	6a3a      	ldr	r2, [r7, #32]
 8006f9c:	440a      	add	r2, r1
 8006f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006fa6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	6a3a      	ldr	r2, [r7, #32]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006fc6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	79db      	ldrb	r3, [r3, #7]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d123      	bne.n	8007018 <USB_HC_StartXfer+0x2dc>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	78db      	ldrb	r3, [r3, #3]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d11f      	bne.n	8007018 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	6a3a      	ldr	r2, [r7, #32]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	6a3a      	ldr	r2, [r7, #32]
 800700c:	440a      	add	r2, r1
 800700e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007016:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	7c9b      	ldrb	r3, [r3, #18]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d003      	beq.n	8007028 <USB_HC_StartXfer+0x2ec>
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	7c9b      	ldrb	r3, [r3, #18]
 8007024:	2b03      	cmp	r3, #3
 8007026:	d117      	bne.n	8007058 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800702c:	2b01      	cmp	r3, #1
 800702e:	d113      	bne.n	8007058 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	78db      	ldrb	r3, [r3, #3]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d10f      	bne.n	8007058 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	4413      	add	r3, r2
 8007040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	440a      	add	r2, r1
 800704e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007056:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	7c9b      	ldrb	r3, [r3, #18]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d162      	bne.n	8007126 <USB_HC_StartXfer+0x3ea>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	78db      	ldrb	r3, [r3, #3]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d15e      	bne.n	8007126 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	3b01      	subs	r3, #1
 800706e:	2b03      	cmp	r3, #3
 8007070:	d858      	bhi.n	8007124 <USB_HC_StartXfer+0x3e8>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <USB_HC_StartXfer+0x33c>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007089 	.word	0x08007089
 800707c:	080070ab 	.word	0x080070ab
 8007080:	080070cd 	.word	0x080070cd
 8007084:	080070ef 	.word	0x080070ef
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	4413      	add	r3, r2
 8007090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	6a3a      	ldr	r2, [r7, #32]
 800709c:	440a      	add	r2, r1
 800709e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a6:	6053      	str	r3, [r2, #4]
          break;
 80070a8:	e03d      	b.n	8007126 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	6a3a      	ldr	r2, [r7, #32]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070c4:	f043 030e 	orr.w	r3, r3, #14
 80070c8:	6053      	str	r3, [r2, #4]
          break;
 80070ca:	e02c      	b.n	8007126 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070ea:	6053      	str	r3, [r2, #4]
          break;
 80070ec:	e01b      	b.n	8007126 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	69fa      	ldr	r2, [r7, #28]
 80070fe:	0151      	lsls	r1, r2, #5
 8007100:	6a3a      	ldr	r2, [r7, #32]
 8007102:	440a      	add	r2, r1
 8007104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800710c:	6053      	str	r3, [r2, #4]
          break;
 800710e:	e00a      	b.n	8007126 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	461a      	mov	r2, r3
 800711e:	2300      	movs	r3, #0
 8007120:	6053      	str	r3, [r2, #4]
 8007122:	e000      	b.n	8007126 <USB_HC_StartXfer+0x3ea>
          break;
 8007124:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	4413      	add	r3, r2
 800712e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800713c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	78db      	ldrb	r3, [r3, #3]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	e003      	b.n	8007158 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007156:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800715e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	4413      	add	r3, r2
 8007168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716c:	461a      	mov	r2, r3
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	e055      	b.n	8007228 <USB_HC_StartXfer+0x4ec>
 800717c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	78db      	ldrb	r3, [r3, #3]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d14e      	bne.n	8007226 <USB_HC_StartXfer+0x4ea>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d04a      	beq.n	8007226 <USB_HC_StartXfer+0x4ea>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	79db      	ldrb	r3, [r3, #7]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d146      	bne.n	8007226 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	7c9b      	ldrb	r3, [r3, #18]
 800719c:	2b03      	cmp	r3, #3
 800719e:	d831      	bhi.n	8007204 <USB_HC_StartXfer+0x4c8>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <USB_HC_StartXfer+0x46c>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071b9 	.word	0x080071b9
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	080071b9 	.word	0x080071b9
 80071b4:	080071dd 	.word	0x080071dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	3303      	adds	r3, #3
 80071be:	089b      	lsrs	r3, r3, #2
 80071c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80071c2:	8afa      	ldrh	r2, [r7, #22]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d91c      	bls.n	8007208 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f043 0220 	orr.w	r2, r3, #32
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80071da:	e015      	b.n	8007208 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	3303      	adds	r3, #3
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80071e6:	8afa      	ldrh	r2, [r7, #22]
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d90a      	bls.n	800720c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	619a      	str	r2, [r3, #24]
        }
        break;
 8007202:	e003      	b.n	800720c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007204:	bf00      	nop
 8007206:	e002      	b.n	800720e <USB_HC_StartXfer+0x4d2>
        break;
 8007208:	bf00      	nop
 800720a:	e000      	b.n	800720e <USB_HC_StartXfer+0x4d2>
        break;
 800720c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6999      	ldr	r1, [r3, #24]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	785a      	ldrb	r2, [r3, #1]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	b29b      	uxth	r3, r3
 800721c:	2000      	movs	r0, #0
 800721e:	9000      	str	r0, [sp, #0]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7ff f9ca 	bl	80065ba <USB_WritePacket>
  }

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3728      	adds	r7, #40	; 0x28
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	b29b      	uxth	r3, r3
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007252:	b480      	push	{r7}
 8007254:	b089      	sub	sp, #36	; 0x24
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	0c9b      	lsrs	r3, r3, #18
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4413      	add	r3, r2
 8007288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	0fdb      	lsrs	r3, r3, #31
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	0fdb      	lsrs	r3, r3, #31
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d10d      	bne.n	80072d4 <USB_HC_Halt+0x82>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <USB_HC_Halt+0x82>
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d002      	beq.n	80072d0 <USB_HC_Halt+0x7e>
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d101      	bne.n	80072d4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e0d8      	b.n	8007486 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <USB_HC_Halt+0x8e>
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d173      	bne.n	80073c8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	0151      	lsls	r1, r2, #5
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	440a      	add	r2, r1
 80072f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d14a      	bne.n	80073a2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d133      	bne.n	8007380 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4413      	add	r3, r2
 8007320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	440a      	add	r2, r1
 800732e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007332:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007336:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	4413      	add	r3, r2
 8007340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	440a      	add	r2, r1
 800734e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007356:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	3301      	adds	r3, #1
 800735c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007364:	d82e      	bhi.n	80073c4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800737c:	d0ec      	beq.n	8007358 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800737e:	e081      	b.n	8007484 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	440a      	add	r2, r1
 8007396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800739a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800739e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073a0:	e070      	b.n	8007484 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073c0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073c2:	e05f      	b.n	8007484 <USB_HC_Halt+0x232>
            break;
 80073c4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073c6:	e05d      	b.n	8007484 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	0151      	lsls	r1, r2, #5
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	440a      	add	r2, r1
 80073de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d133      	bne.n	8007460 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	440a      	add	r2, r1
 800740e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007412:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007416:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	440a      	add	r2, r1
 800742e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007436:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	3301      	adds	r3, #1
 800743c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007444:	d81d      	bhi.n	8007482 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800745c:	d0ec      	beq.n	8007438 <USB_HC_Halt+0x1e6>
 800745e:	e011      	b.n	8007484 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	4413      	add	r3, r2
 8007468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	0151      	lsls	r1, r2, #5
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	440a      	add	r2, r1
 8007476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800747a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	e000      	b.n	8007484 <USB_HC_Halt+0x232>
          break;
 8007482:	bf00      	nop
    }
  }

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3724      	adds	r7, #36	; 0x24
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
	...

08007494 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80074a8:	2301      	movs	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	04da      	lsls	r2, r3, #19
 80074b0:	4b15      	ldr	r3, [pc, #84]	; (8007508 <USB_DoPing+0x74>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f2:	461a      	mov	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	1ff80000 	.word	0x1ff80000

0800750c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7fe ff8d 	bl	8006440 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007526:	2110      	movs	r1, #16
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7fe ffe6 	bl	80064fa <USB_FlushTxFifo>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff f810 	bl	800655e <USB_FlushRxFifo>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007548:	2300      	movs	r3, #0
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	e01f      	b.n	800758e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	4413      	add	r3, r2
 8007556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007564:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800756c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007574:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4413      	add	r3, r2
 800757e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007582:	461a      	mov	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	3301      	adds	r3, #1
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b0f      	cmp	r3, #15
 8007592:	d9dc      	bls.n	800754e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007594:	2300      	movs	r3, #0
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	e034      	b.n	8007604 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ce:	461a      	mov	r2, r3
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075e0:	d80c      	bhi.n	80075fc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075f8:	d0ec      	beq.n	80075d4 <USB_StopHost+0xc8>
 80075fa:	e000      	b.n	80075fe <USB_StopHost+0xf2>
        break;
 80075fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	3301      	adds	r3, #1
 8007602:	61bb      	str	r3, [r7, #24]
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	2b0f      	cmp	r3, #15
 8007608:	d9c7      	bls.n	800759a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007610:	461a      	mov	r2, r3
 8007612:	f04f 33ff 	mov.w	r3, #4294967295
 8007616:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f04f 32ff 	mov.w	r2, #4294967295
 800761e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fe fefc 	bl	800641e <USB_EnableGlobalInt>

  return ret;
 8007626:	7ffb      	ldrb	r3, [r7, #31]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007630:	b590      	push	{r4, r7, lr}
 8007632:	b089      	sub	sp, #36	; 0x24
 8007634:	af04      	add	r7, sp, #16
 8007636:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007638:	2301      	movs	r3, #1
 800763a:	2202      	movs	r2, #2
 800763c:	2102      	movs	r1, #2
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fc85 	bl	8007f4e <USBH_FindInterface>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	2bff      	cmp	r3, #255	; 0xff
 800764c:	d002      	beq.n	8007654 <USBH_CDC_InterfaceInit+0x24>
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d901      	bls.n	8007658 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007654:	2302      	movs	r3, #2
 8007656:	e13d      	b.n	80078d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fc5a 	bl	8007f16 <USBH_SelectInterface>
 8007662:	4603      	mov	r3, r0
 8007664:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	e131      	b.n	80078d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007676:	2050      	movs	r0, #80	; 0x50
 8007678:	f002 fb74 	bl	8009d64 <malloc>
 800767c:	4603      	mov	r3, r0
 800767e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007690:	2302      	movs	r3, #2
 8007692:	e11f      	b.n	80078d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007694:	2250      	movs	r2, #80	; 0x50
 8007696:	2100      	movs	r1, #0
 8007698:	68b8      	ldr	r0, [r7, #8]
 800769a:	f002 fc1f 	bl	8009edc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	211a      	movs	r1, #26
 80076a4:	fb01 f303 	mul.w	r3, r1, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	b25b      	sxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	da15      	bge.n	80076e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	211a      	movs	r1, #26
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	4413      	add	r3, r2
 80076c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076c6:	781a      	ldrb	r2, [r3, #0]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	211a      	movs	r1, #26
 80076d2:	fb01 f303 	mul.w	r3, r1, r3
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076dc:	881a      	ldrh	r2, [r3, #0]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 ffce 	bl	800968a <USBH_AllocPipe>
 80076ee:	4603      	mov	r3, r0
 80076f0:	461a      	mov	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	7819      	ldrb	r1, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	7858      	ldrb	r0, [r3, #1]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	8952      	ldrh	r2, [r2, #10]
 800770e:	9202      	str	r2, [sp, #8]
 8007710:	2203      	movs	r2, #3
 8007712:	9201      	str	r2, [sp, #4]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	4623      	mov	r3, r4
 8007718:	4602      	mov	r2, r0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 ff86 	bl	800962c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2200      	movs	r2, #0
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f002 fa95 	bl	8009c58 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800772e:	2300      	movs	r3, #0
 8007730:	2200      	movs	r2, #0
 8007732:	210a      	movs	r1, #10
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fc0a 	bl	8007f4e <USBH_FindInterface>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	2bff      	cmp	r3, #255	; 0xff
 8007742:	d002      	beq.n	800774a <USBH_CDC_InterfaceInit+0x11a>
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d901      	bls.n	800774e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800774a:	2302      	movs	r3, #2
 800774c:	e0c2      	b.n	80078d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	211a      	movs	r1, #26
 8007754:	fb01 f303 	mul.w	r3, r1, r3
 8007758:	4413      	add	r3, r2
 800775a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	b25b      	sxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	da16      	bge.n	8007794 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	211a      	movs	r1, #26
 800776c:	fb01 f303 	mul.w	r3, r1, r3
 8007770:	4413      	add	r3, r2
 8007772:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007776:	781a      	ldrb	r2, [r3, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	211a      	movs	r1, #26
 8007782:	fb01 f303 	mul.w	r3, r1, r3
 8007786:	4413      	add	r3, r2
 8007788:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800778c:	881a      	ldrh	r2, [r3, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	835a      	strh	r2, [r3, #26]
 8007792:	e015      	b.n	80077c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	211a      	movs	r1, #26
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077a4:	781a      	ldrb	r2, [r3, #0]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	211a      	movs	r1, #26
 80077b0:	fb01 f303 	mul.w	r3, r1, r3
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077ba:	881a      	ldrh	r2, [r3, #0]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	211a      	movs	r1, #26
 80077c6:	fb01 f303 	mul.w	r3, r1, r3
 80077ca:	4413      	add	r3, r2
 80077cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	b25b      	sxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da16      	bge.n	8007806 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	211a      	movs	r1, #26
 80077de:	fb01 f303 	mul.w	r3, r1, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	211a      	movs	r1, #26
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077fe:	881a      	ldrh	r2, [r3, #0]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	835a      	strh	r2, [r3, #26]
 8007804:	e015      	b.n	8007832 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	211a      	movs	r1, #26
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	4413      	add	r3, r2
 8007812:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	211a      	movs	r1, #26
 8007822:	fb01 f303 	mul.w	r3, r1, r3
 8007826:	4413      	add	r3, r2
 8007828:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800782c:	881a      	ldrh	r2, [r3, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	7b9b      	ldrb	r3, [r3, #14]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 ff26 	bl	800968a <USBH_AllocPipe>
 800783e:	4603      	mov	r3, r0
 8007840:	461a      	mov	r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	7bdb      	ldrb	r3, [r3, #15]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 ff1c 	bl	800968a <USBH_AllocPipe>
 8007852:	4603      	mov	r3, r0
 8007854:	461a      	mov	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	7b59      	ldrb	r1, [r3, #13]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	7b98      	ldrb	r0, [r3, #14]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	8b12      	ldrh	r2, [r2, #24]
 8007872:	9202      	str	r2, [sp, #8]
 8007874:	2202      	movs	r2, #2
 8007876:	9201      	str	r2, [sp, #4]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4623      	mov	r3, r4
 800787c:	4602      	mov	r2, r0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 fed4 	bl	800962c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	7b19      	ldrb	r1, [r3, #12]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	7bd8      	ldrb	r0, [r3, #15]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	8b52      	ldrh	r2, [r2, #26]
 800789c:	9202      	str	r2, [sp, #8]
 800789e:	2202      	movs	r2, #2
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	4623      	mov	r3, r4
 80078a6:	4602      	mov	r2, r0
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 febf 	bl	800962c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	7b5b      	ldrb	r3, [r3, #13]
 80078ba:	2200      	movs	r2, #0
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f002 f9ca 	bl	8009c58 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	7b1b      	ldrb	r3, [r3, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f002 f9c3 	bl	8009c58 <USBH_LL_SetToggle>

  return USBH_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd90      	pop	{r4, r7, pc}

080078dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00e      	beq.n	8007914 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 feb4 	bl	800966a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 fedf 	bl	80096cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	7b1b      	ldrb	r3, [r3, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00e      	beq.n	800793a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	7b1b      	ldrb	r3, [r3, #12]
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f001 fea1 	bl	800966a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	7b1b      	ldrb	r3, [r3, #12]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fecc 	bl	80096cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	7b5b      	ldrb	r3, [r3, #13]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00e      	beq.n	8007960 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	7b5b      	ldrb	r3, [r3, #13]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 fe8e 	bl	800966a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	7b5b      	ldrb	r3, [r3, #13]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 feb9 	bl	80096cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	4618      	mov	r0, r3
 8007976:	f002 f9fd 	bl	8009d74 <free>
    phost->pActiveClass->pData = 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007980:	2200      	movs	r2, #0
 8007982:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3340      	adds	r3, #64	; 0x40
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8b1 	bl	8007b0e <GetLineCoding>
 80079ac:	4603      	mov	r3, r0
 80079ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079bc:	2102      	movs	r1, #2
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80079c2:	7afb      	ldrb	r3, [r7, #11]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80079d4:	2301      	movs	r3, #1
 80079d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d877      	bhi.n	8007ae0 <USBH_CDC_Process+0x114>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <USBH_CDC_Process+0x2c>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a0d 	.word	0x08007a0d
 80079fc:	08007a13 	.word	0x08007a13
 8007a00:	08007a43 	.word	0x08007a43
 8007a04:	08007ab7 	.word	0x08007ab7
 8007a08:	08007ac5 	.word	0x08007ac5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a10:	e06d      	b.n	8007aee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f897 	bl	8007b4c <SetLineCoding>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a30:	e058      	b.n	8007ae4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d055      	beq.n	8007ae4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a40:	e050      	b.n	8007ae4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	3340      	adds	r3, #64	; 0x40
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f860 	bl	8007b0e <GetLineCoding>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d126      	bne.n	8007aa6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6a:	791b      	ldrb	r3, [r3, #4]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d13b      	bne.n	8007ae8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d133      	bne.n	8007ae8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d12b      	bne.n	8007ae8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a98:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d124      	bne.n	8007ae8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f958 	bl	8007d54 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007aa4:	e020      	b.n	8007ae8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d01d      	beq.n	8007ae8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2204      	movs	r2, #4
 8007ab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ab4:	e018      	b.n	8007ae8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f867 	bl	8007b8a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f8da 	bl	8007c76 <CDC_ProcessReception>
      break;
 8007ac2:	e014      	b.n	8007aee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 f822 	bl	8008b10 <USBH_ClrFeature>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007ade:	e005      	b.n	8007aec <USBH_CDC_Process+0x120>

    default:
      break;
 8007ae0:	bf00      	nop
 8007ae2:	e004      	b.n	8007aee <USBH_CDC_Process+0x122>
      break;
 8007ae4:	bf00      	nop
 8007ae6:	e002      	b.n	8007aee <USBH_CDC_Process+0x122>
      break;
 8007ae8:	bf00      	nop
 8007aea:	e000      	b.n	8007aee <USBH_CDC_Process+0x122>
      break;
 8007aec:	bf00      	nop

  }

  return status;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	22a1      	movs	r2, #161	; 0xa1
 8007b1c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2221      	movs	r2, #33	; 0x21
 8007b22:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2207      	movs	r2, #7
 8007b34:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2207      	movs	r2, #7
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 fb23 	bl	8009188 <USBH_CtlReq>
 8007b42:	4603      	mov	r3, r0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2221      	movs	r2, #33	; 0x21
 8007b5a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2207      	movs	r2, #7
 8007b72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2207      	movs	r2, #7
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f001 fb04 	bl	8009188 <USBH_CtlReq>
 8007b80:	4603      	mov	r3, r0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b086      	sub	sp, #24
 8007b8e:	af02      	add	r7, sp, #8
 8007b90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d002      	beq.n	8007bb0 <CDC_ProcessTransmission+0x26>
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d023      	beq.n	8007bf6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007bae:	e05e      	b.n	8007c6e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	8b12      	ldrh	r2, [r2, #24]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d90b      	bls.n	8007bd4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	69d9      	ldr	r1, [r3, #28]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8b1a      	ldrh	r2, [r3, #24]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	7b5b      	ldrb	r3, [r3, #13]
 8007bc8:	2001      	movs	r0, #1
 8007bca:	9000      	str	r0, [sp, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 fcea 	bl	80095a6 <USBH_BulkSendData>
 8007bd2:	e00b      	b.n	8007bec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	7b5b      	ldrb	r3, [r3, #13]
 8007be2:	2001      	movs	r0, #1
 8007be4:	9000      	str	r0, [sp, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 fcdd 	bl	80095a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007bf4:	e03b      	b.n	8007c6e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	7b5b      	ldrb	r3, [r3, #13]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f002 f801 	bl	8009c04 <USBH_LL_GetURBState>
 8007c02:	4603      	mov	r3, r0
 8007c04:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d128      	bne.n	8007c5e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	8b12      	ldrh	r2, [r2, #24]
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d90e      	bls.n	8007c36 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	8b12      	ldrh	r2, [r2, #24]
 8007c20:	1a9a      	subs	r2, r3, r2
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	8b12      	ldrh	r2, [r2, #24]
 8007c2e:	441a      	add	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	61da      	str	r2, [r3, #28]
 8007c34:	e002      	b.n	8007c3c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c4c:	e00e      	b.n	8007c6c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f868 	bl	8007d2c <USBH_CDC_TransmitCallback>
      break;
 8007c5c:	e006      	b.n	8007c6c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d103      	bne.n	8007c6c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c6c:	bf00      	nop
  }
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b086      	sub	sp, #24
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d002      	beq.n	8007c9c <CDC_ProcessReception+0x26>
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d00e      	beq.n	8007cb8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007c9a:	e043      	b.n	8007d24 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	6a19      	ldr	r1, [r3, #32]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	8b5a      	ldrh	r2, [r3, #26]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	7b1b      	ldrb	r3, [r3, #12]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 fca1 	bl	80095f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007cb6:	e035      	b.n	8007d24 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	7b1b      	ldrb	r3, [r3, #12]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 ffa0 	bl	8009c04 <USBH_LL_GetURBState>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007cc8:	7cfb      	ldrb	r3, [r7, #19]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d129      	bne.n	8007d22 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	7b1b      	ldrb	r3, [r3, #12]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 ff03 	bl	8009ae0 <USBH_LL_GetLastXferSize>
 8007cda:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d016      	beq.n	8007d14 <CDC_ProcessReception+0x9e>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	8b5b      	ldrh	r3, [r3, #26]
 8007cea:	461a      	mov	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d910      	bls.n	8007d14 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	1ad2      	subs	r2, r2, r3
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6a1a      	ldr	r2, [r3, #32]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	441a      	add	r2, r3
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007d12:	e006      	b.n	8007d22 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f80f 	bl	8007d40 <USBH_CDC_ReceiveCallback>
      break;
 8007d22:	bf00      	nop
  }
}
 8007d24:	bf00      	nop
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e029      	b.n	8007dd4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	79fa      	ldrb	r2, [r7, #7]
 8007d84:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f81f 	bl	8007ddc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f001 fdd3 	bl	8009978 <USBH_LL_Init>

  return USBH_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007de8:	2300      	movs	r3, #0
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e009      	b.n	8007e02 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	33e0      	adds	r3, #224	; 0xe0
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	2200      	movs	r2, #0
 8007dfa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b0f      	cmp	r3, #15
 8007e06:	d9f2      	bls.n	8007dee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e009      	b.n	8007e22 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e18:	2200      	movs	r2, #0
 8007e1a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e28:	d3f1      	bcc.n	8007e0e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2240      	movs	r2, #64	; 0x40
 8007e4e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	331c      	adds	r3, #28
 8007e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e7e:	2100      	movs	r1, #0
 8007e80:	4618      	mov	r0, r3
 8007e82:	f002 f82b 	bl	8009edc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f002 f822 	bl	8009edc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007e9e:	2212      	movs	r2, #18
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 f81a 	bl	8009edc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007eae:	223e      	movs	r2, #62	; 0x3e
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f002 f812 	bl	8009edc <memset>

  return USBH_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d016      	beq.n	8007f04 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10e      	bne.n	8007efe <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ee6:	1c59      	adds	r1, r3, #1
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	33de      	adds	r3, #222	; 0xde
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
 8007efc:	e004      	b.n	8007f08 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007efe:	2302      	movs	r3, #2
 8007f00:	73fb      	strb	r3, [r7, #15]
 8007f02:	e001      	b.n	8007f08 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007f04:	2302      	movs	r3, #2
 8007f06:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b085      	sub	sp, #20
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007f2c:	78fa      	ldrb	r2, [r7, #3]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d204      	bcs.n	8007f3c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007f3a:	e001      	b.n	8007f40 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b087      	sub	sp, #28
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	4608      	mov	r0, r1
 8007f58:	4611      	mov	r1, r2
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	70fb      	strb	r3, [r7, #3]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70bb      	strb	r3, [r7, #2]
 8007f64:	4613      	mov	r3, r2
 8007f66:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f76:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f78:	e025      	b.n	8007fc6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	221a      	movs	r2, #26
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	3308      	adds	r3, #8
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	3302      	adds	r3, #2
 8007f8a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	795b      	ldrb	r3, [r3, #5]
 8007f90:	78fa      	ldrb	r2, [r7, #3]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d002      	beq.n	8007f9c <USBH_FindInterface+0x4e>
 8007f96:	78fb      	ldrb	r3, [r7, #3]
 8007f98:	2bff      	cmp	r3, #255	; 0xff
 8007f9a:	d111      	bne.n	8007fc0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007fa0:	78ba      	ldrb	r2, [r7, #2]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d002      	beq.n	8007fac <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fa6:	78bb      	ldrb	r3, [r7, #2]
 8007fa8:	2bff      	cmp	r3, #255	; 0xff
 8007faa:	d109      	bne.n	8007fc0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fb0:	787a      	ldrb	r2, [r7, #1]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d002      	beq.n	8007fbc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fb6:	787b      	ldrb	r3, [r7, #1]
 8007fb8:	2bff      	cmp	r3, #255	; 0xff
 8007fba:	d101      	bne.n	8007fc0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	e006      	b.n	8007fce <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d9d6      	bls.n	8007f7a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007fcc:	23ff      	movs	r3, #255	; 0xff
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 fd04 	bl	80099f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007fe8:	2101      	movs	r1, #1
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 fe1d 	bl	8009c2a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af04      	add	r7, sp, #16
 8008002:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008004:	2302      	movs	r3, #2
 8008006:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b01      	cmp	r3, #1
 8008016:	d102      	bne.n	800801e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2203      	movs	r2, #3
 800801c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b0b      	cmp	r3, #11
 8008026:	f200 81be 	bhi.w	80083a6 <USBH_Process+0x3aa>
 800802a:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <USBH_Process+0x34>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	08008061 	.word	0x08008061
 8008034:	08008093 	.word	0x08008093
 8008038:	080080fb 	.word	0x080080fb
 800803c:	08008341 	.word	0x08008341
 8008040:	080083a7 	.word	0x080083a7
 8008044:	0800819f 	.word	0x0800819f
 8008048:	080082e7 	.word	0x080082e7
 800804c:	080081d5 	.word	0x080081d5
 8008050:	080081f5 	.word	0x080081f5
 8008054:	08008215 	.word	0x08008215
 8008058:	08008259 	.word	0x08008259
 800805c:	08008329 	.word	0x08008329
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 819e 	beq.w	80083aa <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008074:	20c8      	movs	r0, #200	; 0xc8
 8008076:	f001 fe22 	bl	8009cbe <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fd15 	bl	8009aaa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008090:	e18b      	b.n	80083aa <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008098:	2b01      	cmp	r3, #1
 800809a:	d107      	bne.n	80080ac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080aa:	e18d      	b.n	80083c8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080b6:	d914      	bls.n	80080e2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080be:	3301      	adds	r3, #1
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d903      	bls.n	80080da <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	220d      	movs	r2, #13
 80080d6:	701a      	strb	r2, [r3, #0]
      break;
 80080d8:	e176      	b.n	80083c8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	701a      	strb	r2, [r3, #0]
      break;
 80080e0:	e172      	b.n	80083c8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080e8:	f103 020a 	add.w	r2, r3, #10
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80080f2:	200a      	movs	r0, #10
 80080f4:	f001 fde3 	bl	8009cbe <USBH_Delay>
      break;
 80080f8:	e166      	b.n	80083c8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800810a:	2104      	movs	r1, #4
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008110:	2064      	movs	r0, #100	; 0x64
 8008112:	f001 fdd4 	bl	8009cbe <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 fca0 	bl	8009a5c <USBH_LL_GetSpeed>
 800811c:	4603      	mov	r3, r0
 800811e:	461a      	mov	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2205      	movs	r2, #5
 800812a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800812c:	2100      	movs	r1, #0
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 faab 	bl	800968a <USBH_AllocPipe>
 8008134:	4603      	mov	r3, r0
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800813c:	2180      	movs	r1, #128	; 0x80
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 faa3 	bl	800968a <USBH_AllocPipe>
 8008144:	4603      	mov	r3, r0
 8008146:	461a      	mov	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7919      	ldrb	r1, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008160:	b292      	uxth	r2, r2
 8008162:	9202      	str	r2, [sp, #8]
 8008164:	2200      	movs	r2, #0
 8008166:	9201      	str	r2, [sp, #4]
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	4603      	mov	r3, r0
 800816c:	2280      	movs	r2, #128	; 0x80
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fa5c 	bl	800962c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	7959      	ldrb	r1, [r3, #5]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008188:	b292      	uxth	r2, r2
 800818a:	9202      	str	r2, [sp, #8]
 800818c:	2200      	movs	r2, #0
 800818e:	9201      	str	r2, [sp, #4]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	4603      	mov	r3, r0
 8008194:	2200      	movs	r2, #0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fa48 	bl	800962c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800819c:	e114      	b.n	80083c8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f918 	bl	80083d4 <USBH_HandleEnum>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f040 80fe 	bne.w	80083ae <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d103      	bne.n	80081cc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2208      	movs	r2, #8
 80081c8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081ca:	e0f0      	b.n	80083ae <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2207      	movs	r2, #7
 80081d0:	701a      	strb	r2, [r3, #0]
      break;
 80081d2:	e0ec      	b.n	80083ae <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 80e9 	beq.w	80083b2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081e6:	2101      	movs	r1, #1
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2208      	movs	r2, #8
 80081f0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80081f2:	e0de      	b.n	80083b2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fc3f 	bl	8008a82 <USBH_SetCfg>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	f040 80d5 	bne.w	80083b6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2209      	movs	r2, #9
 8008210:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008212:	e0d0      	b.n	80083b6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d016      	beq.n	8008250 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008222:	2101      	movs	r1, #1
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fc4f 	bl	8008ac8 <USBH_SetFeature>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	220a      	movs	r2, #10
 800823a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800823c:	e0bd      	b.n	80083ba <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b03      	cmp	r3, #3
 8008244:	f040 80b9 	bne.w	80083ba <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	220a      	movs	r2, #10
 800824c:	701a      	strb	r2, [r3, #0]
      break;
 800824e:	e0b4      	b.n	80083ba <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	220a      	movs	r2, #10
 8008254:	701a      	strb	r2, [r3, #0]
      break;
 8008256:	e0b0      	b.n	80083ba <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 80ad 	beq.w	80083be <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
 8008270:	e016      	b.n	80082a0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008272:	7bfa      	ldrb	r2, [r7, #15]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	32de      	adds	r2, #222	; 0xde
 8008278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827c:	791a      	ldrb	r2, [r3, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008284:	429a      	cmp	r2, r3
 8008286:	d108      	bne.n	800829a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	32de      	adds	r2, #222	; 0xde
 800828e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008298:	e005      	b.n	80082a6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	3301      	adds	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0e5      	beq.n	8008272 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d016      	beq.n	80082de <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2206      	movs	r2, #6
 80082c6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ce:	2103      	movs	r1, #3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082d4:	e073      	b.n	80083be <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	220d      	movs	r2, #13
 80082da:	701a      	strb	r2, [r3, #0]
      break;
 80082dc:	e06f      	b.n	80083be <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	220d      	movs	r2, #13
 80082e2:	701a      	strb	r2, [r3, #0]
      break;
 80082e4:	e06b      	b.n	80083be <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d017      	beq.n	8008320 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	d103      	bne.n	8008310 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	220b      	movs	r2, #11
 800830c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800830e:	e058      	b.n	80083c2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d154      	bne.n	80083c2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	220d      	movs	r2, #13
 800831c:	701a      	strb	r2, [r3, #0]
      break;
 800831e:	e050      	b.n	80083c2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	220d      	movs	r2, #13
 8008324:	701a      	strb	r2, [r3, #0]
      break;
 8008326:	e04c      	b.n	80083c2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d049      	beq.n	80083c6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4798      	blx	r3
      }
      break;
 800833e:	e042      	b.n	80083c6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff fd47 	bl	8007ddc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d009      	beq.n	800836c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800837c:	2105      	movs	r1, #5
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b01      	cmp	r3, #1
 800838c:	d107      	bne.n	800839e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fe1f 	bl	8007fda <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800839c:	e014      	b.n	80083c8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fb26 	bl	80099f0 <USBH_LL_Start>
      break;
 80083a4:	e010      	b.n	80083c8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80083a6:	bf00      	nop
 80083a8:	e00e      	b.n	80083c8 <USBH_Process+0x3cc>
      break;
 80083aa:	bf00      	nop
 80083ac:	e00c      	b.n	80083c8 <USBH_Process+0x3cc>
      break;
 80083ae:	bf00      	nop
 80083b0:	e00a      	b.n	80083c8 <USBH_Process+0x3cc>
    break;
 80083b2:	bf00      	nop
 80083b4:	e008      	b.n	80083c8 <USBH_Process+0x3cc>
      break;
 80083b6:	bf00      	nop
 80083b8:	e006      	b.n	80083c8 <USBH_Process+0x3cc>
      break;
 80083ba:	bf00      	nop
 80083bc:	e004      	b.n	80083c8 <USBH_Process+0x3cc>
      break;
 80083be:	bf00      	nop
 80083c0:	e002      	b.n	80083c8 <USBH_Process+0x3cc>
      break;
 80083c2:	bf00      	nop
 80083c4:	e000      	b.n	80083c8 <USBH_Process+0x3cc>
      break;
 80083c6:	bf00      	nop
  }
  return USBH_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop

080083d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af04      	add	r7, sp, #16
 80083da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	2b07      	cmp	r3, #7
 80083ea:	f200 81c1 	bhi.w	8008770 <USBH_HandleEnum+0x39c>
 80083ee:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <USBH_HandleEnum+0x20>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	08008415 	.word	0x08008415
 80083f8:	080084d3 	.word	0x080084d3
 80083fc:	0800853d 	.word	0x0800853d
 8008400:	080085cb 	.word	0x080085cb
 8008404:	08008635 	.word	0x08008635
 8008408:	080086a5 	.word	0x080086a5
 800840c:	080086eb 	.word	0x080086eb
 8008410:	08008731 	.word	0x08008731
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008414:	2108      	movs	r1, #8
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa50 	bl	80088bc <USBH_Get_DevDesc>
 800841c:	4603      	mov	r3, r0
 800841e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d130      	bne.n	8008488 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	7919      	ldrb	r1, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800844a:	b292      	uxth	r2, r2
 800844c:	9202      	str	r2, [sp, #8]
 800844e:	2200      	movs	r2, #0
 8008450:	9201      	str	r2, [sp, #4]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	4603      	mov	r3, r0
 8008456:	2280      	movs	r2, #128	; 0x80
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 f8e7 	bl	800962c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	7959      	ldrb	r1, [r3, #5]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008472:	b292      	uxth	r2, r2
 8008474:	9202      	str	r2, [sp, #8]
 8008476:	2200      	movs	r2, #0
 8008478:	9201      	str	r2, [sp, #4]
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	4603      	mov	r3, r0
 800847e:	2200      	movs	r2, #0
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 f8d3 	bl	800962c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008486:	e175      	b.n	8008774 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b03      	cmp	r3, #3
 800848c:	f040 8172 	bne.w	8008774 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008496:	3301      	adds	r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d903      	bls.n	80084b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	220d      	movs	r2, #13
 80084ae:	701a      	strb	r2, [r3, #0]
      break;
 80084b0:	e160      	b.n	8008774 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	795b      	ldrb	r3, [r3, #5]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 f907 	bl	80096cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	791b      	ldrb	r3, [r3, #4]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f901 	bl	80096cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	701a      	strb	r2, [r3, #0]
      break;
 80084d0:	e150      	b.n	8008774 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80084d2:	2112      	movs	r1, #18
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f9f1 	bl	80088bc <USBH_Get_DevDesc>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d103      	bne.n	80084ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084ea:	e145      	b.n	8008778 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	f040 8142 	bne.w	8008778 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084fa:	3301      	adds	r3, #1
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800850a:	2b03      	cmp	r3, #3
 800850c:	d903      	bls.n	8008516 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	220d      	movs	r2, #13
 8008512:	701a      	strb	r2, [r3, #0]
      break;
 8008514:	e130      	b.n	8008778 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	795b      	ldrb	r3, [r3, #5]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 f8d5 	bl	80096cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	791b      	ldrb	r3, [r3, #4]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 f8cf 	bl	80096cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
      break;
 800853a:	e11d      	b.n	8008778 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800853c:	2101      	movs	r1, #1
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa7b 	bl	8008a3a <USBH_SetAddress>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d132      	bne.n	80085b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800854e:	2002      	movs	r0, #2
 8008550:	f001 fbb5 	bl	8009cbe <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2203      	movs	r2, #3
 8008560:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7919      	ldrb	r1, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008576:	b292      	uxth	r2, r2
 8008578:	9202      	str	r2, [sp, #8]
 800857a:	2200      	movs	r2, #0
 800857c:	9201      	str	r2, [sp, #4]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4603      	mov	r3, r0
 8008582:	2280      	movs	r2, #128	; 0x80
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f851 	bl	800962c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7959      	ldrb	r1, [r3, #5]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800859e:	b292      	uxth	r2, r2
 80085a0:	9202      	str	r2, [sp, #8]
 80085a2:	2200      	movs	r2, #0
 80085a4:	9201      	str	r2, [sp, #4]
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	4603      	mov	r3, r0
 80085aa:	2200      	movs	r2, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 f83d 	bl	800962c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80085b2:	e0e3      	b.n	800877c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	f040 80e0 	bne.w	800877c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	220d      	movs	r2, #13
 80085c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	705a      	strb	r2, [r3, #1]
      break;
 80085c8:	e0d8      	b.n	800877c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80085ca:	2109      	movs	r1, #9
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9a1 	bl	8008914 <USBH_Get_CfgDesc>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2204      	movs	r2, #4
 80085e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085e2:	e0cd      	b.n	8008780 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	f040 80ca 	bne.w	8008780 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085f2:	3301      	adds	r3, #1
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008602:	2b03      	cmp	r3, #3
 8008604:	d903      	bls.n	800860e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220d      	movs	r2, #13
 800860a:	701a      	strb	r2, [r3, #0]
      break;
 800860c:	e0b8      	b.n	8008780 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	795b      	ldrb	r3, [r3, #5]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f859 	bl	80096cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	791b      	ldrb	r3, [r3, #4]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 f853 	bl	80096cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	701a      	strb	r2, [r3, #0]
      break;
 8008632:	e0a5      	b.n	8008780 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f969 	bl	8008914 <USBH_Get_CfgDesc>
 8008642:	4603      	mov	r3, r0
 8008644:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d103      	bne.n	8008654 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2205      	movs	r2, #5
 8008650:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008652:	e097      	b.n	8008784 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b03      	cmp	r3, #3
 8008658:	f040 8094 	bne.w	8008784 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008662:	3301      	adds	r3, #1
 8008664:	b2da      	uxtb	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008672:	2b03      	cmp	r3, #3
 8008674:	d903      	bls.n	800867e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	220d      	movs	r2, #13
 800867a:	701a      	strb	r2, [r3, #0]
      break;
 800867c:	e082      	b.n	8008784 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	795b      	ldrb	r3, [r3, #5]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f821 	bl	80096cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	791b      	ldrb	r3, [r3, #4]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 f81b 	bl	80096cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]
      break;
 80086a2:	e06f      	b.n	8008784 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d019      	beq.n	80086e2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086ba:	23ff      	movs	r3, #255	; 0xff
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f953 	bl	8008968 <USBH_Get_StringDesc>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d103      	bne.n	80086d4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2206      	movs	r2, #6
 80086d0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086d2:	e059      	b.n	8008788 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d156      	bne.n	8008788 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2206      	movs	r2, #6
 80086de:	705a      	strb	r2, [r3, #1]
      break;
 80086e0:	e052      	b.n	8008788 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2206      	movs	r2, #6
 80086e6:	705a      	strb	r2, [r3, #1]
      break;
 80086e8:	e04e      	b.n	8008788 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d019      	beq.n	8008728 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008700:	23ff      	movs	r3, #255	; 0xff
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f930 	bl	8008968 <USBH_Get_StringDesc>
 8008708:	4603      	mov	r3, r0
 800870a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d103      	bne.n	800871a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2207      	movs	r2, #7
 8008716:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008718:	e038      	b.n	800878c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d135      	bne.n	800878c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2207      	movs	r2, #7
 8008724:	705a      	strb	r2, [r3, #1]
      break;
 8008726:	e031      	b.n	800878c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2207      	movs	r2, #7
 800872c:	705a      	strb	r2, [r3, #1]
      break;
 800872e:	e02d      	b.n	800878c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008736:	2b00      	cmp	r3, #0
 8008738:	d017      	beq.n	800876a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008746:	23ff      	movs	r3, #255	; 0xff
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f90d 	bl	8008968 <USBH_Get_StringDesc>
 800874e:	4603      	mov	r3, r0
 8008750:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800875c:	e018      	b.n	8008790 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	2b03      	cmp	r3, #3
 8008762:	d115      	bne.n	8008790 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
      break;
 8008768:	e012      	b.n	8008790 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
      break;
 800876e:	e00f      	b.n	8008790 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008770:	bf00      	nop
 8008772:	e00e      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008774:	bf00      	nop
 8008776:	e00c      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008778:	bf00      	nop
 800877a:	e00a      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 800877c:	bf00      	nop
 800877e:	e008      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008780:	bf00      	nop
 8008782:	e006      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008784:	bf00      	nop
 8008786:	e004      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008788:	bf00      	nop
 800878a:	e002      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 800878c:	bf00      	nop
 800878e:	e000      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008790:	bf00      	nop
  }
  return Status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f804 	bl	80087de <USBH_HandleSof>
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b0b      	cmp	r3, #11
 80087ee:	d10a      	bne.n	8008806 <USBH_HandleSof+0x28>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
  }
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800881e:	bf00      	nop
}
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800883a:	bf00      	nop
}
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 f8c6 	bl	8009a26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	791b      	ldrb	r3, [r3, #4]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 ff13 	bl	80096cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	795b      	ldrb	r3, [r3, #5]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 ff0d 	bl	80096cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80088c8:	887b      	ldrh	r3, [r7, #2]
 80088ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ce:	d901      	bls.n	80088d4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e01b      	b.n	800890c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80088da:	887b      	ldrh	r3, [r7, #2]
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	4613      	mov	r3, r2
 80088e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088e4:	2100      	movs	r1, #0
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f872 	bl	80089d0 <USBH_GetDescriptor>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d109      	bne.n	800890a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088fc:	887a      	ldrh	r2, [r7, #2]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f929 	bl	8008b58 <USBH_ParseDevDesc>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af02      	add	r7, sp, #8
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	331c      	adds	r3, #28
 8008924:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008926:	887b      	ldrh	r3, [r7, #2]
 8008928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800892c:	d901      	bls.n	8008932 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800892e:	2303      	movs	r3, #3
 8008930:	e016      	b.n	8008960 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008932:	887b      	ldrh	r3, [r7, #2]
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f846 	bl	80089d0 <USBH_GetDescriptor>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d107      	bne.n	800895e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800894e:	887b      	ldrh	r3, [r7, #2]
 8008950:	461a      	mov	r2, r3
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f9b3 	bl	8008cc0 <USBH_ParseCfgDesc>
 800895a:	4603      	mov	r3, r0
 800895c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af02      	add	r7, sp, #8
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	461a      	mov	r2, r3
 8008974:	460b      	mov	r3, r1
 8008976:	72fb      	strb	r3, [r7, #11]
 8008978:	4613      	mov	r3, r2
 800897a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800897c:	893b      	ldrh	r3, [r7, #8]
 800897e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008982:	d802      	bhi.n	800898a <USBH_Get_StringDesc+0x22>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800898a:	2303      	movs	r3, #3
 800898c:	e01c      	b.n	80089c8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800898e:	7afb      	ldrb	r3, [r7, #11]
 8008990:	b29b      	uxth	r3, r3
 8008992:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008996:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800899e:	893b      	ldrh	r3, [r7, #8]
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	460b      	mov	r3, r1
 80089a4:	2100      	movs	r1, #0
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f812 	bl	80089d0 <USBH_GetDescriptor>
 80089ac:	4603      	mov	r3, r0
 80089ae:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d107      	bne.n	80089c6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089bc:	893a      	ldrh	r2, [r7, #8]
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fb93 	bl	80090ec <USBH_ParseStringDesc>
  }

  return status;
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	607b      	str	r3, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	72fb      	strb	r3, [r7, #11]
 80089de:	4613      	mov	r3, r2
 80089e0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	789b      	ldrb	r3, [r3, #2]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d11c      	bne.n	8008a24 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089ea:	7afb      	ldrb	r3, [r7, #11]
 80089ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2206      	movs	r2, #6
 80089fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	893a      	ldrh	r2, [r7, #8]
 8008a00:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008a02:	893b      	ldrh	r3, [r7, #8]
 8008a04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a0c:	d104      	bne.n	8008a18 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f240 4209 	movw	r2, #1033	; 0x409
 8008a14:	829a      	strh	r2, [r3, #20]
 8008a16:	e002      	b.n	8008a1e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	8b3a      	ldrh	r2, [r7, #24]
 8008a22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008a24:	8b3b      	ldrh	r3, [r7, #24]
 8008a26:	461a      	mov	r2, r3
 8008a28:	6879      	ldr	r1, [r7, #4]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 fbac 	bl	8009188 <USBH_CtlReq>
 8008a30:	4603      	mov	r3, r0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	789b      	ldrb	r3, [r3, #2]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d10f      	bne.n	8008a6e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2205      	movs	r2, #5
 8008a58:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2100      	movs	r1, #0
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fb88 	bl	8009188 <USBH_CtlReq>
 8008a78:	4603      	mov	r3, r0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	789b      	ldrb	r3, [r3, #2]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d10e      	bne.n	8008ab4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2209      	movs	r2, #9
 8008aa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	887a      	ldrh	r2, [r7, #2]
 8008aa6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fb65 	bl	8009188 <USBH_CtlReq>
 8008abe:	4603      	mov	r3, r0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	789b      	ldrb	r3, [r3, #2]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d10f      	bne.n	8008afc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2203      	movs	r2, #3
 8008ae6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008afc:	2200      	movs	r2, #0
 8008afe:	2100      	movs	r1, #0
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fb41 	bl	8009188 <USBH_CtlReq>
 8008b06:	4603      	mov	r3, r0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	789b      	ldrb	r3, [r3, #2]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d10f      	bne.n	8008b44 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008b36:	78fb      	ldrb	r3, [r7, #3]
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b44:	2200      	movs	r2, #0
 8008b46:	2100      	movs	r1, #0
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fb1d 	bl	8009188 <USBH_CtlReq>
 8008b4e:	4603      	mov	r3, r0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008b6c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e098      	b.n	8008cae <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	785a      	ldrb	r2, [r3, #1]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	3302      	adds	r3, #2
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	3303      	adds	r3, #3
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	791a      	ldrb	r2, [r3, #4]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	795a      	ldrb	r2, [r3, #5]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	799a      	ldrb	r2, [r3, #6]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	79da      	ldrb	r2, [r3, #7]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d004      	beq.n	8008bdc <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d11b      	bne.n	8008c14 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	79db      	ldrb	r3, [r3, #7]
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	dc0f      	bgt.n	8008c04 <USBH_ParseDevDesc+0xac>
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	db0f      	blt.n	8008c08 <USBH_ParseDevDesc+0xb0>
 8008be8:	3b08      	subs	r3, #8
 8008bea:	4a34      	ldr	r2, [pc, #208]	; (8008cbc <USBH_ParseDevDesc+0x164>)
 8008bec:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bf14      	ite	ne
 8008bf8:	2301      	movne	r3, #1
 8008bfa:	2300      	moveq	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d106      	bne.n	8008c10 <USBH_ParseDevDesc+0xb8>
 8008c02:	e001      	b.n	8008c08 <USBH_ParseDevDesc+0xb0>
 8008c04:	2b40      	cmp	r3, #64	; 0x40
 8008c06:	d003      	beq.n	8008c10 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2208      	movs	r2, #8
 8008c0c:	71da      	strb	r2, [r3, #7]
        break;
 8008c0e:	e000      	b.n	8008c12 <USBH_ParseDevDesc+0xba>
        break;
 8008c10:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008c12:	e00e      	b.n	8008c32 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d107      	bne.n	8008c2e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	79db      	ldrb	r3, [r3, #7]
 8008c22:	2b08      	cmp	r3, #8
 8008c24:	d005      	beq.n	8008c32 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2208      	movs	r2, #8
 8008c2a:	71da      	strb	r2, [r3, #7]
 8008c2c:	e001      	b.n	8008c32 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d939      	bls.n	8008cac <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	3309      	adds	r3, #9
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	330a      	adds	r3, #10
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	330b      	adds	r3, #11
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	330c      	adds	r3, #12
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	330d      	adds	r3, #13
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	021b      	lsls	r3, r3, #8
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	4313      	orrs	r3, r2
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	7b9a      	ldrb	r2, [r3, #14]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	7bda      	ldrb	r2, [r3, #15]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	7c1a      	ldrb	r2, [r3, #16]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	7c5a      	ldrb	r2, [r3, #17]
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	01000101 	.word	0x01000101

08008cc0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08c      	sub	sp, #48	; 0x30
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008cd4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e0db      	b.n	8008eaa <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	781a      	ldrb	r2, [r3, #0]
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	785a      	ldrb	r2, [r3, #1]
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	3302      	adds	r3, #2
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	3303      	adds	r3, #3
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d22:	bf28      	it	cs
 8008d24:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	791a      	ldrb	r2, [r3, #4]
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	795a      	ldrb	r2, [r3, #5]
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	799a      	ldrb	r2, [r3, #6]
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	79da      	ldrb	r2, [r3, #7]
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	7a1a      	ldrb	r2, [r3, #8]
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b09      	cmp	r3, #9
 8008d5c:	d002      	beq.n	8008d64 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	2209      	movs	r2, #9
 8008d62:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008d64:	88fb      	ldrh	r3, [r7, #6]
 8008d66:	2b09      	cmp	r3, #9
 8008d68:	f240 809d 	bls.w	8008ea6 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008d6c:	2309      	movs	r3, #9
 8008d6e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d74:	e081      	b.n	8008e7a <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d76:	f107 0316 	add.w	r3, r7, #22
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d7e:	f000 f9e8 	bl	8009152 <USBH_GetNextDesc>
 8008d82:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	785b      	ldrb	r3, [r3, #1]
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d176      	bne.n	8008e7a <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d002      	beq.n	8008d9a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	2209      	movs	r2, #9
 8008d98:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d9e:	221a      	movs	r2, #26
 8008da0:	fb02 f303 	mul.w	r3, r2, r3
 8008da4:	3308      	adds	r3, #8
 8008da6:	6a3a      	ldr	r2, [r7, #32]
 8008da8:	4413      	add	r3, r2
 8008daa:	3302      	adds	r3, #2
 8008dac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008db0:	69f8      	ldr	r0, [r7, #28]
 8008db2:	f000 f87e 	bl	8008eb2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008dc0:	e043      	b.n	8008e4a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008dc2:	f107 0316 	add.w	r3, r7, #22
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dca:	f000 f9c2 	bl	8009152 <USBH_GetNextDesc>
 8008dce:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2b05      	cmp	r3, #5
 8008dd6:	d138      	bne.n	8008e4a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	795b      	ldrb	r3, [r3, #5]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d113      	bne.n	8008e08 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d003      	beq.n	8008df0 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	799b      	ldrb	r3, [r3, #6]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d10b      	bne.n	8008e08 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	79db      	ldrb	r3, [r3, #7]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10b      	bne.n	8008e10 <USBH_ParseCfgDesc+0x150>
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d007      	beq.n	8008e10 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	2209      	movs	r2, #9
 8008e04:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e06:	e003      	b.n	8008e10 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	2207      	movs	r2, #7
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	e000      	b.n	8008e12 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e10:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e16:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e1a:	3201      	adds	r2, #1
 8008e1c:	00d2      	lsls	r2, r2, #3
 8008e1e:	211a      	movs	r1, #26
 8008e20:	fb01 f303 	mul.w	r3, r1, r3
 8008e24:	4413      	add	r3, r2
 8008e26:	3308      	adds	r3, #8
 8008e28:	6a3a      	ldr	r2, [r7, #32]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e32:	69b9      	ldr	r1, [r7, #24]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f870 	bl	8008f1a <USBH_ParseEPDesc>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008e40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e44:	3301      	adds	r3, #1
 8008e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	791b      	ldrb	r3, [r3, #4]
 8008e4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d204      	bcs.n	8008e60 <USBH_ParseCfgDesc+0x1a0>
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	885a      	ldrh	r2, [r3, #2]
 8008e5a:	8afb      	ldrh	r3, [r7, #22]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d8b0      	bhi.n	8008dc2 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	791b      	ldrb	r3, [r3, #4]
 8008e64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d201      	bcs.n	8008e70 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e01c      	b.n	8008eaa <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e74:	3301      	adds	r3, #1
 8008e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d805      	bhi.n	8008e8e <USBH_ParseCfgDesc+0x1ce>
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	885a      	ldrh	r2, [r3, #2]
 8008e86:	8afb      	ldrh	r3, [r7, #22]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	f63f af74 	bhi.w	8008d76 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	791b      	ldrb	r3, [r3, #4]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	bf28      	it	cs
 8008e96:	2302      	movcs	r3, #2
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d201      	bcs.n	8008ea6 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e001      	b.n	8008eaa <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3730      	adds	r7, #48	; 0x30
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781a      	ldrb	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	785a      	ldrb	r2, [r3, #1]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	789a      	ldrb	r2, [r3, #2]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	78da      	ldrb	r2, [r3, #3]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	bf28      	it	cs
 8008ee6:	2302      	movcs	r3, #2
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	795a      	ldrb	r2, [r3, #5]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	799a      	ldrb	r2, [r3, #6]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	79da      	ldrb	r2, [r3, #7]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	7a1a      	ldrb	r2, [r3, #8]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	721a      	strb	r2, [r3, #8]
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b087      	sub	sp, #28
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	781a      	ldrb	r2, [r3, #0]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	785a      	ldrb	r2, [r3, #1]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	789a      	ldrb	r2, [r3, #2]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	78da      	ldrb	r2, [r3, #3]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3305      	adds	r3, #5
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	799a      	ldrb	r2, [r3, #6]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	889b      	ldrh	r3, [r3, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d009      	beq.n	8008f8a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f7e:	d804      	bhi.n	8008f8a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f88:	d901      	bls.n	8008f8e <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d136      	bne.n	8009006 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	78db      	ldrb	r3, [r3, #3]
 8008f9c:	f003 0303 	and.w	r3, r3, #3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d108      	bne.n	8008fb6 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	889b      	ldrh	r3, [r3, #4]
 8008fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fac:	f240 8097 	bls.w	80090de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	75fb      	strb	r3, [r7, #23]
 8008fb4:	e093      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	78db      	ldrb	r3, [r3, #3]
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d107      	bne.n	8008fd2 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	889b      	ldrh	r3, [r3, #4]
 8008fc6:	2b40      	cmp	r3, #64	; 0x40
 8008fc8:	f240 8089 	bls.w	80090de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	75fb      	strb	r3, [r7, #23]
 8008fd0:	e085      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	78db      	ldrb	r3, [r3, #3]
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d005      	beq.n	8008fea <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	78db      	ldrb	r3, [r3, #3]
 8008fe2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d10a      	bne.n	8009000 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	799b      	ldrb	r3, [r3, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <USBH_ParseEPDesc+0xe0>
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	799b      	ldrb	r3, [r3, #6]
 8008ff6:	2b10      	cmp	r3, #16
 8008ff8:	d970      	bls.n	80090dc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ffe:	e06d      	b.n	80090dc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009000:	2303      	movs	r3, #3
 8009002:	75fb      	strb	r3, [r7, #23]
 8009004:	e06b      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800900c:	2b01      	cmp	r3, #1
 800900e:	d13c      	bne.n	800908a <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	78db      	ldrb	r3, [r3, #3]
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	2b02      	cmp	r3, #2
 800901a:	d005      	beq.n	8009028 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	78db      	ldrb	r3, [r3, #3]
 8009020:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009024:	2b00      	cmp	r3, #0
 8009026:	d106      	bne.n	8009036 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	889b      	ldrh	r3, [r3, #4]
 800902c:	2b40      	cmp	r3, #64	; 0x40
 800902e:	d956      	bls.n	80090de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009030:	2303      	movs	r3, #3
 8009032:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009034:	e053      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	78db      	ldrb	r3, [r3, #3]
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	2b01      	cmp	r3, #1
 8009040:	d10e      	bne.n	8009060 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	799b      	ldrb	r3, [r3, #6]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d007      	beq.n	800905a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800904e:	2b10      	cmp	r3, #16
 8009050:	d803      	bhi.n	800905a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d941      	bls.n	80090de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800905a:	2303      	movs	r3, #3
 800905c:	75fb      	strb	r3, [r7, #23]
 800905e:	e03e      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	78db      	ldrb	r3, [r3, #3]
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	2b03      	cmp	r3, #3
 800906a:	d10b      	bne.n	8009084 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	799b      	ldrb	r3, [r3, #6]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <USBH_ParseEPDesc+0x164>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	889b      	ldrh	r3, [r3, #4]
 8009078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800907c:	d32f      	bcc.n	80090de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800907e:	2303      	movs	r3, #3
 8009080:	75fb      	strb	r3, [r7, #23]
 8009082:	e02c      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009084:	2303      	movs	r3, #3
 8009086:	75fb      	strb	r3, [r7, #23]
 8009088:	e029      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009090:	2b02      	cmp	r3, #2
 8009092:	d120      	bne.n	80090d6 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	78db      	ldrb	r3, [r3, #3]
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d106      	bne.n	80090ae <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	889b      	ldrh	r3, [r3, #4]
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d01a      	beq.n	80090de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80090a8:	2303      	movs	r3, #3
 80090aa:	75fb      	strb	r3, [r7, #23]
 80090ac:	e017      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	78db      	ldrb	r3, [r3, #3]
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d10a      	bne.n	80090d0 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	799b      	ldrb	r3, [r3, #6]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <USBH_ParseEPDesc+0x1b0>
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	889b      	ldrh	r3, [r3, #4]
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d909      	bls.n	80090de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80090ca:	2303      	movs	r3, #3
 80090cc:	75fb      	strb	r3, [r7, #23]
 80090ce:	e006      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80090d0:	2303      	movs	r3, #3
 80090d2:	75fb      	strb	r3, [r7, #23]
 80090d4:	e003      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80090d6:	2303      	movs	r3, #3
 80090d8:	75fb      	strb	r3, [r7, #23]
 80090da:	e000      	b.n	80090de <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090dc:	bf00      	nop
  }

  return status;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	371c      	adds	r7, #28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3301      	adds	r3, #1
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b03      	cmp	r3, #3
 8009102:	d120      	bne.n	8009146 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	1e9a      	subs	r2, r3, #2
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	4293      	cmp	r3, r2
 800910e:	bf28      	it	cs
 8009110:	4613      	movcs	r3, r2
 8009112:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3302      	adds	r3, #2
 8009118:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800911a:	2300      	movs	r3, #0
 800911c:	82fb      	strh	r3, [r7, #22]
 800911e:	e00b      	b.n	8009138 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009120:	8afb      	ldrh	r3, [r7, #22]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4413      	add	r3, r2
 8009126:	781a      	ldrb	r2, [r3, #0]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	3301      	adds	r3, #1
 8009130:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009132:	8afb      	ldrh	r3, [r7, #22]
 8009134:	3302      	adds	r3, #2
 8009136:	82fb      	strh	r3, [r7, #22]
 8009138:	8afa      	ldrh	r2, [r7, #22]
 800913a:	8abb      	ldrh	r3, [r7, #20]
 800913c:	429a      	cmp	r2, r3
 800913e:	d3ef      	bcc.n	8009120 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
  }
}
 8009146:	bf00      	nop
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009152:	b480      	push	{r7}
 8009154:	b085      	sub	sp, #20
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	881a      	ldrh	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	4413      	add	r3, r2
 8009168:	b29a      	uxth	r2, r3
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800917a:	68fb      	ldr	r3, [r7, #12]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009196:	2301      	movs	r3, #1
 8009198:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	789b      	ldrb	r3, [r3, #2]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d002      	beq.n	80091a8 <USBH_CtlReq+0x20>
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d00f      	beq.n	80091c6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80091a6:	e027      	b.n	80091f8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	88fa      	ldrh	r2, [r7, #6]
 80091b2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2202      	movs	r2, #2
 80091be:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80091c0:	2301      	movs	r3, #1
 80091c2:	75fb      	strb	r3, [r7, #23]
      break;
 80091c4:	e018      	b.n	80091f8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f81c 	bl	8009204 <USBH_HandleControl>
 80091cc:	4603      	mov	r3, r0
 80091ce:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80091d0:	7dfb      	ldrb	r3, [r7, #23]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <USBH_CtlReq+0x54>
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d106      	bne.n	80091ea <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2201      	movs	r2, #1
 80091e0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	761a      	strb	r2, [r3, #24]
      break;
 80091e8:	e005      	b.n	80091f6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d102      	bne.n	80091f6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	709a      	strb	r2, [r3, #2]
      break;
 80091f6:	bf00      	nop
  }
  return status;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af02      	add	r7, sp, #8
 800920a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800920c:	2301      	movs	r3, #1
 800920e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009210:	2300      	movs	r3, #0
 8009212:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	7e1b      	ldrb	r3, [r3, #24]
 8009218:	3b01      	subs	r3, #1
 800921a:	2b0a      	cmp	r3, #10
 800921c:	f200 8156 	bhi.w	80094cc <USBH_HandleControl+0x2c8>
 8009220:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <USBH_HandleControl+0x24>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	08009255 	.word	0x08009255
 800922c:	0800926f 	.word	0x0800926f
 8009230:	080092d9 	.word	0x080092d9
 8009234:	080092ff 	.word	0x080092ff
 8009238:	08009337 	.word	0x08009337
 800923c:	08009361 	.word	0x08009361
 8009240:	080093b3 	.word	0x080093b3
 8009244:	080093d5 	.word	0x080093d5
 8009248:	08009411 	.word	0x08009411
 800924c:	08009437 	.word	0x08009437
 8009250:	08009475 	.word	0x08009475
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f103 0110 	add.w	r1, r3, #16
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	795b      	ldrb	r3, [r3, #5]
 800925e:	461a      	mov	r2, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f943 	bl	80094ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2202      	movs	r2, #2
 800926a:	761a      	strb	r2, [r3, #24]
      break;
 800926c:	e139      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	795b      	ldrb	r3, [r3, #5]
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fcc5 	bl	8009c04 <USBH_LL_GetURBState>
 800927a:	4603      	mov	r3, r0
 800927c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d11e      	bne.n	80092c2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7c1b      	ldrb	r3, [r3, #16]
 8009288:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800928c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	8adb      	ldrh	r3, [r3, #22]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009296:	7b7b      	ldrb	r3, [r7, #13]
 8009298:	2b80      	cmp	r3, #128	; 0x80
 800929a:	d103      	bne.n	80092a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2203      	movs	r2, #3
 80092a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092a2:	e115      	b.n	80094d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2205      	movs	r2, #5
 80092a8:	761a      	strb	r2, [r3, #24]
      break;
 80092aa:	e111      	b.n	80094d0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80092ac:	7b7b      	ldrb	r3, [r7, #13]
 80092ae:	2b80      	cmp	r3, #128	; 0x80
 80092b0:	d103      	bne.n	80092ba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2209      	movs	r2, #9
 80092b6:	761a      	strb	r2, [r3, #24]
      break;
 80092b8:	e10a      	b.n	80094d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2207      	movs	r2, #7
 80092be:	761a      	strb	r2, [r3, #24]
      break;
 80092c0:	e106      	b.n	80094d0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d003      	beq.n	80092d0 <USBH_HandleControl+0xcc>
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	f040 8100 	bne.w	80094d0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	220b      	movs	r2, #11
 80092d4:	761a      	strb	r2, [r3, #24]
      break;
 80092d6:	e0fb      	b.n	80094d0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092de:	b29a      	uxth	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6899      	ldr	r1, [r3, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	899a      	ldrh	r2, [r3, #12]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	791b      	ldrb	r3, [r3, #4]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f93a 	bl	800956a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2204      	movs	r2, #4
 80092fa:	761a      	strb	r2, [r3, #24]
      break;
 80092fc:	e0f1      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fc7d 	bl	8009c04 <USBH_LL_GetURBState>
 800930a:	4603      	mov	r3, r0
 800930c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d102      	bne.n	800931a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2209      	movs	r2, #9
 8009318:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b05      	cmp	r3, #5
 800931e:	d102      	bne.n	8009326 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009320:	2303      	movs	r3, #3
 8009322:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009324:	e0d6      	b.n	80094d4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	2b04      	cmp	r3, #4
 800932a:	f040 80d3 	bne.w	80094d4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	220b      	movs	r2, #11
 8009332:	761a      	strb	r2, [r3, #24]
      break;
 8009334:	e0ce      	b.n	80094d4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6899      	ldr	r1, [r3, #8]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	899a      	ldrh	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	795b      	ldrb	r3, [r3, #5]
 8009342:	2001      	movs	r0, #1
 8009344:	9000      	str	r0, [sp, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f8ea 	bl	8009520 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009352:	b29a      	uxth	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2206      	movs	r2, #6
 800935c:	761a      	strb	r2, [r3, #24]
      break;
 800935e:	e0c0      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	795b      	ldrb	r3, [r3, #5]
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fc4c 	bl	8009c04 <USBH_LL_GetURBState>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d103      	bne.n	800937e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2207      	movs	r2, #7
 800937a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800937c:	e0ac      	b.n	80094d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b05      	cmp	r3, #5
 8009382:	d105      	bne.n	8009390 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	220c      	movs	r2, #12
 8009388:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800938a:	2303      	movs	r3, #3
 800938c:	73fb      	strb	r3, [r7, #15]
      break;
 800938e:	e0a3      	b.n	80094d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d103      	bne.n	800939e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2205      	movs	r2, #5
 800939a:	761a      	strb	r2, [r3, #24]
      break;
 800939c:	e09c      	b.n	80094d8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	f040 8099 	bne.w	80094d8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	220b      	movs	r2, #11
 80093aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80093ac:	2302      	movs	r3, #2
 80093ae:	73fb      	strb	r3, [r7, #15]
      break;
 80093b0:	e092      	b.n	80094d8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	791b      	ldrb	r3, [r3, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	2100      	movs	r1, #0
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f8d5 	bl	800956a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2208      	movs	r2, #8
 80093d0:	761a      	strb	r2, [r3, #24]

      break;
 80093d2:	e086      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	791b      	ldrb	r3, [r3, #4]
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fc12 	bl	8009c04 <USBH_LL_GetURBState>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d105      	bne.n	80093f6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	220d      	movs	r2, #13
 80093ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093f4:	e072      	b.n	80094dc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d103      	bne.n	8009404 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	220b      	movs	r2, #11
 8009400:	761a      	strb	r2, [r3, #24]
      break;
 8009402:	e06b      	b.n	80094dc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	2b05      	cmp	r3, #5
 8009408:	d168      	bne.n	80094dc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800940a:	2303      	movs	r3, #3
 800940c:	73fb      	strb	r3, [r7, #15]
      break;
 800940e:	e065      	b.n	80094dc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	795b      	ldrb	r3, [r3, #5]
 8009414:	2201      	movs	r2, #1
 8009416:	9200      	str	r2, [sp, #0]
 8009418:	2200      	movs	r2, #0
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f87f 	bl	8009520 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009428:	b29a      	uxth	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	220a      	movs	r2, #10
 8009432:	761a      	strb	r2, [r3, #24]
      break;
 8009434:	e055      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	795b      	ldrb	r3, [r3, #5]
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fbe1 	bl	8009c04 <USBH_LL_GetURBState>
 8009442:	4603      	mov	r3, r0
 8009444:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d105      	bne.n	8009458 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	220d      	movs	r2, #13
 8009454:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009456:	e043      	b.n	80094e0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009458:	7bbb      	ldrb	r3, [r7, #14]
 800945a:	2b02      	cmp	r3, #2
 800945c:	d103      	bne.n	8009466 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2209      	movs	r2, #9
 8009462:	761a      	strb	r2, [r3, #24]
      break;
 8009464:	e03c      	b.n	80094e0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	2b04      	cmp	r3, #4
 800946a:	d139      	bne.n	80094e0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	220b      	movs	r2, #11
 8009470:	761a      	strb	r2, [r3, #24]
      break;
 8009472:	e035      	b.n	80094e0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7e5b      	ldrb	r3, [r3, #25]
 8009478:	3301      	adds	r3, #1
 800947a:	b2da      	uxtb	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	765a      	strb	r2, [r3, #25]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7e5b      	ldrb	r3, [r3, #25]
 8009484:	2b02      	cmp	r3, #2
 8009486:	d806      	bhi.n	8009496 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009494:	e025      	b.n	80094e2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800949c:	2106      	movs	r1, #6
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	795b      	ldrb	r3, [r3, #5]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f90c 	bl	80096cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	791b      	ldrb	r3, [r3, #4]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f906 	bl	80096cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80094c6:	2302      	movs	r3, #2
 80094c8:	73fb      	strb	r3, [r7, #15]
      break;
 80094ca:	e00a      	b.n	80094e2 <USBH_HandleControl+0x2de>

    default:
      break;
 80094cc:	bf00      	nop
 80094ce:	e008      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094d0:	bf00      	nop
 80094d2:	e006      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094d4:	bf00      	nop
 80094d6:	e004      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094d8:	bf00      	nop
 80094da:	e002      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094dc:	bf00      	nop
 80094de:	e000      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094e0:	bf00      	nop
  }

  return status;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af04      	add	r7, sp, #16
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4613      	mov	r3, r2
 80094f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094fa:	79f9      	ldrb	r1, [r7, #7]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	2308      	movs	r3, #8
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	2300      	movs	r3, #0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	2300      	movs	r3, #0
 800950e:	2200      	movs	r2, #0
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 fb46 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b088      	sub	sp, #32
 8009524:	af04      	add	r7, sp, #16
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4611      	mov	r1, r2
 800952c:	461a      	mov	r2, r3
 800952e:	460b      	mov	r3, r1
 8009530:	80fb      	strh	r3, [r7, #6]
 8009532:	4613      	mov	r3, r2
 8009534:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009544:	7979      	ldrb	r1, [r7, #5]
 8009546:	7e3b      	ldrb	r3, [r7, #24]
 8009548:	9303      	str	r3, [sp, #12]
 800954a:	88fb      	ldrh	r3, [r7, #6]
 800954c:	9302      	str	r3, [sp, #8]
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	2301      	movs	r3, #1
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	2300      	movs	r3, #0
 8009558:	2200      	movs	r2, #0
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fb21 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b088      	sub	sp, #32
 800956e:	af04      	add	r7, sp, #16
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	4611      	mov	r1, r2
 8009576:	461a      	mov	r2, r3
 8009578:	460b      	mov	r3, r1
 800957a:	80fb      	strh	r3, [r7, #6]
 800957c:	4613      	mov	r3, r2
 800957e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009580:	7979      	ldrb	r1, [r7, #5]
 8009582:	2300      	movs	r3, #0
 8009584:	9303      	str	r3, [sp, #12]
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	9302      	str	r3, [sp, #8]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	2301      	movs	r3, #1
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	2300      	movs	r3, #0
 8009594:	2201      	movs	r2, #1
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fb03 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800959c:	2300      	movs	r3, #0

}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b088      	sub	sp, #32
 80095aa:	af04      	add	r7, sp, #16
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	60b9      	str	r1, [r7, #8]
 80095b0:	4611      	mov	r1, r2
 80095b2:	461a      	mov	r2, r3
 80095b4:	460b      	mov	r3, r1
 80095b6:	80fb      	strh	r3, [r7, #6]
 80095b8:	4613      	mov	r3, r2
 80095ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095ca:	7979      	ldrb	r1, [r7, #5]
 80095cc:	7e3b      	ldrb	r3, [r7, #24]
 80095ce:	9303      	str	r3, [sp, #12]
 80095d0:	88fb      	ldrh	r3, [r7, #6]
 80095d2:	9302      	str	r3, [sp, #8]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	2301      	movs	r3, #1
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2302      	movs	r3, #2
 80095de:	2200      	movs	r2, #0
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 fade 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af04      	add	r7, sp, #16
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4611      	mov	r1, r2
 80095fc:	461a      	mov	r2, r3
 80095fe:	460b      	mov	r3, r1
 8009600:	80fb      	strh	r3, [r7, #6]
 8009602:	4613      	mov	r3, r2
 8009604:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009606:	7979      	ldrb	r1, [r7, #5]
 8009608:	2300      	movs	r3, #0
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	88fb      	ldrh	r3, [r7, #6]
 800960e:	9302      	str	r3, [sp, #8]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	2301      	movs	r3, #1
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	2302      	movs	r3, #2
 800961a:	2201      	movs	r2, #1
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fac0 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af04      	add	r7, sp, #16
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	461a      	mov	r2, r3
 800963a:	4603      	mov	r3, r0
 800963c:	70fb      	strb	r3, [r7, #3]
 800963e:	460b      	mov	r3, r1
 8009640:	70bb      	strb	r3, [r7, #2]
 8009642:	4613      	mov	r3, r2
 8009644:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009646:	7878      	ldrb	r0, [r7, #1]
 8009648:	78ba      	ldrb	r2, [r7, #2]
 800964a:	78f9      	ldrb	r1, [r7, #3]
 800964c:	8b3b      	ldrh	r3, [r7, #24]
 800964e:	9302      	str	r3, [sp, #8]
 8009650:	7d3b      	ldrb	r3, [r7, #20]
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	7c3b      	ldrb	r3, [r7, #16]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4603      	mov	r3, r0
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fa53 	bl	8009b06 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	460b      	mov	r3, r1
 8009674:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009676:	78fb      	ldrb	r3, [r7, #3]
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fa72 	bl	8009b64 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f836 	bl	8009708 <USBH_GetFreePipe>
 800969c:	4603      	mov	r3, r0
 800969e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80096a0:	89fb      	ldrh	r3, [r7, #14]
 80096a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00a      	beq.n	80096c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	89fb      	ldrh	r3, [r7, #14]
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	33e0      	adds	r3, #224	; 0xe0
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80096c0:	89fb      	ldrh	r3, [r7, #14]
 80096c2:	b2db      	uxtb	r3, r3
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	2b0f      	cmp	r3, #15
 80096dc:	d80d      	bhi.n	80096fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	33e0      	adds	r3, #224	; 0xe0
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	33e0      	adds	r3, #224	; 0xe0
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	440b      	add	r3, r1
 80096f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
 8009718:	e00f      	b.n	800973a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800971a:	7bfb      	ldrb	r3, [r7, #15]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	33e0      	adds	r3, #224	; 0xe0
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d102      	bne.n	8009734 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	b29b      	uxth	r3, r3
 8009732:	e007      	b.n	8009744 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	3301      	adds	r3, #1
 8009738:	73fb      	strb	r3, [r7, #15]
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	2b0f      	cmp	r3, #15
 800973e:	d9ec      	bls.n	800971a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009740:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009754:	2201      	movs	r2, #1
 8009756:	490e      	ldr	r1, [pc, #56]	; (8009790 <MX_USB_HOST_Init+0x40>)
 8009758:	480e      	ldr	r0, [pc, #56]	; (8009794 <MX_USB_HOST_Init+0x44>)
 800975a:	f7fe fb05 	bl	8007d68 <USBH_Init>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009764:	f7f7 fafa 	bl	8000d5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009768:	490b      	ldr	r1, [pc, #44]	; (8009798 <MX_USB_HOST_Init+0x48>)
 800976a:	480a      	ldr	r0, [pc, #40]	; (8009794 <MX_USB_HOST_Init+0x44>)
 800976c:	f7fe fba9 	bl	8007ec2 <USBH_RegisterClass>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009776:	f7f7 faf1 	bl	8000d5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800977a:	4806      	ldr	r0, [pc, #24]	; (8009794 <MX_USB_HOST_Init+0x44>)
 800977c:	f7fe fc2d 	bl	8007fda <USBH_Start>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009786:	f7f7 fae9 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800978a:	bf00      	nop
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	080097b1 	.word	0x080097b1
 8009794:	200002c0 	.word	0x200002c0
 8009798:	20000010 	.word	0x20000010

0800979c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80097a0:	4802      	ldr	r0, [pc, #8]	; (80097ac <MX_USB_HOST_Process+0x10>)
 80097a2:	f7fe fc2b 	bl	8007ffc <USBH_Process>
}
 80097a6:	bf00      	nop
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	200002c0 	.word	0x200002c0

080097b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80097bc:	78fb      	ldrb	r3, [r7, #3]
 80097be:	3b01      	subs	r3, #1
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d819      	bhi.n	80097f8 <USBH_UserProcess+0x48>
 80097c4:	a201      	add	r2, pc, #4	; (adr r2, 80097cc <USBH_UserProcess+0x1c>)
 80097c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ca:	bf00      	nop
 80097cc:	080097f9 	.word	0x080097f9
 80097d0:	080097e9 	.word	0x080097e9
 80097d4:	080097f9 	.word	0x080097f9
 80097d8:	080097f1 	.word	0x080097f1
 80097dc:	080097e1 	.word	0x080097e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80097e0:	4b09      	ldr	r3, [pc, #36]	; (8009808 <USBH_UserProcess+0x58>)
 80097e2:	2203      	movs	r2, #3
 80097e4:	701a      	strb	r2, [r3, #0]
  break;
 80097e6:	e008      	b.n	80097fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80097e8:	4b07      	ldr	r3, [pc, #28]	; (8009808 <USBH_UserProcess+0x58>)
 80097ea:	2202      	movs	r2, #2
 80097ec:	701a      	strb	r2, [r3, #0]
  break;
 80097ee:	e004      	b.n	80097fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80097f0:	4b05      	ldr	r3, [pc, #20]	; (8009808 <USBH_UserProcess+0x58>)
 80097f2:	2201      	movs	r2, #1
 80097f4:	701a      	strb	r2, [r3, #0]
  break;
 80097f6:	e000      	b.n	80097fa <USBH_UserProcess+0x4a>

  default:
  break;
 80097f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80097fa:	bf00      	nop
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	20000698 	.word	0x20000698

0800980c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08a      	sub	sp, #40	; 0x28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009814:	f107 0314 	add.w	r3, r7, #20
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	605a      	str	r2, [r3, #4]
 800981e:	609a      	str	r2, [r3, #8]
 8009820:	60da      	str	r2, [r3, #12]
 8009822:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800982c:	d147      	bne.n	80098be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800982e:	2300      	movs	r3, #0
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	4b25      	ldr	r3, [pc, #148]	; (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009836:	4a24      	ldr	r2, [pc, #144]	; (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009838:	f043 0301 	orr.w	r3, r3, #1
 800983c:	6313      	str	r3, [r2, #48]	; 0x30
 800983e:	4b22      	ldr	r3, [pc, #136]	; (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	613b      	str	r3, [r7, #16]
 8009848:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800984a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800984e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009850:	2300      	movs	r3, #0
 8009852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009854:	2300      	movs	r3, #0
 8009856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009858:	f107 0314 	add.w	r3, r7, #20
 800985c:	4619      	mov	r1, r3
 800985e:	481b      	ldr	r0, [pc, #108]	; (80098cc <HAL_HCD_MspInit+0xc0>)
 8009860:	f7f8 f9f2 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009864:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800986a:	2302      	movs	r3, #2
 800986c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800986e:	2300      	movs	r3, #0
 8009870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009872:	2300      	movs	r3, #0
 8009874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009876:	230a      	movs	r3, #10
 8009878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800987a:	f107 0314 	add.w	r3, r7, #20
 800987e:	4619      	mov	r1, r3
 8009880:	4812      	ldr	r0, [pc, #72]	; (80098cc <HAL_HCD_MspInit+0xc0>)
 8009882:	f7f8 f9e1 	bl	8001c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009886:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988a:	4a0f      	ldr	r2, [pc, #60]	; (80098c8 <HAL_HCD_MspInit+0xbc>)
 800988c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009890:	6353      	str	r3, [r2, #52]	; 0x34
 8009892:	2300      	movs	r3, #0
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989a:	4a0b      	ldr	r2, [pc, #44]	; (80098c8 <HAL_HCD_MspInit+0xbc>)
 800989c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098a0:	6453      	str	r3, [r2, #68]	; 0x44
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <HAL_HCD_MspInit+0xbc>)
 80098a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	2043      	movs	r0, #67	; 0x43
 80098b4:	f7f7 fe21 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098b8:	2043      	movs	r0, #67	; 0x43
 80098ba:	f7f7 fe3a 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098be:	bf00      	nop
 80098c0:	3728      	adds	r7, #40	; 0x28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	40023800 	.word	0x40023800
 80098cc:	40020000 	.word	0x40020000

080098d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe ff6b 	bl	80087ba <USBH_LL_IncTimer>
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe ffa3 	bl	8008846 <USBH_LL_Connect>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe ffac 	bl	8008874 <USBH_LL_Disconnect>
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
 8009930:	4613      	mov	r3, r2
 8009932:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe ff5d 	bl	800880e <USBH_LL_PortEnabled>
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe ff5d 	bl	800882a <USBH_LL_PortDisabled>
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009986:	2b01      	cmp	r3, #1
 8009988:	d12a      	bne.n	80099e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800998a:	4a18      	ldr	r2, [pc, #96]	; (80099ec <USBH_LL_Init+0x74>)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a15      	ldr	r2, [pc, #84]	; (80099ec <USBH_LL_Init+0x74>)
 8009996:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800999a:	4b14      	ldr	r3, [pc, #80]	; (80099ec <USBH_LL_Init+0x74>)
 800999c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80099a2:	4b12      	ldr	r3, [pc, #72]	; (80099ec <USBH_LL_Init+0x74>)
 80099a4:	2208      	movs	r2, #8
 80099a6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80099a8:	4b10      	ldr	r3, [pc, #64]	; (80099ec <USBH_LL_Init+0x74>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099ae:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <USBH_LL_Init+0x74>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80099b4:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <USBH_LL_Init+0x74>)
 80099b6:	2202      	movs	r2, #2
 80099b8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099ba:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <USBH_LL_Init+0x74>)
 80099bc:	2200      	movs	r2, #0
 80099be:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80099c0:	480a      	ldr	r0, [pc, #40]	; (80099ec <USBH_LL_Init+0x74>)
 80099c2:	f7f8 fb1a 	bl	8001ffa <HAL_HCD_Init>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80099cc:	f7f7 f9c6 	bl	8000d5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80099d0:	4806      	ldr	r0, [pc, #24]	; (80099ec <USBH_LL_Init+0x74>)
 80099d2:	f7f8 ff7b 	bl	80028cc <HAL_HCD_GetCurrentFrame>
 80099d6:	4603      	mov	r3, r0
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7fe fede 	bl	800879c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	2000069c 	.word	0x2000069c

080099f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f8 fee8 	bl	80027dc <HAL_HCD_Start>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 f95e 	bl	8009cd4 <USBH_Get_USB_Status>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7f8 fef0 	bl	8002822 <HAL_HCD_Stop>
 8009a42:	4603      	mov	r3, r0
 8009a44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 f943 	bl	8009cd4 <USBH_Get_USB_Status>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009a64:	2301      	movs	r3, #1
 8009a66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f8 ff3a 	bl	80028e8 <HAL_HCD_GetCurrentSpeed>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d00c      	beq.n	8009a94 <USBH_LL_GetSpeed+0x38>
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d80d      	bhi.n	8009a9a <USBH_LL_GetSpeed+0x3e>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d002      	beq.n	8009a88 <USBH_LL_GetSpeed+0x2c>
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d003      	beq.n	8009a8e <USBH_LL_GetSpeed+0x32>
 8009a86:	e008      	b.n	8009a9a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a8c:	e008      	b.n	8009aa0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	73fb      	strb	r3, [r7, #15]
    break;
 8009a92:	e005      	b.n	8009aa0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009a94:	2302      	movs	r3, #2
 8009a96:	73fb      	strb	r3, [r7, #15]
    break;
 8009a98:	e002      	b.n	8009aa0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9e:	bf00      	nop
  }
  return  speed;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7f8 fecb 	bl	800285c <HAL_HCD_ResetPort>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 f901 	bl	8009cd4 <USBH_Get_USB_Status>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	4611      	mov	r1, r2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f8 fed3 	bl	80028a2 <HAL_HCD_HC_GetXferCount>
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b089      	sub	sp, #36	; 0x24
 8009b0a:	af04      	add	r7, sp, #16
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	461a      	mov	r2, r3
 8009b14:	4603      	mov	r3, r0
 8009b16:	70fb      	strb	r3, [r7, #3]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70bb      	strb	r3, [r7, #2]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b2e:	787c      	ldrb	r4, [r7, #1]
 8009b30:	78ba      	ldrb	r2, [r7, #2]
 8009b32:	78f9      	ldrb	r1, [r7, #3]
 8009b34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b36:	9302      	str	r3, [sp, #8]
 8009b38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	4623      	mov	r3, r4
 8009b46:	f7f8 fabf 	bl	80020c8 <HAL_HCD_HC_Init>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 f8bf 	bl	8009cd4 <USBH_Get_USB_Status>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd90      	pop	{r4, r7, pc}

08009b64 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b7e:	78fa      	ldrb	r2, [r7, #3]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7f8 fb58 	bl	8002238 <HAL_HCD_HC_Halt>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 f8a0 	bl	8009cd4 <USBH_Get_USB_Status>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009ba2:	b590      	push	{r4, r7, lr}
 8009ba4:	b089      	sub	sp, #36	; 0x24
 8009ba6:	af04      	add	r7, sp, #16
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	4608      	mov	r0, r1
 8009bac:	4611      	mov	r1, r2
 8009bae:	461a      	mov	r2, r3
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	70fb      	strb	r3, [r7, #3]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70bb      	strb	r3, [r7, #2]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009bca:	787c      	ldrb	r4, [r7, #1]
 8009bcc:	78ba      	ldrb	r2, [r7, #2]
 8009bce:	78f9      	ldrb	r1, [r7, #3]
 8009bd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009bd4:	9303      	str	r3, [sp, #12]
 8009bd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bd8:	9302      	str	r3, [sp, #8]
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	4623      	mov	r3, r4
 8009be6:	f7f8 fb4b 	bl	8002280 <HAL_HCD_HC_SubmitRequest>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 f86f 	bl	8009cd4 <USBH_Get_USB_Status>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd90      	pop	{r4, r7, pc}

08009c04 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c16:	78fa      	ldrb	r2, [r7, #3]
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7f8 fe2c 	bl	8002878 <HAL_HCD_HC_GetURBState>
 8009c20:	4603      	mov	r3, r0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d103      	bne.n	8009c48 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f872 	bl	8009d2c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009c48:	20c8      	movs	r0, #200	; 0xc8
 8009c4a:	f7f7 fb57 	bl	80012fc <HAL_Delay>
  return USBH_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
 8009c64:	4613      	mov	r3, r2
 8009c66:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c6e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009c70:	78fa      	ldrb	r2, [r7, #3]
 8009c72:	68f9      	ldr	r1, [r7, #12]
 8009c74:	4613      	mov	r3, r2
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	1a9b      	subs	r3, r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	440b      	add	r3, r1
 8009c7e:	3317      	adds	r3, #23
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009c86:	78fa      	ldrb	r2, [r7, #3]
 8009c88:	68f9      	ldr	r1, [r7, #12]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	011b      	lsls	r3, r3, #4
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	440b      	add	r3, r1
 8009c94:	333c      	adds	r3, #60	; 0x3c
 8009c96:	78ba      	ldrb	r2, [r7, #2]
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	e009      	b.n	8009cb0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	68f9      	ldr	r1, [r7, #12]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	011b      	lsls	r3, r3, #4
 8009ca4:	1a9b      	subs	r3, r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	333d      	adds	r3, #61	; 0x3d
 8009cac:	78ba      	ldrb	r2, [r7, #2]
 8009cae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7f7 fb18 	bl	80012fc <HAL_Delay>
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d817      	bhi.n	8009d18 <USBH_Get_USB_Status+0x44>
 8009ce8:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <USBH_Get_USB_Status+0x1c>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d01 	.word	0x08009d01
 8009cf4:	08009d07 	.word	0x08009d07
 8009cf8:	08009d0d 	.word	0x08009d0d
 8009cfc:	08009d13 	.word	0x08009d13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
    break;
 8009d04:	e00b      	b.n	8009d1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009d06:	2302      	movs	r3, #2
 8009d08:	73fb      	strb	r3, [r7, #15]
    break;
 8009d0a:	e008      	b.n	8009d1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d10:	e005      	b.n	8009d1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009d12:	2302      	movs	r3, #2
 8009d14:	73fb      	strb	r3, [r7, #15]
    break;
 8009d16:	e002      	b.n	8009d1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009d18:	2302      	movs	r3, #2
 8009d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d1c:	bf00      	nop
  }
  return usb_status;
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73fb      	strb	r3, [r7, #15]
 8009d44:	e001      	b.n	8009d4a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009d46:	2301      	movs	r3, #1
 8009d48:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	2101      	movs	r1, #1
 8009d50:	4803      	ldr	r0, [pc, #12]	; (8009d60 <MX_DriverVbusFS+0x34>)
 8009d52:	f7f8 f915 	bl	8001f80 <HAL_GPIO_WritePin>
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	40020800 	.word	0x40020800

08009d64 <malloc>:
 8009d64:	4b02      	ldr	r3, [pc, #8]	; (8009d70 <malloc+0xc>)
 8009d66:	4601      	mov	r1, r0
 8009d68:	6818      	ldr	r0, [r3, #0]
 8009d6a:	f000 b82b 	b.w	8009dc4 <_malloc_r>
 8009d6e:	bf00      	nop
 8009d70:	2000007c 	.word	0x2000007c

08009d74 <free>:
 8009d74:	4b02      	ldr	r3, [pc, #8]	; (8009d80 <free+0xc>)
 8009d76:	4601      	mov	r1, r0
 8009d78:	6818      	ldr	r0, [r3, #0]
 8009d7a:	f000 b901 	b.w	8009f80 <_free_r>
 8009d7e:	bf00      	nop
 8009d80:	2000007c 	.word	0x2000007c

08009d84 <sbrk_aligned>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	4e0e      	ldr	r6, [pc, #56]	; (8009dc0 <sbrk_aligned+0x3c>)
 8009d88:	460c      	mov	r4, r1
 8009d8a:	6831      	ldr	r1, [r6, #0]
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	b911      	cbnz	r1, 8009d96 <sbrk_aligned+0x12>
 8009d90:	f000 f8ac 	bl	8009eec <_sbrk_r>
 8009d94:	6030      	str	r0, [r6, #0]
 8009d96:	4621      	mov	r1, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f000 f8a7 	bl	8009eec <_sbrk_r>
 8009d9e:	1c43      	adds	r3, r0, #1
 8009da0:	d00a      	beq.n	8009db8 <sbrk_aligned+0x34>
 8009da2:	1cc4      	adds	r4, r0, #3
 8009da4:	f024 0403 	bic.w	r4, r4, #3
 8009da8:	42a0      	cmp	r0, r4
 8009daa:	d007      	beq.n	8009dbc <sbrk_aligned+0x38>
 8009dac:	1a21      	subs	r1, r4, r0
 8009dae:	4628      	mov	r0, r5
 8009db0:	f000 f89c 	bl	8009eec <_sbrk_r>
 8009db4:	3001      	adds	r0, #1
 8009db6:	d101      	bne.n	8009dbc <sbrk_aligned+0x38>
 8009db8:	f04f 34ff 	mov.w	r4, #4294967295
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}
 8009dc0:	20000a80 	.word	0x20000a80

08009dc4 <_malloc_r>:
 8009dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc8:	1ccd      	adds	r5, r1, #3
 8009dca:	f025 0503 	bic.w	r5, r5, #3
 8009dce:	3508      	adds	r5, #8
 8009dd0:	2d0c      	cmp	r5, #12
 8009dd2:	bf38      	it	cc
 8009dd4:	250c      	movcc	r5, #12
 8009dd6:	2d00      	cmp	r5, #0
 8009dd8:	4607      	mov	r7, r0
 8009dda:	db01      	blt.n	8009de0 <_malloc_r+0x1c>
 8009ddc:	42a9      	cmp	r1, r5
 8009dde:	d905      	bls.n	8009dec <_malloc_r+0x28>
 8009de0:	230c      	movs	r3, #12
 8009de2:	603b      	str	r3, [r7, #0]
 8009de4:	2600      	movs	r6, #0
 8009de6:	4630      	mov	r0, r6
 8009de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ec0 <_malloc_r+0xfc>
 8009df0:	f000 f868 	bl	8009ec4 <__malloc_lock>
 8009df4:	f8d8 3000 	ldr.w	r3, [r8]
 8009df8:	461c      	mov	r4, r3
 8009dfa:	bb5c      	cbnz	r4, 8009e54 <_malloc_r+0x90>
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	4638      	mov	r0, r7
 8009e00:	f7ff ffc0 	bl	8009d84 <sbrk_aligned>
 8009e04:	1c43      	adds	r3, r0, #1
 8009e06:	4604      	mov	r4, r0
 8009e08:	d155      	bne.n	8009eb6 <_malloc_r+0xf2>
 8009e0a:	f8d8 4000 	ldr.w	r4, [r8]
 8009e0e:	4626      	mov	r6, r4
 8009e10:	2e00      	cmp	r6, #0
 8009e12:	d145      	bne.n	8009ea0 <_malloc_r+0xdc>
 8009e14:	2c00      	cmp	r4, #0
 8009e16:	d048      	beq.n	8009eaa <_malloc_r+0xe6>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	eb04 0903 	add.w	r9, r4, r3
 8009e22:	f000 f863 	bl	8009eec <_sbrk_r>
 8009e26:	4581      	cmp	r9, r0
 8009e28:	d13f      	bne.n	8009eaa <_malloc_r+0xe6>
 8009e2a:	6821      	ldr	r1, [r4, #0]
 8009e2c:	1a6d      	subs	r5, r5, r1
 8009e2e:	4629      	mov	r1, r5
 8009e30:	4638      	mov	r0, r7
 8009e32:	f7ff ffa7 	bl	8009d84 <sbrk_aligned>
 8009e36:	3001      	adds	r0, #1
 8009e38:	d037      	beq.n	8009eaa <_malloc_r+0xe6>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	442b      	add	r3, r5
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	f8d8 3000 	ldr.w	r3, [r8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d038      	beq.n	8009eba <_malloc_r+0xf6>
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	42a2      	cmp	r2, r4
 8009e4c:	d12b      	bne.n	8009ea6 <_malloc_r+0xe2>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	605a      	str	r2, [r3, #4]
 8009e52:	e00f      	b.n	8009e74 <_malloc_r+0xb0>
 8009e54:	6822      	ldr	r2, [r4, #0]
 8009e56:	1b52      	subs	r2, r2, r5
 8009e58:	d41f      	bmi.n	8009e9a <_malloc_r+0xd6>
 8009e5a:	2a0b      	cmp	r2, #11
 8009e5c:	d917      	bls.n	8009e8e <_malloc_r+0xca>
 8009e5e:	1961      	adds	r1, r4, r5
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	6025      	str	r5, [r4, #0]
 8009e64:	bf18      	it	ne
 8009e66:	6059      	strne	r1, [r3, #4]
 8009e68:	6863      	ldr	r3, [r4, #4]
 8009e6a:	bf08      	it	eq
 8009e6c:	f8c8 1000 	streq.w	r1, [r8]
 8009e70:	5162      	str	r2, [r4, r5]
 8009e72:	604b      	str	r3, [r1, #4]
 8009e74:	4638      	mov	r0, r7
 8009e76:	f104 060b 	add.w	r6, r4, #11
 8009e7a:	f000 f829 	bl	8009ed0 <__malloc_unlock>
 8009e7e:	f026 0607 	bic.w	r6, r6, #7
 8009e82:	1d23      	adds	r3, r4, #4
 8009e84:	1af2      	subs	r2, r6, r3
 8009e86:	d0ae      	beq.n	8009de6 <_malloc_r+0x22>
 8009e88:	1b9b      	subs	r3, r3, r6
 8009e8a:	50a3      	str	r3, [r4, r2]
 8009e8c:	e7ab      	b.n	8009de6 <_malloc_r+0x22>
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	6862      	ldr	r2, [r4, #4]
 8009e92:	d1dd      	bne.n	8009e50 <_malloc_r+0x8c>
 8009e94:	f8c8 2000 	str.w	r2, [r8]
 8009e98:	e7ec      	b.n	8009e74 <_malloc_r+0xb0>
 8009e9a:	4623      	mov	r3, r4
 8009e9c:	6864      	ldr	r4, [r4, #4]
 8009e9e:	e7ac      	b.n	8009dfa <_malloc_r+0x36>
 8009ea0:	4634      	mov	r4, r6
 8009ea2:	6876      	ldr	r6, [r6, #4]
 8009ea4:	e7b4      	b.n	8009e10 <_malloc_r+0x4c>
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	e7cc      	b.n	8009e44 <_malloc_r+0x80>
 8009eaa:	230c      	movs	r3, #12
 8009eac:	603b      	str	r3, [r7, #0]
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f000 f80e 	bl	8009ed0 <__malloc_unlock>
 8009eb4:	e797      	b.n	8009de6 <_malloc_r+0x22>
 8009eb6:	6025      	str	r5, [r4, #0]
 8009eb8:	e7dc      	b.n	8009e74 <_malloc_r+0xb0>
 8009eba:	605b      	str	r3, [r3, #4]
 8009ebc:	deff      	udf	#255	; 0xff
 8009ebe:	bf00      	nop
 8009ec0:	20000a7c 	.word	0x20000a7c

08009ec4 <__malloc_lock>:
 8009ec4:	4801      	ldr	r0, [pc, #4]	; (8009ecc <__malloc_lock+0x8>)
 8009ec6:	f000 b84b 	b.w	8009f60 <__retarget_lock_acquire_recursive>
 8009eca:	bf00      	nop
 8009ecc:	20000bc0 	.word	0x20000bc0

08009ed0 <__malloc_unlock>:
 8009ed0:	4801      	ldr	r0, [pc, #4]	; (8009ed8 <__malloc_unlock+0x8>)
 8009ed2:	f000 b846 	b.w	8009f62 <__retarget_lock_release_recursive>
 8009ed6:	bf00      	nop
 8009ed8:	20000bc0 	.word	0x20000bc0

08009edc <memset>:
 8009edc:	4402      	add	r2, r0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d100      	bne.n	8009ee6 <memset+0xa>
 8009ee4:	4770      	bx	lr
 8009ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eea:	e7f9      	b.n	8009ee0 <memset+0x4>

08009eec <_sbrk_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4d06      	ldr	r5, [pc, #24]	; (8009f08 <_sbrk_r+0x1c>)
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	4608      	mov	r0, r1
 8009ef6:	602b      	str	r3, [r5, #0]
 8009ef8:	f7f7 f91c 	bl	8001134 <_sbrk>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_sbrk_r+0x1a>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_sbrk_r+0x1a>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	20000bbc 	.word	0x20000bbc

08009f0c <__errno>:
 8009f0c:	4b01      	ldr	r3, [pc, #4]	; (8009f14 <__errno+0x8>)
 8009f0e:	6818      	ldr	r0, [r3, #0]
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	2000007c 	.word	0x2000007c

08009f18 <__libc_init_array>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	4d0d      	ldr	r5, [pc, #52]	; (8009f50 <__libc_init_array+0x38>)
 8009f1c:	4c0d      	ldr	r4, [pc, #52]	; (8009f54 <__libc_init_array+0x3c>)
 8009f1e:	1b64      	subs	r4, r4, r5
 8009f20:	10a4      	asrs	r4, r4, #2
 8009f22:	2600      	movs	r6, #0
 8009f24:	42a6      	cmp	r6, r4
 8009f26:	d109      	bne.n	8009f3c <__libc_init_array+0x24>
 8009f28:	4d0b      	ldr	r5, [pc, #44]	; (8009f58 <__libc_init_array+0x40>)
 8009f2a:	4c0c      	ldr	r4, [pc, #48]	; (8009f5c <__libc_init_array+0x44>)
 8009f2c:	f000 f874 	bl	800a018 <_init>
 8009f30:	1b64      	subs	r4, r4, r5
 8009f32:	10a4      	asrs	r4, r4, #2
 8009f34:	2600      	movs	r6, #0
 8009f36:	42a6      	cmp	r6, r4
 8009f38:	d105      	bne.n	8009f46 <__libc_init_array+0x2e>
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f40:	4798      	blx	r3
 8009f42:	3601      	adds	r6, #1
 8009f44:	e7ee      	b.n	8009f24 <__libc_init_array+0xc>
 8009f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f4a:	4798      	blx	r3
 8009f4c:	3601      	adds	r6, #1
 8009f4e:	e7f2      	b.n	8009f36 <__libc_init_array+0x1e>
 8009f50:	0800a158 	.word	0x0800a158
 8009f54:	0800a158 	.word	0x0800a158
 8009f58:	0800a158 	.word	0x0800a158
 8009f5c:	0800a15c 	.word	0x0800a15c

08009f60 <__retarget_lock_acquire_recursive>:
 8009f60:	4770      	bx	lr

08009f62 <__retarget_lock_release_recursive>:
 8009f62:	4770      	bx	lr

08009f64 <memcpy>:
 8009f64:	440a      	add	r2, r1
 8009f66:	4291      	cmp	r1, r2
 8009f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f6c:	d100      	bne.n	8009f70 <memcpy+0xc>
 8009f6e:	4770      	bx	lr
 8009f70:	b510      	push	{r4, lr}
 8009f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f7a:	4291      	cmp	r1, r2
 8009f7c:	d1f9      	bne.n	8009f72 <memcpy+0xe>
 8009f7e:	bd10      	pop	{r4, pc}

08009f80 <_free_r>:
 8009f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f82:	2900      	cmp	r1, #0
 8009f84:	d044      	beq.n	800a010 <_free_r+0x90>
 8009f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f8a:	9001      	str	r0, [sp, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f92:	bfb8      	it	lt
 8009f94:	18e4      	addlt	r4, r4, r3
 8009f96:	f7ff ff95 	bl	8009ec4 <__malloc_lock>
 8009f9a:	4a1e      	ldr	r2, [pc, #120]	; (800a014 <_free_r+0x94>)
 8009f9c:	9801      	ldr	r0, [sp, #4]
 8009f9e:	6813      	ldr	r3, [r2, #0]
 8009fa0:	b933      	cbnz	r3, 8009fb0 <_free_r+0x30>
 8009fa2:	6063      	str	r3, [r4, #4]
 8009fa4:	6014      	str	r4, [r2, #0]
 8009fa6:	b003      	add	sp, #12
 8009fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fac:	f7ff bf90 	b.w	8009ed0 <__malloc_unlock>
 8009fb0:	42a3      	cmp	r3, r4
 8009fb2:	d908      	bls.n	8009fc6 <_free_r+0x46>
 8009fb4:	6825      	ldr	r5, [r4, #0]
 8009fb6:	1961      	adds	r1, r4, r5
 8009fb8:	428b      	cmp	r3, r1
 8009fba:	bf01      	itttt	eq
 8009fbc:	6819      	ldreq	r1, [r3, #0]
 8009fbe:	685b      	ldreq	r3, [r3, #4]
 8009fc0:	1949      	addeq	r1, r1, r5
 8009fc2:	6021      	streq	r1, [r4, #0]
 8009fc4:	e7ed      	b.n	8009fa2 <_free_r+0x22>
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	b10b      	cbz	r3, 8009fd0 <_free_r+0x50>
 8009fcc:	42a3      	cmp	r3, r4
 8009fce:	d9fa      	bls.n	8009fc6 <_free_r+0x46>
 8009fd0:	6811      	ldr	r1, [r2, #0]
 8009fd2:	1855      	adds	r5, r2, r1
 8009fd4:	42a5      	cmp	r5, r4
 8009fd6:	d10b      	bne.n	8009ff0 <_free_r+0x70>
 8009fd8:	6824      	ldr	r4, [r4, #0]
 8009fda:	4421      	add	r1, r4
 8009fdc:	1854      	adds	r4, r2, r1
 8009fde:	42a3      	cmp	r3, r4
 8009fe0:	6011      	str	r1, [r2, #0]
 8009fe2:	d1e0      	bne.n	8009fa6 <_free_r+0x26>
 8009fe4:	681c      	ldr	r4, [r3, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	6053      	str	r3, [r2, #4]
 8009fea:	440c      	add	r4, r1
 8009fec:	6014      	str	r4, [r2, #0]
 8009fee:	e7da      	b.n	8009fa6 <_free_r+0x26>
 8009ff0:	d902      	bls.n	8009ff8 <_free_r+0x78>
 8009ff2:	230c      	movs	r3, #12
 8009ff4:	6003      	str	r3, [r0, #0]
 8009ff6:	e7d6      	b.n	8009fa6 <_free_r+0x26>
 8009ff8:	6825      	ldr	r5, [r4, #0]
 8009ffa:	1961      	adds	r1, r4, r5
 8009ffc:	428b      	cmp	r3, r1
 8009ffe:	bf04      	itt	eq
 800a000:	6819      	ldreq	r1, [r3, #0]
 800a002:	685b      	ldreq	r3, [r3, #4]
 800a004:	6063      	str	r3, [r4, #4]
 800a006:	bf04      	itt	eq
 800a008:	1949      	addeq	r1, r1, r5
 800a00a:	6021      	streq	r1, [r4, #0]
 800a00c:	6054      	str	r4, [r2, #4]
 800a00e:	e7ca      	b.n	8009fa6 <_free_r+0x26>
 800a010:	b003      	add	sp, #12
 800a012:	bd30      	pop	{r4, r5, pc}
 800a014:	20000a7c 	.word	0x20000a7c

0800a018 <_init>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	bf00      	nop
 800a01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01e:	bc08      	pop	{r3}
 800a020:	469e      	mov	lr, r3
 800a022:	4770      	bx	lr

0800a024 <_fini>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	bf00      	nop
 800a028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02a:	bc08      	pop	{r3}
 800a02c:	469e      	mov	lr, r3
 800a02e:	4770      	bx	lr
